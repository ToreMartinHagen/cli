project_name: kosli
before:
  hooks:
  - go mod tidy
builds:
  - id: kosli
    binary: kosli
    ldflags: 
      - -w -s
      - -X github.com/kosli-dev/cli/internal/version.version={{ .Tag }}
      - -X github.com/kosli-dev/cli/internal/version.gitCommit={{ .FullCommit }}
      - -X github.com/kosli-dev/cli/internal/version.gitTreeState=clean
      - -extldflags "-static"
    env:
      - CGO_ENABLED=0
      - GO111MODULE=on
    goos:
      - darwin
      - linux
      - windows
    goarch:
      - amd64
      - arm64
      - arm
    main: ./cmd/kosli/

archives:
  -
    # Can be used to change the archive formats for specific GOOSs.
    # Most common use case is to archive as zip on Windows.
    # Default is empty.
    format_overrides:
      - goos: windows
        format: zip


# brews:
#   -
#     # GitHub/GitLab repository to push the formula to
#     tap:
#       owner: kosli-dev
#       name: homebrew-tap
#       branch: main

#     url_template: "https://github.com/kosli-dev/cli/releases/download/{{ .Tag }}/{{ .ArtifactName }}"

#     # The project name and current git tag are used in the format string.
#     commit_msg_template: "Brew formula update for {{ .ProjectName }} version {{ .Tag }}"

#     folder: Formula

#     homepage: "https://kosli.com/"
#     description: "A CLI client for reporting compliance events to  https://kosli.com"
#     license: "MIT"

#     # Packages your package depends on.
#     dependencies:
#       - name: go

#     # So you can `brew test` your formula.
#     # Default is empty.
#     test: |
#       system "#{bin}/kosli", "version"
#       version_output = shell_output(bin/"kosli version 2>&1")
#       assert_match "GitTreeState:\"clean\"", version_output

#       if build.stable?
#         revision = stable.specs[:revision]
#         assert_match "GitCommit:\"#{revision}\"", version_output
#         assert_match "Version:\"v#{version}\"", version_output
#       end

#     install: |
#       bin.install "kosli"


# docs for nfpm can be found here:  https://goreleaser.com/customization/nfpm/
nfpms:
  - id: kosli

    # You can change the file name of the package.
    #
    # Default:`{{ .PackageName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ with .Arm }}v{{ . }}{{ end }}{{ with .Mips }}_{{ . }}{{ end }}{{ if not (eq .Amd64 "v1") }}{{ .Amd64 }}{{ end }}`
    file_name_template: "{{ .ConventionalFileName }}"

    builds:
      - kosli

    # Replacements for GOOS and GOARCH in the package name.
    # Keys should be valid GOOSs or GOARCHs.
    # Values are the respective replacements.
    # Default is empty.
    replacements:
      amd64: amd64_v1
      darwin: darwin
      linux: linux
      arm64: arm64
      arm: arm_6

    vendor: Kosli Inc.
    homepage: https://kosli.com/
    maintainer: Mike Long <mike@kosli.com>
    description: CLI client for reporting compliance events to  https://kosli.com
    license: MIT

    # Formats to be generated.
    formats:
      - deb
      - rpm

    # Template to the path that the binaries should be installed.
    # Defaults to `/usr/bin`.
    bindir: /usr/bin

    # Section.
    section: misc

    # Priority.
    priority: optional

    # Makes a meta package - an empty package that contains only supporting files and dependencies.
    # When set to `true`, the `builds` option is ignored.
    # Defaults to false.
    # meta: true

    # Contents to add to the package.
    # GoReleaser will automatically add the binaries.
    contents:
      # The src and dst attributes also supports name templates
      - src: dist/kosli_{{ .Os }}_{{ .Arch }}/kosli
        dst: /usr/local/bin/kosli

publishers:
  - name: fury.io
    # by specifying `packages` id here goreleaser will only use this publisher
    # with artifacts identified by this id
    ids:
      - kosli
    dir: "{{ dir .ArtifactPath }}"
    cmd: curl -F package=@{{ .ArtifactName }} https://{{ .Env.FURY_TOKEN }}@push.fury.io/kosli/


# # .goreleaser.yaml
# release:
#   # Repo in which the release will be created.
#   # Default is extracted from the origin remote URL or empty if its private hosted.
#   # github:
#   #   owner: user
#   #   name: repo

#   # IDs of the archives to use.
#   # Defaults to all.
#   ids:
#     - kosli

#   # If set to true, will not auto-publish the release.
#   # Available only for GitHub and Gitea.
#   # Default is false.
#   draft: true

#   # Whether to remove existing draft releases with the same name before creating a new one.
#   # Only effective if `draft` is set to true.
#   # Available only for GitHub.
#   # Default is false.
#   # replace_existing_draft: true

#   # Useful if you want to delay the creation of the tag in the remote.
#   # You can create the tag locally, but not push it, and run GoReleaser.
#   # It'll then set the `target_commitish` portion of the GitHub release to the value of this field.
#   # Only works on GitHub.
#   # Default is empty.
#   # target_commitish: '{{ .Commit }}'

#   # If set, will create a release discussion in the category specified.
#   #
#   # Warning: do not use categories in the 'Announcement' format.
#   #  Check https://github.com/goreleaser/goreleaser/issues/2304 for more info.
#   #
#   # Default is empty.
#   # discussion_category_name: General

#   # If set to auto, will mark the release as not ready for production
#   # in case there is an indicator for this in the tag e.g. v1.0.0-rc1
#   # If set to true, will mark the release as not ready for production.
#   # Default is false.
#   prerelease: auto

#   # What to do with the release notes in case there the release already exists.
#   #
#   # Valid options are:
#   # - `keep-existing`: keep the existing notes
#   # - `append`: append the current release notes to the existing notes
#   # - `prepend`: prepend the current release notes to the existing notes
#   # - `replace`: replace existing notes
#   #
#   # Default is `keep-existing`.
#   mode: append

#   # Header template for the release body.
#   # Defaults to empty.
#   # header: |
#   #   ## Some title ({{ .Date }})

#   #   Welcome to this new release!

#   # Footer template for the release body.
#   # Defaults to empty.
#   # footer: |
#   #   ## Thanks!

#   #   Those were the changes on {{ .Tag }}!

#   # You can change the name of the release.
#   # Default is `{{.Tag}}` on OSS and `{{.PrefixedTag}}` on Pro.
#   name_template: "{{.ProjectName}}-v{{.Version}} {{.Env.USER}}"

#   # You can disable this pipe in order to not create the release on any SCM.
#   # Keep in mind that this might also break things that depend on the release URL, for instance, homebrew taps.
#   #
#   # Defaults to false.
#   disable: true

#   # Set this to true if you want to disable just the artifact upload to the SCM.
#   # If this is true, GoReleaser will still create the release with the changelog, but won't upload anything to it.
#   #
#   # Defaults to false.
#   # skip_upload: true

#   # You can add extra pre-existing files to the release.
#   # The filename on the release will be the last part of the path (base).
#   # If another file with the same name exists, the last one found will be used.
#   # These globs can also include templates.
#   #
#   # Defaults to empty.
#   extra_files:
#     - glob: ./dist/kosli*deb
