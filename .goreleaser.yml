project_name: kosli
before:
  hooks:
  - go mod tidy
builds:
  - id: kosli
    binary: kosli
    ldflags: 
      - -w -s
      - -X github.com/kosli-dev/cli/internal/version.version={{ .Tag }}
      - -X github.com/kosli-dev/cli/internal/version.gitCommit={{ .FullCommit }}
      - -X github.com/kosli-dev/cli/internal/version.gitTreeState=clean
      - -extldflags "-static"
    env:
      - CGO_ENABLED=0
      - GO111MODULE=on
    goos:
      - darwin
      - linux
      - windows
    goarch:
      - amd64
      - arm64
      - arm
    main: ./cmd/kosli/

archives:
  -
    # Can be used to change the archive formats for specific GOOSs.
    # Most common use case is to archive as zip on Windows.
    # Default is empty.
    format_overrides:
      - goos: windows
        format: zip


# brews:
#   -
#     # GitHub/GitLab repository to push the formula to
#     tap:
#       owner: kosli-dev
#       name: homebrew-tap
#       branch: main

#     url_template: "https://github.com/kosli-dev/cli/releases/download/{{ .Tag }}/{{ .ArtifactName }}"

#     # The project name and current git tag are used in the format string.
#     commit_msg_template: "Brew formula update for {{ .ProjectName }} version {{ .Tag }}"

#     folder: Formula

#     homepage: "https://kosli.com/"
#     description: "A CLI client for reporting compliance events to  https://kosli.com"
#     license: "MIT"

#     # Packages your package depends on.
#     dependencies:
#       - name: go

#     # So you can `brew test` your formula.
#     # Default is empty.
#     test: |
#       system "#{bin}/kosli", "version"
#       version_output = shell_output(bin/"kosli version 2>&1")
#       assert_match "GitTreeState:\"clean\"", version_output

#       if build.stable?
#         revision = stable.specs[:revision]
#         assert_match "GitCommit:\"#{revision}\"", version_output
#         assert_match "Version:\"v#{version}\"", version_output
#       end

#     install: |
#       bin.install "kosli"


# docs for nfpm can be found here:  https://goreleaser.com/customization/nfpm/
nfpms:
  - id: kosli

    # You can change the file name of the package.
    #
    # Default:`{{ .PackageName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ with .Arm }}v{{ . }}{{ end }}{{ with .Mips }}_{{ . }}{{ end }}{{ if not (eq .Amd64 "v1") }}{{ .Amd64 }}{{ end }}`
    file_name_template: "{{ .ConventionalFileName }}"

    builds:
      - kosli

    # Replacements for GOOS and GOARCH in the package name.
    # Keys should be valid GOOSs or GOARCHs.
    # Values are the respective replacements.
    # Default is empty.
    replacements:
      amd64: amd64_v1
      darwin: darwin
      linux: linux
      arm64: arm64
      arm: arm_6

    vendor: Kosli Inc.
    homepage: https://kosli.com/
    maintainer: Mike Long <mike@kosli.com>
    description: CLI client for reporting compliance events to  https://kosli.com
    license: MIT

    # Formats to be generated.
    formats:
      - deb
      - rpm

    # Template to the path that the binaries should be installed.
    # Defaults to `/usr/bin`.
    bindir: /usr/bin

    # Section.
    section: misc

    # Priority.
    priority: optional

    # Makes a meta package - an empty package that contains only supporting files and dependencies.
    # When set to `true`, the `builds` option is ignored.
    # Defaults to false.
    # meta: true

    # Contents to add to the package.
    # GoReleaser will automatically add the binaries.
    contents:
      # The src and dst attributes also supports name templates
      - src: dist/kosli_{{ .Os }}_{{ .Arch }}/kosli
        dst: /usr/local/bin/kosli

publishers:
  - name: fury.io
    # by specifying `packages` id here goreleaser will only use this publisher
    # with artifacts identified by this id
    ids:
      - kosli
    dir: "{{ dir .ArtifactPath }}"
    cmd: curl -F package=@{{ .ArtifactName }} https://{{ .Env.FURY_TOKEN }}@push.fury.io/kosli/
