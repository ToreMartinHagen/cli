<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on Kosli developer documentation</title><link>https://docs.kosli.com/tutorials/</link><description>Recent content in Tutorials on Kosli developer documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://docs.kosli.com/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Get familiar with Kosli</title><link>https://docs.kosli.com/tutorials/get_familiar_with_kosli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/tutorials/get_familiar_with_kosli/</guid><description>Get familiar with Kosli # The following guide is the easiest and quickest way to try Kosli out and understand it's features. But is not a real life use case for Kosli - usually you'd run Kosli in your CI and remote environments.
So you can try it out using just your local machine and docker. In our Guides and Kosli integrations sections you'll find all the information needed to run it in actual projects.</description></item><item><title>Following a git commit to runtime environments</title><link>https://docs.kosli.com/tutorials/following_a_git_commit_to_runtime_environments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/tutorials/following_a_git_commit_to_runtime_environments/</guid><description>Following a git commit to runtime environments # Overview # In this 5 minute tutorial you'll learn how Kosli tracks &amp;quot;life after git&amp;quot; and shows you events from:
CI-pipelines (eg, building the docker image, running the unit tests, deploying, etc) runtime environments (eg, the blue-green rollover, instance scaling, etc) You'll follow an actual git commit to an open-source project called cyber-dojo. In our example cyber-dojoâ€™s runner service should run with three replicas.</description></item><item><title>Tracing a production incident back to git commits</title><link>https://docs.kosli.com/tutorials/tracing_a_production_incident_back_to_git_commits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/tutorials/tracing_a_production_incident_back_to_git_commits/</guid><description>Tracing a production incident back to git commits # In this 5 minute tutorial you'll learn how Kosli can track a production incident in Cyber-dojo back to git commits.
Something has gone wrong and https://cyber-dojo.org is displaying a 500 error!
It was working an hour ago. What has happened in the last hour?
Start with the environment # https://cyber-dojo.org is running in an AWS environment that reports to Kosli as aws-prod.</description></item><item><title>Simulating a DevOps system</title><link>https://docs.kosli.com/tutorials/simulating_a_devops_system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/tutorials/simulating_a_devops_system/</guid><description>Simulating a DevOps system # To follow the simulation you need to:
Install the kosli CLI. Get your Kosli API token. Set the KOSLI_API_TOKEN environment variable: export KOSLI_API_TOKEN=&amp;lt;paste-your-kosli-API-token-here&amp;gt; Set the KOSLI_OWNER environment variable to your Kosli organization name: export KOSLI_OWNER=&amp;lt;paste-your-kosli-organization-name&amp;gt; You will simulate a system with source code, a build system, and a running server. There is a script to help you run these simulations, so you won't need to type too many commands.</description></item></channel></rss>