[{"id":0,"href":"/use_cases/following_a_git_commit_to_runtime_environments/","title":"Following a git commit to runtime environments","section":"Use cases","content":" Following a git commit to runtime environments # Overview # In this 5 minute tutorial you'll learn how Kosli tracks \u0026quot;life after git\u0026quot; and shows you events from:\nCI-pipelines (eg, building the docker image, running the unit tests, deploying, etc) runtime environments (eg, the blue-green rollover, instance scaling, etc) You'll follow an actual git commit to an open-source project called cyber-dojo. In our example cyber-dojo’s runner service should run with three replicas. However, due to an oversight while switching from Google Kubernetes Engine (GKE) to AWS Elastic Container Service (ECS), it was running with just one replica. You will follow the commit that fixed this.\nGetting ready # You need to:\nInstall the kosli CLI . Get your Kosli API token . Set the KOSLI_API_TOKEN environment variable . Set the KOSLI_OWNER environment variable to cyber-dojo (the Kosli cyber-dojo organization is public so any authenticated user can read its data): export KOSLI_OWNER=cyber-dojo Pipeline events # Listing pipelines # Find out which cyber-dojo repositories have a CI pipeline reporting to Kosli :\nkosli pipeline ls You will see:\nNAME DESCRIPTION VISIBILITY creator UX for Group/Kata creation public custom-start-points Custom exercises choices public dashboard UX for a group practice dashboard public differ Diff files from two traffic-lights public exercises-start-points Exercises choices public languages-start-points Language+TestFramework choices public nginx Reverse proxy public repler REPL for Python images public runner Test runner public saver Group/Kata model+persistence public shas UX for git+image shas public web UX for practicing TDD public cyber-dojo overview # cyber-dojo is a web platform where teams practice TDD without any installation. cyber-dojo has a microservice architecture with a dozen git repositories. Each git repository has its own Github Actions CI pipeline producing a docker image. These docker images run in two AWS environments named aws-beta and aws-prod . Following the artifact # The runner service, only had one instance running instead of three. The commit which fixed the problem was 16d9990 in the runner repository. Follow this commit using the kosli command:\nkosli artifact get runner:16d9990 You will see:\nName: cyberdojo/runner:16d9990 Fingerprint: 9af401c4350b21e3f1df17d6ad808da43d9646e75b6da902cc7c492bcfb9c625 Created on: Mon, 22 Aug 2022 11:35:00 CEST • 15 days ago Git commit: 16d9990ad23a40eecaf087abac2a58a2d2a4b3f4 Commit URL: https://github.com/cyber-dojo/runner/commit/16d9990ad23a40eecaf087abac2a58a2d2a4b3f4 Build URL: https://github.com/cyber-dojo/runner/actions/runs/2902808452 State: COMPLIANT History: Artifact created Mon, 22 Aug 2022 11:35:00 CEST branch-coverage evidence received Mon, 22 Aug 2022 11:36:02 CEST Deployment #18 to aws-beta environment Mon, 22 Aug 2022 11:37:17 CEST Deployment #19 to aws-prod environment Mon, 22 Aug 2022 11:38:21 CEST Started running in aws-beta#84 environment Mon, 22 Aug 2022 11:38:28 CEST Started running in aws-prod#65 environment Mon, 22 Aug 2022 11:39:22 CEST Scaled down from 3 to 2 in aws-beta#117 environment Wed, 24 Aug 2022 18:03:42 CEST No longer running in aws-beta#119 environment Wed, 24 Aug 2022 18:05:42 CEST Scaled down from 3 to 1 in aws-prod#94 environment Wed, 24 Aug 2022 18:10:28 CEST No longer running in aws-prod#96 environment Wed, 24 Aug 2022 18:12:28 CEST Let's look at this output in detail:\nName: The name of the docker image is cyberdojo/runner:16d9990. Its image registry is defaulted to dockerhub. Its :tag is the short-sha of the git commit. Fingerprint: The unique tamper-proof SHA256 fingerprint of the artifact. Created on: The artifact was created on 22nd August 2022, at 11:35 CEST. Commit URL: You can follow the commit URL to the actual commit on Github since cyber-dojo's git repositories are public. Build URL: You can follow the build URL to the actual Github Action for this commit. State: COMPLIANT means that all the promised evidence for the artifact (in this case branch-coverage) was provided before deployment. History: CI pipeline events The artifact was created on the 22nd August at 11:35:00 CEST. The artifact has branch-coverage evidence. The artifact was deployed to aws-beta on 22nd August 11:37:17 CEST, and to aws-prod a minute later. Runtime environment events The artifact was reported running in both environments. The artifact's number of running instances scaled down. The artifact was reported exited. The information about this artifact is also available through the web interface .\nThe runner service uses Continuous Deployment ; if the tests pass the artifact is blue-green deployed to both its runtime environments without any manual approval steps. Some cyber-dojo services (eg web) have a manual approval step, and Kosli supports this. Environment Snapshots # Kosli environments store information about what is running in your actual runtime environments (eg server, Kubernetes cluster, AWS, ...). We use one Kosli environment per runtime environment.\nThe Kosli CLI periodically fingerprints all the running artifacts in a runtime environment and reports them to Kosli. Whenever a change is detected, a snapshot of the environment is saved.\nCyber-dojo runs the kosli CLI from inside its AWS runtime environments using a lambda function to report the running services to Kosli. The History of the artifact tells you your artifact started running in snapshot #65 of aws-prod.\nYou query Kosli to see what was running in aws-prod snapshot #65:\nkosli env get aws-prod#65 The output will be:\nCOMMIT ARTIFACT PIPELINE RUNNING_SINCE REPLICAS 16d9990 Name: 274425519734.dkr.ecr.eu-central-1.amazonaws.com/runner:16d9990 runner 11 days ago 3 Fingerprint: 9af401c4350b21e3f1df17d6ad808da43d9646e75b6da902cc7c492bcfb9c625 7c45272 Name: 274425519734.dkr.ecr.eu-central-1.amazonaws.com/shas:7c45272 shas 11 days ago 1 Fingerprint: 76c442c04283c4ca1af22d882750eb960cf53c0aa041bbdb2db9df2f2c1282be ...some output elided... 85d83c6 Name: 274425519734.dkr.ecr.eu-central-1.amazonaws.com/runner:85d83c6 runner 13 days ago 1 Fingerprint: eeb0cfc9ee7f69fbd9531d5b8c1e8d22a8de119e2a422344a714a868e9a8bfec 1a2b170 Name: 274425519734.dkr.ecr.eu-central-1.amazonaws.com/differ:1a2b170 differ 13 days ago 1 Fingerprint: d8440b94f7f9174c180324ceafd4148360d9d7c916be2b910f132c58b8a943ae You see in this snapshot, the runner:16d9990 artifact is indeed running with 3 replicas. You have proof the git commit has worked.\nBlue-green deployment # There were two versions of runner at this point in time! The first had three replicas (to fix the problem), but there was also a second (from commit 85d83c6) with only one replica.\nYou are seeing a blue-green deployment happening; runner:85d83c6 is about to be stopped and will not be reported in snapshot aws-prod#66.\nDiffing snapshots # Kosli's env diff command allows you to see differences between two versions of your runtime environment.\nLet's find out what's different between the aws-prod#64 and aws-prod#65 snapshots:\nkosli env diff aws-prod#64 aws-prod#65 The response will be:\nOnly present in aws-prod#65 Name: 274425519734.dkr.ecr.eu-central-1.amazonaws.com/runner:16d9990 Fingerprint: 9af401c4350b21e3f1df17d6ad808da43d9646e75b6da902cc7c492bcfb9c625 Pipeline: runner Commit URL: https://github.com/cyber-dojo/runner/commit/16d9990ad23a40eecaf087abac2a58a2d2a4b3f4 Started: Mon, 22 Aug 2022 11:39:17 CEST • 15 days ago The output above shows that runner:16d9990 started running in snapshot 65 of aws-prod environment.\nYou have seen how Kosli can follow a git commit on its way into production, and provide information about the artifacts history, without any access to cyber-dojo's aws-prod environment.\nSee also the other tutorials: # Tracing a production incident back to git commits Simulating a DevOps system "},{"id":1,"href":"/use_cases/tracing_a_production_incident_back_to_git_commits/","title":"Tracing a production incident back to git commits","section":"Use cases","content":" Tracing a production incident back to git commits # In this 5 minute tutorial you'll learn how Kosli can track a production incident in Cyber-dojo back to git commits.\nSomething has gone wrong and https://cyber-dojo.org is displaying a 500 error!\nIt was working an hour ago. What has happened in the last hour?\nStart with the environment # https://cyber-dojo.org is running in an AWS environment that reports to Kosli as aws-prod.\nGet a log of this environment's changes:\nkosli env log aws-prod --long You will see more than 177 snapshots because aws-prod has moved on since this incident (it has been resolved with new commits which have created new deployments). To get the same output as we have you can set the interval for the command:\nkosli env log aws-prod --long 175..177 SNAPSHOT EVENT PIPELINE DEPLOYMENTS #177 Artifact: 274425519734.dkr.ecr.eu-central-1.amazonaws.com/creator:31dee35 creator #87 Fingerprint: 5d1c926530213dadd5c9fcbf59c8822da56e32a04b0f9c774d7cdde3cf6ba66d Description: 1 instance stopped running (from 1 to 0). Reported at: Tue, 06 Sep 2022 16:53:28 CEST #176 Artifact: 274425519734.dkr.ecr.eu-central-1.amazonaws.com/creator:b7a5908 creator #89 Fingerprint: 860ad172ace5aee03e6a1e3492a88b3315ecac2a899d4f159f43ca7314290d5a Description: 1 instance started running (from 0 to 1). Reported at: Tue, 06 Sep 2022 16:52:28 CEST ... These two snapshots belong to the same blue-green deployment. You see artifact creator:b7a5908 starting in snapshot #176, and artifact creator:31dee35 exiting in snapshot #177.\nDig into the artifact # You are interested in #176, showing the newly running artifact, creator:b7a5908, with the fingerprint starting 860ad17.\nLet's learn more about this artifact:\nkosli artifact get creator@860ad17 Name: cyberdojo/creator:b7a5908 Fingerprint: 860ad172ace5aee03e6a1e3492a88b3315ecac2a899d4f159f43ca7314290d5a Created on: Tue, 06 Sep 2022 16:48:07 CEST • 21 hours ago Git commit: b7a590836cf140e17da3f01eadd5eca17d9efc65 Commit URL: https://github.com/cyber-dojo/creator/commit/b7a590836cf140e17da3f01eadd5eca17d9efc65 Build URL: https://github.com/cyber-dojo/creator/actions/runs/3001102984 State: COMPLIANT History: Artifact created Tue, 06 Sep 2022 16:48:07 CEST Deployment #88 to aws-beta environment Tue, 06 Sep 2022 16:49:59 CEST Deployment #89 to aws-prod environment Tue, 06 Sep 2022 16:51:12 CEST Started running in aws-beta#196 environment Tue, 06 Sep 2022 16:51:42 CEST Started running in aws-prod#176 environment Tue, 06 Sep 2022 16:52:28 CEST Follow to the commit # You can follow the commit URL .\nThe incident was caused by a simple typo in the app.rb file!\nPerhaps someone accidentally inserted the \u0026quot;s\u0026quot; while trying to save the file? Either way, this is clearly the problem because the function is called respond_to without the s.\nYou were able to trace the problem back to a specific commit without any access to cyber-dojo's aws-prod environment.\nSee also the other tutorials: # Following a git commit to runtime environments Simulating a DevOps system "},{"id":2,"href":"/use_cases/simulating_a_devops_system/","title":"Simulating a DevOps system","section":"Use cases","content":" Preparing the tutorial # To follow the tutorial you need to:\nInstall the kosli CLI . Get your Kosli API token . Set the KOSLI_API_TOKEN environment variable: export KOSLI_API_TOKEN=\u0026lt;paste-your-kosli-API-token-here\u0026gt; Set the KOSLI_OWNER environment variable to your Kosli organization name: export KOSLI_OWNER=\u0026lt;paste-your-kosli-organization-name\u0026gt; For this tutorial you will simulate a system with source code, a build system, and a running server. There is a script to help you run these simulations, so you won't need to type too many commands.\nYou can download the script from here: https://raw.githubusercontent.com/kosli-dev/cli/main/simulation_commands.bash or from the command line with:\ncd /tmp curl -O https://raw.githubusercontent.com/kosli-dev/cli/main/simulation_commands.bash Source the simulation commands so you can use them later on in the examples:\nsource simulation_commands.bash To see what a command (eg create_git_repo_in_tmp) in the simulation is actually doing run:\ntype create_git_repo_in_tmp create_git_repo_in_tmp is a function create_git_repo_in_tmp () { pushd /tmp; mkdir try-kosli; ... Create the git repo and simulate a build and deployment to the server:\ncreate_git_repo_in_tmp simulate_build simulate_deployment While you're going through the getting started guide feel free to explore the functionality by updating the source code, building and deploying new versions.\nUsing a web browser # As you go through the guide you can also check your progress from your browser .\nIn the upper left corner there is a house icon. Next to it you can select which organization you want to view. Your personal organization has the same name as your github login name, and is the organization you will be using in this guide.\nEnvironment # A Kosli environment stores information about what software is running in your actual runtime environment (server, Kubernetes cluster, AWS, etc.)\nA typical setup reports what is running on the staging server and on the production server. To report what is running you run the Kosli CLI command periodically. The Kosli CLI will detect the version of the software you are currently running and report it to the Kosli environment.\nCreating a Kosli environment # To follow the examples make sure you have followed the instructions in Local setup\nCreate a Kosli environment:\nkosli environment declare \\ --name production \\ --environment-type server \\ --description \u0026#34;Production server (for kosli getting started)\u0026#34; You can immediately verify that the Kosli environment was created:\nkosli environment ls NAME TYPE LAST REPORT LAST MODIFIED production server 2022-08-16T07:53:43+02:00 kosli environment inspect production Name: production Type: server Description: Production server (for kosli getting started) State: N/A Last Reported At: N/A In the web interface you can select the Environments menu on the left. It will show you that you have a production environment and that no reports have been received.\nReporting the software running in your environment # Simulate a report from your server by reporting two dummy files for the web and database applications:\nkosli environment report server production \\ --paths /tmp/try-kosli/server/web_*bin \\ --paths /tmp/try-kosli/server/db_*.bin You can see that the server has started, and how long it has been running for:\nkosli environment log production SNAPSHOT FROM TO DURATION 1 16 Aug 22 07:54 CEST now 11 seconds Get a more detailed view of what is currently running on the server:\nkosli environment get production COMMIT ARTIFACT PIPELINE RUNNING_SINCE REPLICAS N/A Name: /tmp/try-kosli/server/web_1.bin N/A 2 minutes ago 1 Fingerprint: a7a87c332500a40f9a01b811ec75f51b40188a3dabd205feb0fa7c3eafb25fbe N/A Name: /tmp/try-kosli/server/db_1.bin N/A 2 minutes ago 1 Fingerprint: 0efde582a933f011c3ae9007467a7f973a874517093e9a5a05ea55476f7c91af If you refresh the environment page in the web browser you can see that there is a timestamp for when the environment changed. Pressing the production link gives you a detailed view of what is running now.\nTypically, a server periodically sends a report of what is currently running to Kosli. But Kosli will only create a new snapshot if the report shows changes compared to the previous snapshot, so resending the same environment report several times will not lead to duplication of snapshots.\nSend an environment report:\nkosli environment report server production \\ --paths /tmp/try-kosli/server/web_*bin \\ --paths /tmp/try-kosli/server/db_*.bin kosli environment log production SNAPSHOT FROM TO DURATION 1 16 Aug 22 07:54 CEST now 11 seconds Simulate an update of the web application to a new version, build and deploy it:\nupdate_web_src simulate_build simulate_deployment Report what is now running on the server:\nkosli environment report server production \\ --paths /tmp/try-kosli/server/web_*bin \\ --paths /tmp/try-kosli/server/db_*.bin You can see Kosli has created a new snapshot:\nkosli environment log production SNAPSHOT FROM TO DURATION 2 16 Aug 22 07:58 CEST now 9 seconds 1 16 Aug 22 07:54 CEST 16 Aug 22 07:58 CEST 4 minutes You can see that you are currently running web version 2 in production:\nkosli environment get production COMMIT ARTIFACT PIPELINE RUNNING_SINCE REPLICAS N/A Name: /tmp/try-kosli/server/web_2.bin N/A 39 seconds ago 1 Fingerprint: cbc92ce1291830382ec23b95efc213d6e1725b5157bcb2927d48296b61c86746 N/A Name: /tmp/try-kosli/server/db_1.bin N/A 6 minutes ago 1 Fingerprint: 0efde582a933f011c3ae9007467a7f973a874517093e9a5a05ea55476f7c91af Here, using the bare environment name (eg production) always refers to the latest snapshot in that environment. You can also use the Kosli CLI to check what was running in previous snapshots. Find what was running in snapshot #1 in production:\nkosli environment get production#1 COMMIT ARTIFACT PIPELINE RUNNING_SINCE REPLICAS N/A Name: /tmp/try-kosli/server/web_1.bin N/A 7 minutes ago 1 Fingerprint: a7a87c332500a40f9a01b811ec75f51b40188a3dabd205feb0fa7c3eafb25fbe N/A Name: /tmp/try-kosli/server/db_1.bin N/A 7 minutes ago 1 Fingerprint: 0efde582a933f011c3ae9007467a7f973a874517093e9a5a05ea55476f7c91af In the web interface you should now also be able to see 2 snapshots. The Log tab should show what changed in snapshot 1 and snapshot 2.\nPipelines # A Kosli pipeline stores information about what happens in your build system. The output of the build system is called an artifact in Kosli. This can be an application, a docker image, documentation, a filesystem, etc.\nYou use the Kosli CLI to report information about the creation of an artifact to the Kosli pipeline.\nA Kosli pipeline can also be used to store any information related to the artifact you have built, like test results, manual approvals, pull-requests, and so on.\nCreating a Kosli pipeline # To follow the examples make sure you have followed the instructions in Local setup.\nCreate a Kosli pipeline where you can report what software your CI system is building. You are building two applications, so make two Kosli pipelines web-server and database-server.\nCreate your new pipelines:\nkosli pipeline declare \\ --pipeline web-server \\ --description \u0026#34;pipeline to build web-server\u0026#34; \\ --visibility private \\ --template artifact kosli pipeline declare \\ --pipeline database-server \\ --description \u0026#34;pipeline to build database-server\u0026#34; \\ --visibility private \\ --template artifact You can immediately verify that the Kosli pipelines were created:\nkosli pipeline ls NAME DESCRIPTION VISIBILITY database-server pipeline to build database-server private web-server pipeline to build web-server private In the web interface you can select the Pipelines menu on the left. It will show you that you have a web-server and database-server pipeline. If you select either of the pipelines they will show that no artifacts have been reported for the pipelines.\nBuilding artifacts and reporting them to Kosli # Simulate building your software:\nsimulate_build Report that you have built the web and database applications. You are using a dummy --build-url, but in reality it would be a CI build URL:\nkosli pipeline artifact report creation /tmp/try-kosli/build/web_$(cat /tmp/try-kosli/code/web.src).bin \\ --pipeline web-server \\ --artifact-type file \\ --build-url file://dummy \\ --commit-url file:///tmp/try-kosli/code \\ --repo-root /tmp/try-kosli/code \\ --git-commit $(cd /tmp/try-kosli/code; git rev-parse HEAD) kosli pipeline artifact report creation /tmp/try-kosli/build/db_$(cat /tmp/try-kosli/code/db.src).bin \\ --pipeline database-server \\ --artifact-type file \\ --build-url file://dummy \\ --commit-url file:///tmp/try-kosli/code \\ --repo-root /tmp/try-kosli/code \\ --git-commit $(cd /tmp/try-kosli/code; git rev-parse HEAD) You can see you have built one artifact in your web-server pipeline:\nkosli artifact ls web-server COMMIT ARTIFACT STATE CREATED_AT 5187374 Name: web_2.bin COMPLIANT 16 Aug 22 08:00 CEST Fingerprint: cbc92ce1291830382ec23b95efc213d6e1725b5157bcb2927d48296b61c86746 And one for the database-server pipeline:\nkosli artifact ls database-server COMMIT ARTIFACT STATE CREATED_AT 5187374 Name: db_1.bin COMPLIANT 16 Aug 22 08:01 CEST Fingerprint: 0efde582a933f011c3ae9007467a7f973a874517093e9a5a05ea55476f7c91af You can also get detailed information about each artifact that has been reported:\nkosli artifact get database-server@0efde582a933f011c3ae9007467a7f973a874517093e9a5a05ea55476f7c91af Name: db_1.bin State: COMPLIANT Git commit: 518737485e5150ee6255a1c74749997d380c1708 Build URL: file://dummy Commit URL: file:///tmp/try-kosli/code Created at: 16 Aug 22 08:01 CEST • 2 hours ago Approvals: None Deployments: None Evidence: In the web interface you can select the database-server pipeline and then the db_1.bin artifact to get more details.\nDeployments # A Kosli deployment command is used to indicate an artifact is being deployed to a given runtime environment.\nDeploying software to the server and reporting the deployment to Kosli # Report to Kosli that the web software is expected to be deployed:\nkosli expect deployment /tmp/try-kosli/build/web_$(cat /tmp/try-kosli/code/web.src).bin \\ --pipeline web-server \\ --artifact-type file \\ --build-url file://dummy \\ --environment production \\ --description \u0026#34;Web server version $(cat /tmp/try-kosli/code/web.src)\u0026#34; Simulate deploying your software to the server:\nsimulate_deployment You can verify the deployment with:\nkosli deployment ls web-server ID ARTIFACT ENVIRONMENT REPORTED_AT 1 Name: web_2.bin production 16 Aug 22 08:02 CEST Fingerprint: cbc92ce1291830382ec23b95efc213d6e1725b5157bcb2927d48296b61c86746 Get detailed information about a deployment:\nkosli deployment get web-server#1 ID: 1 Artifact fingerprint: cbc92ce1291830382ec23b95efc213d6e1725b5157bcb2927d48296b61c86746 Artifact name: web_2.bin Build URL: file://dummy Created at: 16 Aug 22 08:02 CEST • 32 seconds ago Environment: production Runtime state: The artifact running since 16 Aug 22 07:58 CEST If you select the web_2.bin artifact in the web interface it will show that it was part of Deployment #1 to production environment.\nSee also the other tutorials: # Following a git commit to runtime environments Tracing a production incident back to git commits "},{"id":3,"href":"/introducing_kosli/","title":"Introducing Kosli","section":"Welcome to Kosli Docs","content":" What is Kosli # Record, connect and search every change from commit to production.\nWhy? # Broken environments. Services down. Manual changes leaking into your environment. A lot can go wrong, but Kosli records a connected history of your devops, so you don't have to spend hours wondering about the source of change.\nUse Kosli Environments to report and track what's running in your runtime environments, and Kosli Pipelines to report your artifacts and events around them. Both Environments and Pipelines in Kosli belong to an Organization .\nLearn more about Kosli by checking the following sections:\n"},{"id":4,"href":"/getting_started/getting_started_with_kosli/","title":"Learning Kosli","section":"Getting started","content":" Learning Kosli # In this tutorial, you'll learn how Kosli allows you to follow a source code change to runtime environments. You'll set up a dockerenvironment, use Kosli to record build and deployment events, and track what artifacts are running in your runtime environments.\nThis tutorial uses the docker Kosli environment type, but the same steps can be applied to other supported environment types.\nAs you go through the guide you can also check your progress from your browser .\nIn the upper left corner there is a house icon. Next to it you can select which organization you want to view. Your personal organization has the same name as your github login name, and is the organization (in the context of Kosli CLI called \u0026quot;owner\u0026quot;) you will be using in this guide.\nPrerequisites # To follow the tutorial, you will need to:\nInstall both Docker and docker-compose.\nInstall the Kosli CLI and set the KOSLI_API_TOKEN and KOSLI_OWNER environment variables .\nYou can check your Kosli set up by running:\nkosli pipeline ls which should return a list of pipelines or the message \u0026quot;No pipelines were found\u0026quot;.\nClone our quickstart-docker repository:\ngit clone https://github.com/kosli-dev/quickstart-docker-example.git cd quickstart-docker-example Kosli setup # Creating a Kosli pipeline # A Kosli pipeline stores information about what happens in your build system. The output of the build system is called an artifact in Kosli. An artifact could be, for example, an application binary, a docker image, a directory, or a file.\nStart by creating a new Kosli pipeline:\nkosli pipeline declare \\ --pipeline quickstart-nginx \\ --description \u0026#34;Pipeline for quickstart nginx image\u0026#34; You can confirm that the Kosli pipeline was created by running:\nkosli pipeline ls which should produce the following output:\nNAME DESCRIPTION VISIBILITY quickstart-nginx Pipeline for quickstart nginx image private In the web interface you can select the Pipelines option on the left. It will show you that you have a quickstart-nginx pipeline. If you select the pipeline it will show that no artifacts have been reported yet. Creating a Kosli environment # A Kosli environment stores snapshots containing information about the software artifacts that you are running in your runtime environments.\nCreate a Kosli environment:\nkosli environment declare \\ --name quickstart \\ --environment-type docker \\ --description \u0026#34;quickstart environment for tutorial\u0026#34; You can verify that the Kosli environment was created:\nkosli environment ls NAME TYPE LAST REPORT LAST MODIFIED quickstart docker 2022-11-01T15:30:56+01:00 If you refresh the Environments web page in your Kosli account, it will show you that you have a quickstart environment and that no reports have been received. Artifacts # Reporting artifacts to Kosli # Typically, you would build an artifact in your CI system. The quickstart-docker repository contains a docker-compose.yml file which uses an nginx docker image which you will be using as your artifact in this tutorial instead.\nPull the docker image - Kosli CLI needs the artifact to be locally present to generate a \u0026quot;fingerprint\u0026quot; to identify it:\ndocker-compose pull You can check that this has worked by typing:\ndocker images nginx The output should look like this:\nREPOSITORY TAG IMAGE ID CREATED SIZE nginx 1.21 8f05d7383593 5 months ago 134MB Now you can report the artifact to Kosli. This tutorial uses a dummy value for the --build-url flag, in a real installation this would be a link to a build service (e.g. Github Actions).\nkosli pipeline artifact report creation nginx:1.21 \\ --pipeline quickstart-nginx \\ --artifact-type docker \\ --build-url https://example.com \\ --commit-url https://github.com/kosli-dev/quickstart-docker-example/commit/9f14efa0c91807da9a8b1d1d6332c5b3aa24a310 \\ --git-commit 9f14efa0c91807da9a8b1d1d6332c5b3aa24a310 You can verify that you have reported the artifact in your quickstart-nginx pipeline:\nkosli artifact ls quickstart-nginx COMMIT ARTIFACT STATE CREATED_AT 9f14efa Name: nginx:1.21 COMPLIANT Tue, 01 Nov 2022 15:46:59 CET Fingerprint: 2bcabc23b45489fb0885d69a06ba1d648aeda973fae7bb981bafbb884165e514 Deploying the artifact # Before you run the nginx docker image (the artifact) on your docker host, you need to report to Kosli your intention of deploying that image. This allows Kosli to match what you expect to run in your environment with what is actually running, and flag any mismatches.\nkosli expect deployment nginx:1.21 \\ --pipeline quickstart-nginx \\ --artifact-type docker \\ --build-url https://example.com \\ --environment quickstart \\ --description \u0026#34;quickstart-nginx artifact deployed to quickstart env\u0026#34; You can verify the deployment with:\nkosli deployment ls quickstart-nginx ID ARTIFACT ENVIRONMENT REPORTED_AT 1 Name: nginx:1.21 quickstart Tue, 01 Nov 2022 15:48:47 CET Fingerprint: 2bcabc23b45489fb0885d69a06ba1d648aeda973fae7bb981bafbb884165e514 Now run the artifact:\ndocker-compose up -d You can confirm the container is running:\ndocker ps The output should include an entry similar to this:\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 6330e545b532 nginx:1.21 \u0026#34;/docker-entrypoint.…\u0026#34; 35 seconds ago Up 34 seconds 0.0.0.0:8080-\u0026gt;80/tcp quickstart-nginx Reporting what is running in your environment # Report all the docker containers running on your machine to Kosli:\nkosli environment report docker quickstart You can confirm that this has created an environment snapshot:\nkosli environment log quickstart SNAPSHOT FROM TO DURATION 1 Tue, 01 Nov 2022 15:55:49 CET now 11 seconds You can get a detailed view of all the docker containers included in the snapshot report:\nkosli environment get quickstart COMMIT ARTIFACT PIPELINE RUNNING_SINCE REPLICAS N/A Name: nginx:1.21 N/A 3 minutes ago 1 Fingerprint: 8f05d73835934b8220e1abd2f157ea4e2260b9c26f6f63a8e3975e7affa46724 The kosli environment report docker command reports all the docker containers running in your environment, equivalent to the output from docker ps. This tutorial only shows the nginx container in the examples.\nIf you refresh the Environments web page in your Kosli account, you will see that there is now a timestamp for Last Change At column. Select the quickstart link on left for a detailed view of what is currently running. Searching Kosli # Now that you have reported our artifact and what's running in our runtime environment, you can use the kosli search command to find everything Kosli knows about an artifact or a git commit.\nFor example, you can give Kosli search the git commit SHA which you used when you reported the artifact::\nkosli search 9f14efa0c91807da9a8b1d1d6332c5b3aa24a310 Search result resolved to commit 9f14efa0c91807da9a8b1d1d6332c5b3aa24a310 Name: nginx:1.21 Fingerprint: 2bcabc23b45489fb0885d69a06ba1d648aeda973fae7bb981bafbb884165e514 Has provenance: true Pipeline: quickstart-nginx Git commit: 9f14efa0c91807da9a8b1d1d6332c5b3aa24a310 Commit URL: https://github.com/kosli-dev/quickstart-docker-example/commit/9f14efa0c91807da9a8b1d1d6332c5b3aa24a310 Build URL: https://example.com Compliance state: COMPLIANT History: Artifact created Tue, 01 Nov 2022 15:46:59 CET Deployment #1 to quickstart environment Tue, 01 Nov 2022 15:48:47 CET Started running in quickstart#1 environment Tue, 01 Nov 2022 15:55:49 CET "},{"id":5,"href":"/introducing_kosli/organizations/","title":"Organizations","section":"Introducing Kosli","content":" Organizations # Organization in Kosli owns Kosli pipelines and environments - which means only members of the organization can get access to them. By default, when you sign up to Kosli, a personal organization is created for you and the name of the organization matches your user name. Only you can access your personal organization.\nYou can also create shared organizations, and invite other Kosli users as members, so they can see and report to your Kosli pipelines and environments.\nShared organization # To create a shared organization click on your profile picture (or avatar) in the top right corner of app.kosli.com and select \u0026quot;Add an organization\u0026quot;. You'd be asked to provide the name and the description of your organization. After you click \u0026quot;Create Organization\u0026quot; button the new organization is ready. After the page reloads you'll see the \u0026quot;Settings\u0026quot; page for the new organization.\nYou can switch between organizations using dropdown menu in the top left corner of the page, under Kosli logo.\nShared organization members # To add users to your shared organization make sure you have the right organization selected from the dropdown menu and click \u0026quot;Settings\u0026quot;. Here you can add users: click on \u0026quot;Add member\u0026quot; button, provide a github username of the user you'd like to share organization with, and select desired role:\nmember can create Kosli pipelines and environments, report to and read from them admin can do the same things member can plus they can also add and remove users from the organization "},{"id":6,"href":"/introducing_kosli/environments/","title":"Environments","section":"Introducing Kosli","content":" Environments # Environments in Kosli provide a place to track how your systems change over time.\nEach runtime environment you'd like to track in Kosli should have its own Kosli environment created - e.g. if you use k8s cluster to host qa, staging and production versions of your product you create 3 separate environments for those in Kosli.\nKosli supports different type of runtime environments and the reporting command varies for each:\nKubernetes cluster (k8s) Amazon ECS Amazon S3 Amazon Lambda Physical/virtual server You can create Kosli environment using:\n\u0026quot;Add new environment\u0026quot; button under \u0026quot;Environments\u0026quot; section on app.kosli.com cli with kosli environment declare command Once the Kosli environment is ready you can start reporting the status of your actual runtime environment using one of the kosli environment report ... commands - check client reference for details\nIt makes sense to automate reporting - via cronjob or using your CI. It's up to you to decide how often you want the reports to keep coming. Once the cronjob or CI are set to use kosli environment report ... command, every time a change in your runtime environment happens a new snapshot capturing current state of the environment will be created.\nThe change could be for example:\na new artifact started running an artifact stopped running a number of instances of the services has changed a compliance status of the artifact has changed Snapshots # Snapshot represents a reported status of your runtime environment at a given time. When you click on the name of a specific environment on Environments page at app.kosli.com you are taken to the latest snapshot. You can use the arrow buttons to browse older snapshots.\nOnce snapshot is reported it can't be modified, that is to secure the integrity of data. Every time the environment report indicates changes in the runtime environment or in the artifact status a new snapshot is created.\nCompliant Environment # Environment is compliant when:\nAll the artifacts running in it have provenance and are compliant themselves OR they were allow-listed All the artifacts running in it are reported as deployed to a given environment If you're environment is not compliant check the latest snapshot for more detailed info - each unknown or incompliant artifacts will be marked and the reason for the incompliancy will be provided\nAllow list # Not all the artifacts that run in your environment must be built by you - these may be publicly available artifacts, or artifacts provided by external vendors. In such case you will likely have no information about these artifacts reported to Kosli.\nThese artifact will by default be marked with \u0026quot;No provenance\u0026quot; red label and it will affect the compliancy of the whole environment. If you know how and why these artifact are present in your environment you can add them to Allow-list by clicking a button on the snapshot page, or using kosli environment allowedartifacts add command\n"},{"id":7,"href":"/getting_started/","title":"Getting started","section":"Welcome to Kosli Docs","content":" Getting started # Welcome to Getting started! Here you can learn how to start using Kosli, how to install it and what additional support is provided for different CI systems\n"},{"id":8,"href":"/getting_started/installation/","title":"Install Kosli","section":"Getting started","content":" Installing the Kosli CLI # Kosli CLI can be installed from package managers, by Curling pre-built binaries, or by running inside a Docker container.\nWe recommend using a Docker container for the tutorials. Homebrew If you have Homebrew (available on MacOS, Linux or Windows Subsystem for Linux), you can install the Kosli CLI by running:\nbrew install kosli-dev/tap/kosli APT On Ubuntu or Debian Linux, you can use APT to install the Kosli CLI by running:\nsudo sh -c \u0026#39;echo \u0026#34;deb [trusted=yes] https://apt.fury.io/kosli/ /\u0026#34; \u0026gt; /etc/apt/sources.list.d/fury.list\u0026#39; # On a clean debian container/machine, you need ca-certificates sudo apt install ca-certificates sudo apt update sudo apt install kosli YUM On RedHat Linux, you can use YUM to install the Kosli CLI by running:\ncat \u0026lt;\u0026lt;EOT \u0026gt;\u0026gt; /etc/yum.repos.d/kosli.repo [kosli] name=Kosli public Repo baseurl=https://yum.fury.io/kosli/ enabled=1 gpgcheck=0 EOT If you get mirrorlist errors (likely if you are on a clean centos container):\ncd /etc/yum.repos.d/ sed -i \u0026#39;s/mirrorlist/#mirrorlist/g\u0026#39; /etc/yum.repos.d/CentOS-* sed -i \u0026#39;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g\u0026#39; /etc/yum.repos.d/CentOS-* yum update -y yum install kosli Curl You can download the Kosli CLI from GitHub .\nMake sure to choose the correct tar file for your system.\nFor example, on Mac with AMD:\ncurl -L https://github.com/kosli-dev/cli/releases/download/v0.1.10/kosli_0.1.10_darwin_amd64.tar.gz | tar zx sudo mv kosli /usr/local/bin/kosli Docker You can run the Kosli CLI in this docker container:\ndocker run -it --rm ghcr.io/kosli-dev/cli:v0.1.10 bash Verifying the installation worked # Run this command:\nkosli version The expected output should be similar to this:\nversion.BuildInfo{Version:\u0026#34;v0.1.10\u0026#34;, GitCommit:\u0026#34;9c623f1e6c293235ddc8de1e347bf99a1b356e48\u0026#34;, GitTreeState:\u0026#34;clean\u0026#34;, GoVersion:\u0026#34;go1.17.11\u0026#34;} Getting your Kosli API token # Go to https://app.kosli.com Log in or sign up using your github account Open your Profile page (click on your avatar in the top right corner of the page). Using environment variables # The --api-token and --owner flags are used in every kosli CLI command.\nRather than retyping these every time you run kosli, you can set them as environment variables.\nThe owner is the name of the organization you intend to use - it is either your private organization, which has exactly the same name as your GitHub username, or a shared orgnazation (if you created or have been invited to one).\nBy setting the environment variables:\nexport KOSLI_API_TOKEN=abcdefg export KOSLI_OWNER=cyber-dojo you can use\nkosli pipeline ls instead of\nkosli pipeline ls --api-token abcdefg --owner cyber-dojo You can represent ANY flag as an environment variable. To do that you need to capitalize the words in the flag, replacing dashes with underscores, and add the KOSLI_ prefix. For example, --api-token becomes KOSLI_API_TOKEN.\n"},{"id":9,"href":"/introducing_kosli/pipelines/","title":"Pipelines","section":"Introducing Kosli","content":" Pipelines # Pipelines in Kosli provide a place to report and track artifact status and related events from your CI pipelines.\nYou can create Kosli pipeline using our cli with kosli pipeline declare command.\nIt's normal practice to add your pipeline declaring command to your build pipeline. It's perfectly fine to run it every time you run a build. You can also change your template over time, for example by adding new control. It won't affect the compliancy of artifacts reported before the change of the template.\nOnce your Kosli pipeline is in place you can start reporting artifacts and evidences of all the events you want to report (matching declared template) from your CI pipelines. Kosli cli provides a variety of commands to make it possible:\nA number of required flags may be defaulted to a set of environment variables, depending on the CI system you use. Check How to use Kosli in CI Systems for more details. All of the flags can be represented by environment variables Artifacts # Whatever you produce during your build process can be an artifact - a binary file, an archive, a folder, a docker image... sometimes you don't produce anything new while \u0026quot;building\u0026quot; and the complete code can be your artifact.\nBest practice is to create Kosli pipeline for each type of artifact - e.g. if your CI pipeline produces 3 separate artifacts (that could be 3 different binaries for three different platforms) you'd create 3 different Kosli pipelines to report artifacts and evidences.\nEvidences # When declaring a pipeline you need to provide a template - a list of required controls (evidences) you required for your artifact in order for the artifact to become compliant. That could be for example:\nexisting pull request code coverage report integration test unit test and more... Whenever an event related to an evidence happens - e.g. test are finished - use Kosli CLI to report the evidence to Kosli.\nDeployments # No matter if you deploy your artifacts from your build pipeline, or do you have a separate one for that purpose, you should report to Kosli that you expect an artifact to start running in an environment. You do that using kosli expect deployment command. Environment that you're deploying to has to be specified, so if you deploy to more than one environment you need to report each deployment separately\n"},{"id":10,"href":"/how_to/record/","title":"Record","section":"How to","content":" Record your environments in Kosli # Recording the status of runtime environments it's one of the fundamental features of Kosli. Our CLI detects artifacts running in given environment and reports the information to Kosli.\nIf the list of running artifacts is different than what was reported previously a new snapshot is created. Snapshots are immutable and can't be tampered with.\nThere is range of kosli environment report [...] commands, allowing you to report a variety of environments. To record a current status of your environment you simply run one of them. You can do it manually but typically recording commands would run automatically, e.g. via a cron job or scheduled CI job.\nRemember to create an environment in Kosli before you start reporting, and when reporting make sure the type of the Kosli environment matches the type of the runtime environment you're reporting.\nRecord docker environment # Run kosli environment report docker to report running containers data from docker host to Kosli.\nThe command has to be run on the actual docker host, to be able to detect running containers.\nExample # kosli environment report docker yourEnvironmentName \\ --api-token yourAPIToken \\ --owner yourOrgName Details here Record ecs environment # Run kosli environment report ecs to report images data from AWS ECS cluster to Kosli.\nThe command requires following environment variables to be set, to be able to connect to AWS:\nAWS_REGION AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY Example # export AWS_REGION=yourAWSRegion export AWS_ACCESS_KEY_ID=yourAWSAccessKeyID export AWS_SECRET_ACCESS_KEY=yourAWSSecretAccessKey kosli environment report ecs yourEnvironmentName \\ --api-token yourAPIToken \\ --owner yourOrgName Details here Record k8s environment # Run kosli environment report k8s to report images data from specific namespace(s) or entire cluster to Kosli. You can also select multiple namespaces to report from (using --namespace and comma separated list when running a command) or use --exclude-namespace to report from a whole cluster except the namespaces from the comma spearated list given to the flag\nThe command can be run anywhere and requires kubeconfig file to be able to connect to the cluster (you can skip providing the location of kubeconfig if it resides in default $HOME/.kube/config folder).\nYou can also choose to run it from within the cluster - use our helm chart to install the reporter as a cron job. kubeconfig won't be need in that case.\nExample # # report what is running in an entire cluster using kubeconfig at $HOME/.kube/config: kosli environment report k8s yourEnvironmentName \\ --api-token yourAPIToken \\ --owner yourOrgName # report what is running in a given namespace using kubeconfig at a custom path: kosli environment report k8s yourEnvironmentName \\ --kubeconfig /path/to/kubeconfig \\ --namespace your-namespace \\ --api-token yourAPIToken \\ --owner yourOrgName Details here Record lambda environment # Run kosli environment report lambda to report artifact from AWS Lambda to Kosli.\nYou can use either flags or environment variables to provide AWS secrets.\nExample # # report what is running in the latest version AWS Lambda function (AWS auth provided in env variables): export AWS_REGION=yourAWSRegion export AWS_ACCESS_KEY_ID=yourAWSAccessKeyID export AWS_SECRET_ACCESS_KEY=yourAWSSecretAccessKey kosli environment report lambda myEnvironment \\ --function-name yourFunctionName \\ --api-token yourAPIToken \\ --owner yourOrgName # report what is running in a specific version of an AWS Lambda function (AWS auth provided in flags): kosli environment report lambda myEnvironment \\ --function-name yourFunctionName \\ --function-version yourFunctionVersion \\ --aws-key-id yourAWSAccessKeyID \\ --aws-secret-key yourAWSSecretAccessKey \\ --aws-region yourAWSRegion \\ --api-token yourAPIToken \\ --owner yourOrgName Details here Record s3 environment # Run kosli environment report s3 to report artifact from AWS S3 bucket to Kosli.\nYou can use either flags or environment variables to provide AWS secrets.\nExample # # report what is running in an AWS S3 bucket (AWS auth provided in env variables): export AWS_REGION=yourAWSRegion export AWS_ACCESS_KEY_ID=yourAWSAccessKeyID export AWS_SECRET_ACCESS_KEY=yourAWSSecretAccessKey kosli environment report s3 yourEnvironmentName \\ --bucket yourBucketName \\ --api-token yourAPIToken \\ --owner yourOrgName # report what is running in an AWS S3 bucket (AWS auth provided in flags): kosli environment report s3 yourEnvironmentName \\ --bucket yourBucketName \\ --aws-key-id yourAWSAccessKeyID \\ --aws-secret-key yourAWSSecretAccessKey \\ --aws-region yourAWSRegion \\ --api-token yourAPIToken \\ --owner yourOrgName Details here Record server environment # Run kosli environment report server to report directory or file artifacts from the given list of paths to Kosli.\nThe command has to be run on the actual server (physical or vm), to be able to detect artifacts.\nUse --paths flag to provide a comma separated list of directories and files you want to be reported. Keep in mind that each directory will be treated as a single artifact and in order to make sure they are correctly identified in Kosli they should also be reported to Kosli pipeline as a single artifact.\nFor example, if you provide a following list: --paths /home/server/web, /home/monitor.exe, /home/server/calculator kosli will calculate fingerprints and report as running 3 artifacts to Kosli:\ndirectory web directory calculator file monitor.exe And it will try to find matching artifacts reported to any pipeline belonging to the same organization as the environment.\nExample # kosli environment report server yourEnvironmentName \\ --paths a/b/c,e/f/g \\ --api-token yourAPIToken \\ --owner yourOrgName Details here "},{"id":11,"href":"/use_cases/","title":"Use cases","section":"Welcome to Kosli Docs","content":" Why Kosli # In these tutorials we present use cases that should clarify why and how Kosli can help you with your software development process.\nKosli stores information about the software you build in your CI pipelines and run in your runtime environment. The Kosli CLI is used for reporting and querying the information.\nTypically, all the reporting will be done as part of your CI and runtime systems. To get started you won't need any of this. Local code, git and a terminal are enough.\nThe kosli CLI is tool agnostic and can run on any major platform (Linux, Mac, Windows). Kosli does not require you to change your existing process.\nLet’s get started!\n"},{"id":12,"href":"/getting_started/use_kosli_in_ci_systems/","title":"Use Kosli in CI Systems","section":"Getting started","content":" Use Kosli in CI Systems # This section provides how-to guides showing you how to use Kosli to report changes from different CI systems.\nDefaulted Kosli command flags from CI variables # The following flags are defaulted as follows in the CI list below:\nBitbucket Cloud Flag Default --build-url https://bitbucket.org/${BITBUCKET_WORKSPACE}/${BITBUCKET_REPO_SLUG}/addon/pipelines/home#!/results/${BITBUCKET_BUILD_NUMBER} --commit-url https://bitbucket.org/${BITBUCKET_WORKSPACE}/${BITBUCKET_REPO_SLUG}/commits/${BITBUCKET_COMMIT} --commit ${BITBUCKET_COMMIT} --git-commit ${BITBUCKET_COMMIT} --repository ${BITBUCKET_REPO_SLUG} --bitbucket-workspace ${BITBUCKET_WORKSPACE} Github Flag Default --build-url ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} --commit-url ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA} --commit ${GITHUB_SHA} --git-commit ${GITHUB_SHA} --repository ${GITHUB_REPOSITORY} --github-org ${GITHUB_REPOSITORY_OWNER} Teamcity Flag Default --git-commit ${BUILD_VCS_NUMBER} Github Actions # To use Kosli in Github Actions workflows, you can use the kosli CLI setup action to install the CLI on your Github Actions Runner. Then, you can use all the CLI commands in your workflows.\nHere is an example Github Actions workflow snippet using the Kosli declare pipeline command:\njobs: example: runs-on: ubuntu-latest env: KOSLI_API_TOKEN: ${{ secrets.MY_KOSLI_API_TOKEN }} KOSLI_OWNER: my-org steps: - name: setup kosli uses: kosli-dev/setup-cli-action@v1 - name: declare pipeline run: kosli pipeline declare --pipeline my-pipeline -t pull-request,artifact,test Note that all CLI command flags can be set as environment variables by adding the the KOSLI_ prefix and capitalizing them. In the example above, both --api-token and --owner flags were set from environment variables. Defaulted CLI flags in Github Actions # The following commands flags are defaulted when the Kosli CLI is run inside a Github Actions workflow:\nFlag Default --build-url ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} --commit-url ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA} --commit ${GITHUB_SHA} --git-commit ${GITHUB_SHA} --repository ${GITHUB_REPOSITORY} --github-org ${GITHUB_REPOSITORY_OWNER} "},{"id":13,"href":"/introducing_kosli/fingerprint/","title":"Fingerprint","section":"Introducing Kosli","content":" Fingerprint # Every time artifact is reported to Kosli a SHA256 digest of it is calculated. It doesn't matter if the artifact is a single file, a directory or a docker image - we can always calculate SHA256.\nFingerprints are used to connect the information recorded in Kosli - about environments, deployments and approval - to matching artifact.\nYou can also use Kosli CLI to calculated the fingerprint of any artifact locally. See kosli fingerprint for more details.\n"},{"id":14,"href":"/introducing_kosli/cli/","title":"CLI","section":"Introducing Kosli","content":" CLI # In order to record environments , artifacts and events to Kosli you need to use Kosli CLI . The same tool can be used to search Kosli and find out all you need to know about your runtime environments and artifacts.\nOur CLI in an open source tool written in go and it's available for a number of different platforms.\nTo learn more about to install Kosli CLI click here Usage # Reference section contains all the information you may need to run Kosli CLI.\nMost of the commands require a number of flags. Some of them are required, some are optional - you don't need to use them if you don't want to and some are conditional - you need to use it if a certain conditions occurs, e.g.:\nif you use --sha256 flag it means you provide artifact's fingerprint on your own and we don't need to calculate it, so the flag --artifact-type is not needed if you want to read docker digest from registry without pulling the image you need to provide registry information: --registry-password, --registry-username and --registry-provider Each conditional flag is explained in its description.\nSome of the flags are defaulted, and the default value will be always printed in the description. You can skip the flag if the default value is what you chose to use.\nDepending on the CI tool you are using some of the flags (including required ones) may also be defaulted, depending on the environment variables provided by the tool. If the flag is defaulted in your CI you don't have to provide it in the command. Here you can find more details about flags defaulted depending on CI.\nEnvironment variables # Each flag can be provided directly or represented with environment variable. In order to represent a flag with environment variable you need to create a variable with a KOSLI_ prefix, followed by the flag name capitalized and internal dashes replaced by underscores, e.g.:\n--api-token can be represented by KOSLI_API_TOKEN --owner can be represented by KOSLI_OWNER etc.\n"},{"id":15,"href":"/how_to/connect/","title":"Connect","section":"How to","content":" Connect your pipeline events # Kosli allows you to connect the development world (commits, builds, tests, approvals, deployments) with what’s happening in operations. There is a variety of commands that let you report all the necessary information to Kosli and - relying on automatically calculated fingerprints of your artifacts - match it with the environments.\nCreate a pipeline # In order to be able to report artifacts to Kosli you need to create a Kosli pipeline first. When you create a pipeline you also define expected controls - a list of evidences you need to be reported in order for the artifact to become compliant. Use --template flag to provide the list of requirements.\nLater, when reporting evidences for specific control you will use the same name you used in template to identify which evidence you are reporting.\nIt is a normal practice to include kosli pipeline declare command in the same pipeline you use to build the artifact you want to report to that Kosli pipeline. None of the previously reported artifacts will be overwritten or lost. And if you change the template, by adding or removing required evidence, it won't affect the compliancy status of existing artifacts.\nExample # # create/update a Kosli pipeline kosli pipeline declare \\ --pipeline yourPipelineName \\ --description yourPipelineDescription \\ --visibility private OR public \\ --template artifact,unit-test,pull-request,code-coverage \\ --api-token yourAPIToken \\ --owner yourOrgName Report artifacts # To report an artifact you need either the artifact available while running reporting command, and use --artifact-type flag to make it possible for the tool to calculate the fingerprint OR you need a fingerprint of the artifact calculated separately using kosli fingerprint command. You also need to provide the name of the Kosli pipeline you want to report to.\nYou also should provide long enough git history so Kosli can generate a list of commits that are part of the new artifact (that means at least until the commit of the previously built artifact). If you use shallow clone in your CI Kosli won't be able to generate the list but the command will NOT fail.\nFingerprint (sha256 checksum of the file/directory/docker image) of the artifact will be stored in Kosli. The fingerprint can't be changed, it becomes a unique identifier of the artifact in Kosli, used - among other things - to connect it with the recorded environment. Fingerprints of all the running artifacts, recorded with Kosli CLI are also stored and compared with fingerprints of the artifacts you have built and reported to Kosli so you always know if you're running things you have no provenance of.\nSome of the required flags will be automatically resolved if you're using one of the supported CI systems .\nExample # # Report to a Kosli pipeline that a file type artifact has been created kosli pipeline artifact report creation FILE.tgz \\ --api-token yourApiToken \\ --artifact-type file \\ --build-url https://exampleci.com \\ --commit-url https://github.com/YourOrg/YourProject/commit/yourCommitShaThatThisArtifactWasBuiltFrom \\ --git-commit yourCommitShaThatThisArtifactWasBuiltFrom \\ --owner yourOrgName \\ --pipeline yourPipelineName # Report to a Kosli pipeline that an artifact with a provided fingerprint (sha256) has been created kosli pipeline artifact report creation \\ --api-token yourApiToken \\ --build-url https://exampleci.com \\ --commit-url https://github.com/YourOrg/YourProject/commit/yourCommitShaThatThisArtifactWasBuiltFrom \\ --git-commit yourCommitShaThatThisArtifactWasBuiltFrom \\ --owner yourOrgName \\ --pipeline yourPipelineName \\ --sha256 yourSha256 See kosli pipeline artifact report creation for more details.\nReport evidences # Whenever an event related to one of your evidences happens you should report it to Kosli.\nCurrently we support following types of evidences:\nPull request # If you use GitHub or Bitbucket you can use Kosli to verify if the merge commit you used to build your artifact comes from a pull request. Remember to add the pull request evidence to your pipeline template and use the same label for --evidence-type you provided in a template\nIf there is no pull request for given commit the evidence will be reported as incompliant and the pipeline will continue. You can choose to fail the pipeline altogether in case pull request is missing - use --assert flag to do that.\nThere are two different commands for that, depending on your CI.\nFor GitHub: kosli pipeline artifact report evidence github-pullrequest along regular flags, you need to provide:\n--github-org --github-token your\tGithub personal access token. For Bitbucket: kosli pipeline artifact report evidence bitbucket-pullrequest along regular flags, you need to provide:\n--bitbucket-password - you need to use an api token which is the \u0026quot;App password\u0026quot; you create under \u0026quot;Personal Settings\u0026quot;, keep in mind that api tokens you create under \u0026quot;Manage account\u0026quot; won't work for basic auth --bitbucket-username - you cannot user your email address you use to log in, you have an actual username under \u0026quot;Personal Settings\u0026quot;) --bitbucket-workspace JUnit test # If you use JUnit to run your test you can use kosli pipeline artifact report evidence test command to analyze the results and provide it to Kosli. Remember to add the junit test evidence to your pipeline template and use the same label for --evidence-type you provided in a template\nExample # # report a JUnit test evidence about a file artifact: kosli pipeline artifact report evidence test FILE.tgz \\ --artifact-type file \\ --evidence-type yourEvidenceType \\ --pipeline yourPipelineName \\ --build-url https://exampleci.com \\ --api-token yourAPIToken \\ --owner yourOrgName\t\\ --results-dir yourFolderWithJUnitResults # report a JUnit test evidence about an artifact using an available Sha256 digest: kosli pipeline artifact report evidence test \\ --sha256 yourSha256 \\ --evidence-type yourEvidenceType \\ --pipeline yourPipelineName \\ --build-url https://exampleci.com \\ --api-token yourAPIToken \\ --owner yourOrgName\t\\ --results-dir yourFolderWithJUnitResults junit test Generic # Report approvals # Whenever a given artifact is ready to be deployed you may need an additional manual approval from authorized person. This is something that can't alway be automated, but you can use Kosli to request such an approval, and later record it, so the information about decisions made outside of your CI system won't be lost. The list of commits between current and previous approval will be generated, which allows you to track a set of changes that are being approved.\nSee kosli pipeline approval report and kosli pipeline approval request for more details.\nQuick note about a commit list # When reporting or requesting an approval one has to keep in mind that oldest-commit has to be an ancestor of newest-commit.\nIt's easy to verify locally in the repository using:\ngit merge-base --is-ancestor \u0026lt;oldest-commit\u0026gt; \u0026lt;newest-commit\u0026gt; echo $? echo $? checks the exit code of previous command so it's important you run it directly after git merge-base \u0026lt;...\u0026gt; command.\nExit code 0 means oldest-commit is an ancestor of newest-commit and your kosli approval command will work. If the exit code is different than 0 then we won't be able to generate a list of commits needed for an approval and the command will fail.\nTo be able to trace back the history of your commits we need a complete repository history to be available - in your CI pipelines it'll likely mean you have to explicitly check out the whole history (many CI tools checkout just a latest version by default).\nIn GitHub Actions you'd need to modify the checkout step by adding fetch-depth option:\nsteps: - uses: actions/checkout@v2 with: fetch-depth: 0 Deployments # The last important piece of information, when it comes to artifacts are deployments. Whenever you (likely with the use of your CI system) deploy an artifact to an environment you should record that information to Kosli. So when you check the status of your environments you know not only what is running there, but also how did it get there. It's an easy way of detecting a manual change was introduced.\n"},{"id":16,"href":"/how_to/","title":"How to","section":"Welcome to Kosli Docs","content":" How to # Record # Kosli records the status of runtime environments by detecting artifacts running in any given environment and reporting the information.\nIf the list of running artifacts is different than what was reported previously, a new snapshot is created which is immutable and tamper proof.\nConnect # Report artifact creation and connect your development world of commits, builds, tests, approvals and deployments with what’s happening in operations.\nKosli records the sha of each build artifact, its source commit, history, and any other CI build information.\nSearch # A set of get, ls, log and inspect commands allows you to quickly access the information about your environments, artifacts and deployments, without leaving your development environment.\nSearch and browse with the same CLI you use to record and connect your changes, or use Kosli’s web application.\nCheck following sections to learn more # "},{"id":17,"href":"/client_reference/","title":"Reference","section":"Welcome to Kosli Docs","content":" Kosli Client Reference # "},{"id":18,"href":"/how_to/search/","title":"Search","section":"How to","content":" Get your artifacts and environments information from Kosli # All the information stored in Kosli may be helpful both for operations and development. A set of get, ls, log and inspect commands allows you to quickly access the information about your environments, artifacts and deployments, without leaving your development environment.\nVisit Reference to learn more about how to run each command.\nThe same CLI you use to record and connect your changes can be use to search for and browse information in Kosli.\nTo make it easier to run Kosli search commands with the CLI you can export the owner and api-token as environment variables, so you don't have to provide them every time you run commands. This approach is valid for any flag export KOSLI_OWNER=yourOrganizationName export KOSLI_API_TOKEN=yourKosliApiToken You can try all the commands below by setting the owner to cyber-dojo.\nthe Kosli cyber-dojo organization is public so any authenticated user can read its data:\nexport KOSLI_OWNER=cyber-dojo Search with git commit sha # You can use kosli search command to find out if Kosli knows of any artifact that was build using that commit - both short and full shas are accepted:\n$ kosli search 0f5c9e1 Search result resolved to commit 0f5c9e19c4d4f948d19ce4c8495b2a44745cda96 Name: cyberdojo/web:0f5c9e1 Fingerprint: 62e1d2909cc59193b31bfd120276fcb8ba5e42dd6becd873218a41e4ce022505 Has provenance: true Pipeline: web Git commit: 0f5c9e19c4d4f948d19ce4c8495b2a44745cda96 Commit URL: https://github.com/cyber-dojo/web/commit/0f5c9e19c4d4f948d19ce4c8495b2a44745cda96 Build URL: https://github.com/cyber-dojo/web/actions/runs/3021563461 Compliance state: COMPLIANT History: Artifact created Fri, 09 Sep 2022 11:59:50 CEST Deployment #59 to aws-beta environment Fri, 09 Sep 2022 12:01:12 CEST Started running in aws-beta#217 environment Fri, 09 Sep 2022 12:02:42 CEST Deployment #60 to aws-prod environment Fri, 09 Sep 2022 12:06:37 CEST Started running in aws-prod#202 environment Fri, 09 Sep 2022 12:07:28 CEST Scaled up from 1 to 3 in aws-prod#203 environment Fri, 09 Sep 2022 12:08:28 CEST No longer running in aws-beta#222 environment Sat, 10 Sep 2022 08:44:42 CEST No longer running in aws-prod#210 environment Sat, 10 Sep 2022 08:49:28 CEST The information returned by kosli search - like Pipeline, Fingerprint or History - can be used to run more dedicated searches in Kosli.\nSearch for a pipeline # When you search in Kosli you often need to refer to a specific pipeline. If you don't remember all the pipelines' names it is easy to find with kosli pipeline ls command:\n% kosli pipeline ls NAME DESCRIPTION VISIBILITY creator UX for Group/Kata creation public custom-start-points Custom exercises choices public dashboard UX for a group practice dashboard public differ Diff files from two traffic-lights public exercises-start-points Exercises choices public languages-start-points Language+TestFramework choices public nginx Reverse proxy public repler REPL for Python images public runner Test runner public saver Group/Kata model+persistence public shas UX for git+image shas public web UX for practicing TDD public And if you want to check metadata of a specific pipeline (like description or template) use kosli pipeline inspect\n% kosli pipeline inspect creator Name: creator Description: UX for Group/Kata creation Visibility: public Template: [artifact, branch-coverage] Last Deployment At: Wed, 14 Sep 2022 10:51:43 CEST • one month ago List artifacts # To find the information about artifacts reported to a specific pipeline in Kosli use kosli artifact ls command\n% kosli artifact ls creator COMMIT ARTIFACT STATE CREATED_AT 344430d Name: cyberdojo/creator:344430d COMPLIANT Wed, 14 Sep 2022 10:48:09 CEST Fingerprint: 817a72(...)6b5a273399c693 41bfb7b Name: cyberdojo/creator:41bfb7b COMPLIANT Sat, 10 Sep 2022 08:41:15 CEST Fingerprint: 8d6fef(...)b84c281f712ef8 aa0a3d3 Name: cyberdojo/creator:aa0a3d3 COMPLIANT Fri, 09 Sep 2022 11:58:56 CEST Fingerprint: 3ede07(...)238845a631e96a [...] The output of the command is shortened above, for readability purposes.\nThe amount of artifacts may be really long and by default you can see last 15 artifacts - the first page of the result list. You can use -n flag to limit the amount of artifacts displayed per page, and --page to select which page of the result list you want to see.\nE.g. to see last five artifacts you'd use:\nkosli artifact ls creator -n 5 And to see the next page:\nkosli artifact ls creator -n 5 --page 2 You can also use the --output flag to change the format of the response. By default the response comes in a table format, but you can choose to switch to json:\nkosli artifact ls creator --output json Get artifact # To get a more detailed information about a given artifact use kosli artifact get. To identify the artifact you need to use:\npipeline name followed by @ and artifact fingerprint OR pipeline name followed by : and commit sha Both are available in the output of kosli artifact ls command\n# search for artifact by its fingerprint $ kosli artifact get creator@817a72609041c51cd2a3bbbcbeb048c687677986b5a273399c6938b5e6aa1ded Name: cyberdojo/creator:344430d Pipeline: creator Fingerprint: 817a72609041c51cd2a3bbbcbeb048c687677986b5a273399c6938b5e6aa1ded Created on: Wed, 14 Sep 2022 10:48:09 CEST • 2 months ago Git commit: 344430d530d26068aa1f39760a9c094c989382f3 Commit URL: https://github.com/cyber-dojo/creator/commit/344430d530d26068aa1f39760a9c094c989382f3 Build URL: https://github.com/cyber-dojo/creator/actions/runs/3051390570 State: COMPLIANT Running in environments: aws-beta#265, aws-prod#259 History: Artifact created Wed, 14 Sep 2022 10:48:09 CEST branch-coverage evidence received Wed, 14 Sep 2022 10:49:11 CEST Deployment #100 to aws-beta environment Wed, 14 Sep 2022 10:50:40 CEST Deployment #101 to aws-prod environment Wed, 14 Sep 2022 10:51:43 CEST Started running in aws-beta#229 environment Wed, 14 Sep 2022 10:52:42 CEST Started running in aws-prod#217 environment Wed, 14 Sep 2022 10:53:28 CEST No longer running in aws-prod#252 environment Fri, 14 Oct 2022 08:17:28 CEST Started running in aws-prod#254 environment Fri, 14 Oct 2022 08:22:28 CEST No longer running in aws-beta#254 environment Fri, 14 Oct 2022 16:35:42 CEST Started running in aws-beta#256 environment Fri, 14 Oct 2022 16:38:42 CEST No longer running in aws-beta#257 environment Sun, 16 Oct 2022 07:45:42 CEST Started running in aws-beta#259 environment Sun, 16 Oct 2022 07:49:42 CEST No longer running in aws-beta#260 environment Wed, 19 Oct 2022 09:28:42 CEST Started running in aws-beta#262 environment Wed, 19 Oct 2022 09:32:42 CEST No longer running in aws-beta#263 environment Wed, 19 Oct 2022 09:42:42 CEST Started running in aws-beta#265 environment Wed, 19 Oct 2022 09:46:42 CEST No longer running in aws-prod#257 environment Fri, 21 Oct 2022 11:02:28 CEST Started running in aws-prod#259 environment Fri, 21 Oct 2022 11:05:28 CEST # search for artifact by its commit sha $ kosli artifact get creator:344430d Name: cyberdojo/creator:344430d Pipeline: creator Fingerprint: 817a72609041c51cd2a3bbbcbeb048c687677986b5a273399c6938b5e6aa1ded Created on: Wed, 14 Sep 2022 10:48:09 CEST • 2 months ago Git commit: 344430d530d26068aa1f39760a9c094c989382f3 Commit URL: https://github.com/cyber-dojo/creator/commit/344430d530d26068aa1f39760a9c094c989382f3 Build URL: https://github.com/cyber-dojo/creator/actions/runs/3051390570 State: COMPLIANT Running in environments: aws-beta#265, aws-prod#259 History: Artifact created Wed, 14 Sep 2022 10:48:09 CEST branch-coverage evidence received Wed, 14 Sep 2022 10:49:11 CEST Deployment #100 to aws-beta environment Wed, 14 Sep 2022 10:50:40 CEST Deployment #101 to aws-prod environment Wed, 14 Sep 2022 10:51:43 CEST Started running in aws-beta#229 environment Wed, 14 Sep 2022 10:52:42 CEST Started running in aws-prod#217 environment Wed, 14 Sep 2022 10:53:28 CEST No longer running in aws-prod#252 environment Fri, 14 Oct 2022 08:17:28 CEST Started running in aws-prod#254 environment Fri, 14 Oct 2022 08:22:28 CEST No longer running in aws-beta#254 environment Fri, 14 Oct 2022 16:35:42 CEST Started running in aws-beta#256 environment Fri, 14 Oct 2022 16:38:42 CEST No longer running in aws-beta#257 environment Sun, 16 Oct 2022 07:45:42 CEST Started running in aws-beta#259 environment Sun, 16 Oct 2022 07:49:42 CEST No longer running in aws-beta#260 environment Wed, 19 Oct 2022 09:28:42 CEST Started running in aws-beta#262 environment Wed, 19 Oct 2022 09:32:42 CEST No longer running in aws-beta#263 environment Wed, 19 Oct 2022 09:42:42 CEST Started running in aws-beta#265 environment Wed, 19 Oct 2022 09:46:42 CEST No longer running in aws-prod#257 environment Fri, 21 Oct 2022 11:02:28 CEST Started running in aws-prod#259 environment Fri, 21 Oct 2022 11:05:28 CEST Search for an environment # As is the case for pipelines and artifacts, you can list all the Kosli environments you created under your organization\n$ kosli environment ls NAME TYPE LAST REPORT LAST MODIFIED aws-beta ECS 2022-10-30T14:51:42+01:00 2022-10-30T14:51:42+01:00 aws-prod ECS 2022-10-30T14:51:28+01:00 2022-10-30T14:51:28+01:00 beta K8S 2022-06-15T11:39:59+02:00 2022-06-15T11:39:59+02:00 prod K8S 2022-06-15T11:40:01+02:00 2022-06-15T11:40:01+02:00 And inspect the metadata (including the type) of each environment:\n$ kosli environment inspect aws-beta Name: aws-beta Type: ECS Description: The ECS beta namespace State: COMPLIANT Last Reported At: Sun, 30 Oct 2022 14:55:42 CET • 5 seconds ago When you have the name of the environment you want to dig into use kosli environment log to browse changes in the environment, or kosli environment get to have a look at a specific snapshot.\nGet environment log # kosli environment log aws-beta SNAPSHOT FROM TO DURATION 266 Wed, 19 Oct 2022 09:47:42 CEST now 11 days 265 Wed, 19 Oct 2022 09:46:42 CEST Wed, 19 Oct 2022 09:47:42 CEST 59 seconds 264 Wed, 19 Oct 2022 09:45:42 CEST Wed, 19 Oct 2022 09:46:42 CEST about a minute 263 Wed, 19 Oct 2022 09:42:42 CEST Wed, 19 Oct 2022 09:45:42 CEST 3 minutes 262 Wed, 19 Oct 2022 09:32:42 CEST Wed, 19 Oct 2022 09:42:42 CEST 10 minutes 261 Wed, 19 Oct 2022 09:31:42 CEST Wed, 19 Oct 2022 09:32:42 CEST about a minute 260 Wed, 19 Oct 2022 09:28:42 CEST Wed, 19 Oct 2022 09:31:42 CEST 3 minutes 259 Sun, 16 Oct 2022 07:49:42 CEST Wed, 19 Oct 2022 09:28:42 CEST 3 days 258 Sun, 16 Oct 2022 07:48:42 CEST Sun, 16 Oct 2022 07:49:42 CEST 59 seconds 257 Sun, 16 Oct 2022 07:45:42 CEST Sun, 16 Oct 2022 07:48:42 CEST 3 minutes 256 Fri, 14 Oct 2022 16:38:42 CEST Sun, 16 Oct 2022 07:45:42 CEST 2 days 255 Fri, 14 Oct 2022 16:37:42 CEST Fri, 14 Oct 2022 16:38:42 CEST about a minute 254 Fri, 14 Oct 2022 16:35:42 CEST Fri, 14 Oct 2022 16:37:42 CEST 2 minutes 253 Thu, 13 Oct 2022 09:04:42 CEST Fri, 14 Oct 2022 16:35:42 CEST one day 252 Mon, 10 Oct 2022 08:47:42 CEST Thu, 13 Oct 2022 09:04:42 CEST 3 days Byt default you can see the last 15 changes to the environment. You can choose to only print e.g. last 3 events (-n flag) and have a more detailed output (--long flag):\n$ kosli environment log aws-beta --long -n 3 SNAPSHOT EVENT PIPELINE DEPLOYMENTS #266 Artifact: 244531986313.dkr.ecr.eu-central-1.amazonaws.com/dashboard:d90a3e4 dashboard #15 Fingerprint: dd5308fdcda117c1ff3963e192a069ae390c2fe9e10e8abfa2430224265efe98 Description: 1 instance started running (from 0 to 1) Reported at: Wed, 19 Oct 2022 09:47:42 CEST #265 Artifact: 244531986313.dkr.ecr.eu-central-1.amazonaws.com/web:7ac7cdc web #63 Fingerprint: 88c082eee192653ea5826d14f714bcfbdadbd1827a7a29416bfddbdff2b69507 Description: 3 instances started running (from 0 to 3) Reported at: Wed, 19 Oct 2022 09:46:42 CEST #265 Artifact: 244531986313.dkr.ecr.eu-central-1.amazonaws.com/runner:2872115 runner #24 Fingerprint: 9461946e43393404ce744292331e7efbfe4e17cc2e5a32972169a90c81ec875c Description: 3 instances started running (from 0 to 3) Reported at: Wed, 19 Oct 2022 09:46:42 CEST You can also use interval expression, like 262..264 (to see specified snapshot list) , or ~4..NOW (to get a list of snapshots starting from 4 behind a currently running one and the current one)\n$ kosli environment log aws-beta 262..264 SNAPSHOT FROM TO DURATION 264 Wed, 19 Oct 2022 09:45:42 CEST Wed, 19 Oct 2022 09:46:42 CEST about a minute 263 Wed, 19 Oct 2022 09:42:42 CEST Wed, 19 Oct 2022 09:45:42 CEST 3 minutes 262 Wed, 19 Oct 2022 09:32:42 CEST Wed, 19 Oct 2022 09:42:42 CEST 10 minutes $ kosli environment log aws-beta ~4..NOW SNAPSHOT FROM TO DURATION 266 Wed, 19 Oct 2022 09:47:42 CEST now 11 days 265 Wed, 19 Oct 2022 09:46:42 CEST Wed, 19 Oct 2022 09:47:42 CEST 59 seconds 264 Wed, 19 Oct 2022 09:45:42 CEST Wed, 19 Oct 2022 09:46:42 CEST about a minute 263 Wed, 19 Oct 2022 09:42:42 CEST Wed, 19 Oct 2022 09:45:42 CEST 3 minutes 262 Wed, 19 Oct 2022 09:32:42 CEST Wed, 19 Oct 2022 09:42:42 CEST 10 minutes Get a snapshot # To have a look at what is or was running in a given snapshot use kosli environment get command. You can use just the environment name as the argument, which will give you the latest snapshot, add # and snapshot name, to get a specific one, or ~n where n is a number a number, to get n-th snapshot behind a current one:\n$ kosli environment get aws-beta COMMIT ARTIFACT PIPELINE RUNNING_SINCE REPLICAS d90a3e4 Name: 244531986313.dkr.ecr.eu-central-1.amazonaws.com/dashboard:d90a3e4 N/A 11 days ago 1 Fingerprint: dd5308fdcda117c1ff3963e192a069ae390c2fe9e10e8abfa2430224265efe98 9f669e5 Name: 244531986313.dkr.ecr.eu-central-1.amazonaws.com/languages-start-points:9f669e5 N/A 11 days ago 1 Fingerprint: e6b72f6a41d0944824538334120804ccde795b4b5aeb8aa311dbc0721b4e40fd 1c162e4 Name: 244531986313.dkr.ecr.eu-central-1.amazonaws.com/differ:1c162e4 N/A 11 days ago 1 Fingerprint: b7fd766dd2514b2610c0c8d70d8f762de4921931f97fdd6fbbfcc9745ac3ce3b [...] $ kosli environment get aws-beta#256 COMMIT ARTIFACT PIPELINE RUNNING_SINCE REPLICAS 6fe0d30 Name: 244531986313.dkr.ecr.eu-central-1.amazonaws.com/repler:6fe0d30 N/A 16 days ago 1 Fingerprint: a0c03099c832e4ce5f23f5e33dac9889c0b7ccd61297fffdaf1c67e7b99e6f8f d90a3e4 Name: 244531986313.dkr.ecr.eu-central-1.amazonaws.com/dashboard:d90a3e4 N/A 16 days ago 1 Fingerprint: dd5308fdcda117c1ff3963e192a069ae390c2fe9e10e8abfa2430224265efe98 1c162e4 Name: 244531986313.dkr.ecr.eu-central-1.amazonaws.com/differ:1c162e4 N/A 16 days ago 1 Fingerprint: b7fd766dd2514b2610c0c8d70d8f762de4921931f97fdd6fbbfcc9745ac3ce3b [...] $ kosli environment get aws-beta~19 COMMIT ARTIFACT PIPELINE RUNNING_SINCE REPLICAS 2e8646c Name: 244531986313.dkr.ecr.eu-central-1.amazonaws.com/shas:2e8646c N/A one month ago 1 Fingerprint: a3158c3e79c83905fd3613e06b8cf5a45141c50cf49d4f99de90a2d081b77771 344430d Name: 244531986313.dkr.ecr.eu-central-1.amazonaws.com/creator:344430d N/A 2 months ago 1 Fingerprint: 817a72609041c51cd2a3bbbcbeb048c687677986b5a273399c6938b5e6aa1ded 7ac7cdc Name: 244531986313.dkr.ecr.eu-central-1.amazonaws.com/web:7ac7cdc N/A 2 months ago 3 Fingerprint: 88c082eee192653ea5826d14f714bcfbdadbd1827a7a29416bfddbdff2b69507 The same expressions (with # and ~) can be used to reference snapshots when diffing environment\nIn the example below there was only one difference between snapshots: one new artifact started running in latest snapshot\n$ kosli environment diff aws-beta aws-beta~1 Only present in aws-beta (snapshot: aws-beta#266) Name: 244531986313.dkr.ecr.eu-central-1.amazonaws.com/dashboard:d90a3e4 Fingerprint: dd5308fdcda117c1ff3963e192a069ae390c2fe9e10e8abfa2430224265efe98 Pipeline: dashboard Commit URL: https://github.com/cyber-dojo/dashboard/commit/d90a3e481d57023816f6694ba4252342889405eb Started: Wed, 19 Oct 2022 09:47:33 CEST • 11 days ago Diff environments # You can use diff to compare two different environments:\n$ kosli environment diff aws-beta~3 aws-prod Only present in aws-prod (snapshot: aws-prod#261) Name: 274425519734.dkr.ecr.eu-central-1.amazonaws.com/saver:8d724a1 Fingerprint: 3e52f9b838cbb4e31455524c908eb8dd878b2ae25144427de8160f6658ee191f Pipeline: saver Commit URL: https://github.com/cyber-dojo/saver/commit/8d724a14c6e95947f0c56ad6af8251bca656a599 Started: Fri, 21 Oct 2022 11:04:59 CEST • 9 days ago Name: 274425519734.dkr.ecr.eu-central-1.amazonaws.com/nginx:d491f5c Fingerprint: 4f66ab1b0a7a9f7ed064a3b1033a53ec7dd99359ff68d509ab555dcf4516b23e Pipeline: nginx Commit URL: https://github.com/cyber-dojo/nginx/commit/d491f5c06babe70bfebe2f9df0a9a66db7957f17 Started: Fri, 21 Oct 2022 11:03:53 CEST • 9 days ago Name: 274425519734.dkr.ecr.eu-central-1.amazonaws.com/custom-start-points:8c551d3 Fingerprint: 76ad6ffc1828d8213a39bc39c879b3c35a75d4705d1d8df5977a87a11e6ae25e Pipeline: custom-start-points Commit URL: https://github.com/cyber-dojo/custom-start-points/commit/8c551d378051b6ef1fde7fd58aaced1047264405 Started: Fri, 21 Oct 2022 11:04:30 CEST • 9 days ago [...] "},{"id":19,"href":"/introducing_kosli/web_ui/","title":"Web UI","section":"Introducing Kosli","content":" Web UI # app.kosli.com is an easy way to monitor the status of your environments and pipelines. All you need to log in is a GitHub account.\nOn the left of the page you can see the menu where you can:\nSwitch to another organization using dropdown menu Switch to the Environments or the Pipelines view Enter organization settings page Access this documentation page In the top right corner of the page you will see your GitHub avatar where you can access your profile settings (containing your Kosli api key). You'll also find there a link to the page where you can create a shared organization and links to cyber-dojo demo project and to log out.\n"},{"id":20,"href":"/faq/","title":"Frequently asked questions","section":"Welcome to Kosli Docs","content":" Frequently asked questions # Errors # Why am I getting \u0026quot;unknown flag\u0026quot; error? # If you see an error like below (or similar, with a different flag):\nError: unknown flag: --artifact-type It most likely mean you misspelled a flag or a command.\nE.g.\nkosli expect deploymenct abc.exe --artifact-type file Error: unknown flag: --artifact-type The flag is spelled correctly, but there is a typo in deploymenct. Same error will pop up if you're trying to use a command that is not present in the version of kosli cli you are using.\nUsage # Do I have to provide all the flags all the time? # A number of flags won't change their values often (or at all) between commands, like --owner or api-token. Some will differ between e.g. workflows, like --pipeline. You can define them as environment variable to avoid unnecessary redundancy. Check Environment variables section to learn more.\nWhat is dry run and how to use it? # You can use dry run to disable writing to app.kosli.com - e.g. if you're just trying things out, or troubleshooting (dry run will print the payload cli would send in a non dry run mode).\nThere is a few ways you can enable dry run mode\nuse --dry-run flag (no value needed) to enable it per command set KOSLI_API_TOKEN environment variable to DRY_RUN to enable it globally (e.g. in your terminal or CI) What is the --config-file flag? # A config file is an alternative for using Kosli flags or Environment variables. Usually you'd use config file for the values that rarely change - like api token or owner, but you can represent all Kosli flags with config file. The key for each value is the same as the flag name, capitalized, so --api-token would become API-TOKEN, and --owner would become OWNER, etc.\nYou can use JSON, YAML or TOML format for your config file.\nIf you want to keep certain Kosli configuration in a file use --config-file flag when running Kosli commands to let the cli tool know where to look for the file. The path given to --config-file flag should be a path relative to the location you're running kosli from. The file needs a valid format and extension, e.g.:\nkosli-conf.json:\n{ \u0026#34;OWNER\u0026#34;: \u0026#34;my-org\u0026#34;, \u0026#34;API-TOKEN\u0026#34;: \u0026#34;123456abcdef\u0026#34; } kosli-conf.yaml:\nOWNER: \u0026#34;my-org\u0026#34; API-TOKEN: \u0026#34;123456abcdef\u0026#34; kosli-conf.toml:\nOWNER = \u0026#34;my-org\u0026#34; API-TOKEN = \u0026#34;123456abcdef\u0026#34; When calling Kosli command you can skip file extension. For example, to list environments with owner and api-token in the configuration file you would run:\n$ kosli environment ls --config-file kosli-conf --config-file defaults to kosli, so if you name your file kosli.\u0026lt;yaml|toml|json\u0026gt; and the file is in the same location as where you run Kosli commands from, you can skip the --config-file altogether.\n"},{"id":21,"href":"/client_reference/kosli/","title":"kosli","section":"Reference","content":" kosli # The Kosli CLI.\nSynopsis # The Kosli evidence reporting CLI.\nEnvironment variables: You can set any flag from an environment variable by capitalizing it in snake case and adding the KOSLI_ prefix. For example, to set --api-token from an environment variable, you can export KOSLI_API_TOKEN=YOUR_API_TOKEN.\nSetting the API token to DRY_RUN sets the --dry-run flag.\nFlags # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -h, --help help for kosli -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. "},{"id":22,"href":"/client_reference/kosli_approval_get/","title":"kosli approval get","section":"Reference","content":" kosli approval get # Get an approval from a specified pipeline.\nSynopsis # Get an approval from a specified pipeline. The expected argument is an expression to specify the approval to get. It has the format \u0026lt;PIPELINE_NAME\u0026gt;[SEPARATOR][INTEGER_REFERENCE]\nSpecify SNAPPISH by: pipelineName~ N'th behind the latest approval pipelineName# approval number N pipelineName the latest approval\nExamples of valid expressions are: pipe (latest approval), pipe#10 (approval number 10), pipe~2 (the third latest approval)\nkosli approval get SNAPPISH [flags] Flags # Flag Description -h, --help help for get -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default \u0026quot;table\u0026quot;) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # get second behind the latest approval from a pipeline kosli approval get pipelineName~1 \\ --api-token yourAPIToken \\ --owner orgName # get the 10th approval from a pipeline kosli approval get pipelineName#10 \\ --api-token yourAPIToken \\ --owner orgName # get the latest approval from a pipeline kosli approval get pipelineName \\ --api-token yourAPIToken \\ --owner orgName "},{"id":23,"href":"/client_reference/kosli_approval_ls/","title":"kosli approval ls","section":"Reference","content":" kosli approval ls # List approvals in a pipeline.\nSynopsis # List approvals in a pipeline. The results are paginated and ordered from latests to oldest. By default, the page limit is 15 approvals per page.\nkosli approval ls PIPELINE-NAME [flags] Flags # Flag Description -h, --help help for ls -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default \u0026quot;table\u0026quot;) --page int [defaulted] The page number of a response. (default 1) -n, --page-limit int [defaulted] The number of elements per page. (default 15) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # list the last 15 approvals for a pipeline: kosli approval list yourPipelineName \\ --api-token yourAPIToken \\ --owner yourOrgName # list the last 30 approvals for a pipeline: kosli approval list yourPipelineName \\ --page-limit 30 \\ --api-token yourAPIToken \\ --owner yourOrgName # list the last 30 approvals for a pipeline (in JSON): kosli approval list yourPipelineName \\ --page-limit 30 \\ --api-token yourAPIToken \\ --owner yourOrgName \\ --output json "},{"id":24,"href":"/client_reference/kosli_artifact_get/","title":"kosli artifact get","section":"Reference","content":" kosli artifact get # Get artifact from a specified pipeline\nSynopsis # Get artifact from a specified pipeline You can get an artifact by its fingerprint or by its git commit sha. In case of using the git commit, it is possible to get multiple artifacts matching the git commit.\nThe expected argument is an expression to specify the artifact to get. It has the format \u0026lt;PIPELINE_NAME\u0026gt;\u0026lt;COMMIT_SHA1|ARTIFACT_SHA256\u0026gt;\nSpecify SNAPPISH by: pipelineName@ artifact with a given fingerprint. The fingerprint can be short or complete. pipelineName:\u0026lt;commit_sha\u0026gt; artifact with a given commit SHA. The commit sha can be short or complete.\nExamples of valid expressions are: pipe@184c799cd551dd1d8d5c5f9a5d593b2e931f5e36122ee5c793c1d08a19839cc0, pipe:110d048bf1fce72ba546cbafc4427fb21b958dee\nkosli artifact get SNAPPISH [flags] Flags # Flag Description -h, --help help for get -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default \u0026quot;table\u0026quot;) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # get an artifact with a given fingerprint from a pipeline kosli artifact get pipelineName@fingerprint \\ --api-token yourAPIToken \\ --owner orgName # get an artifact with a given commit SHA from a pipeline kosli artifact get pipelineName:commitSHA \\ --api-token yourAPIToken \\ --owner orgName "},{"id":25,"href":"/client_reference/kosli_artifact_ls/","title":"kosli artifact ls","section":"Reference","content":" kosli artifact ls # List artifacts in a pipeline.\nSynopsis # List artifacts in a pipeline. The results are paginated and ordered from latests to oldest. By default, the page limit is 15 artifacts per page.\nkosli artifact ls PIPELINE-NAME [flags] Flags # Flag Description -h, --help help for ls -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default \u0026quot;table\u0026quot;) --page int [defaulted] The page number of a response. (default 1) -n, --page-limit int [defaulted] The number of elements per page. (default 15) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # list the last 15 artifacts for a pipeline: kosli artifact list yourPipelineName \\ --api-token yourAPIToken \\ --owner yourOrgName # list the last 30 artifacts for a pipeline: kosli artifact list yourPipelineName \\ --page-limit 30 \\ --api-token yourAPIToken \\ --owner yourOrgName # list the last 30 artifacts for a pipeline (in JSON): kosli artifact list yourPipelineName \\ --page-limit 30 \\ --api-token yourAPIToken \\ --owner yourOrgName \\ --output json "},{"id":26,"href":"/client_reference/kosli_assert_artifact/","title":"kosli assert artifact","section":"Reference","content":" kosli assert artifact # Assert the compliance status of an artifact in Kosli.\nSynopsis # Assert the compliance status of an artifact in Kosli. Exits with non-zero code if the artifact has a non-compliant status.\nkosli assert artifact [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify '--sha256' or '--fingerprint'. -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -h, --help help for artifact -p, --pipeline string The Kosli pipeline name. --registry-password string [conditional] The docker registry password or access token. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-provider string [conditional] The docker registry provider or url. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-username string [conditional] The docker registry username. Only required if you want to read docker image SHA256 digest from a remote docker registry. -s, --sha256 string [conditional] The SHA256 fingerprint for the artifact. Only required if you don't specify '--artifact-type'. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # fail if an artifact has a non-compliant status (using the artifact fingerprint) kosli assert artifact \\ --sha256 184c799cd551dd1d8d5c5f9a5d593b2e931f5e36122ee5c793c1d08a19839cc0 \\ --pipeline yourPipelineName \\ --api-token yourAPIToken \\ --owner yourOrgName # fail if an artifact has a non-compliant status (using the artifact name and type) kosli assert artifact library/nginx:1.21 \\ --artifact-type docker \\ --pipeline yourPipelineName \\ --api-token yourAPIToken \\ --owner yourOrgName "},{"id":27,"href":"/client_reference/kosli_assert_bitbucket-pullrequest/","title":"kosli assert bitbucket-pullrequest","section":"Reference","content":" kosli assert bitbucket-pullrequest # Assert if a Bitbucket pull request for a git commit exists.\nSynopsis # Assert if a Bitbucket pull request for a git commit exists. The command exits with non-zero exit code if no pull requests were found for the commit.\nkosli assert bitbucket-pullrequest [flags] Flags # Flag Description --bitbucket-password string Bitbucket password. --bitbucket-username string Bitbucket user name. --bitbucket-workspace string Bitbucket workspace. --commit string Git commit for which to find pull request evidence. (defaulted in some CIs: https://docs.kosli.com/ci-defaults ). -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -h, --help help for bitbucket-pullrequest --repository string Git repository. (defaulted in some CIs: https://docs.kosli.com/ci-defaults ). Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # kosli assert bitbucket-pullrequest \\ --bitbucket-username yourBitbucketUsername \\ --bitbucket-password yourBitbucketPassword \\ --bitbucket-workspace yourBitbucketWorkspace \\ --commit yourGitCommit \\ --repository yourBitbucketGitRepository "},{"id":28,"href":"/client_reference/kosli_assert_environment/","title":"kosli assert environment","section":"Reference","content":" kosli assert environment # Assert the compliance status of an environment in Kosli.\nSynopsis # Assert the compliance status of an environment in Kosli. Exits with non-zero code if the environment has a non-compliant status. The expected argument is an expression to specify the specific environment snapshot to assert. It has the format \u0026lt;ENVIRONMENT_NAME\u0026gt;[SEPARATOR][SNAPSHOT_REFERENCE]\nSeparators can be:\n'#' to specify a specific snapshot number for the environment that is being asserted. '~' to get N-th behind the latest snapshot. Examples of valid expressions are:\nprod (latest snapshot of prod) prod#10 (snapshot number 10 of prod) prod~2 (third latest snapshot of prod) kosli assert environment ENVIRONMENT-NAME-OR-EXPRESSION [flags] Flags # Flag Description -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -h, --help help for environment Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # kosli assert environment prod#5 \\ --api-token yourAPIToken \\ --owner yourOrgName "},{"id":29,"href":"/client_reference/kosli_assert_github-pullrequest/","title":"kosli assert github-pullrequest","section":"Reference","content":" kosli assert github-pullrequest # Assert if a Github pull request for a git commit exists.\nSynopsis # Assert if a Github pull request for a git commit exists. The command exits with non-zero exit code if no pull requests were found for the commit.\nkosli assert github-pullrequest [flags] Flags # Flag Description --commit string Git commit for which to find pull request evidence. (defaulted in some CIs: https://docs.kosli.com/ci-defaults ). -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. --github-org string Github organization. --github-token string Github token. -h, --help help for github-pullrequest --repository string Git repository. (defaulted in some CIs: https://docs.kosli.com/ci-defaults ). Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # kosli assert github-pullrequest \\ --github-token yourGithubToken \\ --github-org yourGithubOrg \\ --commit yourArtifactGitCommit \\ --commit yourGitCommit \\ --repository yourGithubGitRepository "},{"id":30,"href":"/client_reference/kosli_assert_status/","title":"kosli assert status","section":"Reference","content":" kosli assert status # Assert the status of Kosli server.\nSynopsis # Assert the status of Kosli server. Exits with non-zero code if Kosli server down.\nkosli assert status [flags] Flags # Flag Description -h, --help help for status Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. "},{"id":31,"href":"/client_reference/kosli_completion/","title":"kosli completion","section":"Reference","content":" kosli completion # Generate completion script\nSynopsis # To load completions:\nBash # $ source \u0026lt;(kosli completion bash) To load completions for each session, execute once:\nOn Linux:\n$ kosli completion bash \u0026gt; /etc/bash_completion.d/kosli On macOS:\n$ kosli completion bash \u0026gt; $(brew --prefix)/etc/bash_completion.d/kosli Zsh # If shell completion is not already enabled in your environment,\nyou will need to enable it. You can execute the following once:\n$ echo \u0026#34;autoload -U compinit; compinit\u0026#34; \u0026gt;\u0026gt; ~/.zshrc To load completions for each session, execute once:\n$ kosli completion zsh \u0026gt; \u0026#34;${fpath[1]}/_kosli\u0026#34; You will need to start a new shell for this setup to take effect.\nfish # $ kosli completion fish | source To load completions for each session, execute once:\n$ kosli completion fish \u0026gt; ~/.config/fish/completions/kosli.fish PowerShell # PS\u0026gt; kosli completion powershell | Out-String | Invoke-Expression To load completions for every new session, run:\nPS\u0026gt; kosli completion powershell \u0026gt; kosli.ps1 and source this file from your PowerShell profile.\nkosli completion [bash|zsh|fish|powershell] Flags # Flag Description -h, --help help for completion Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. "},{"id":32,"href":"/client_reference/kosli_deployment_get/","title":"kosli deployment get","section":"Reference","content":" kosli deployment get # Get a deployment from a specified pipeline.\nSynopsis # Get a deployment from a specified pipeline. Specify SNAPPISH by: pipelineName~ N'th behind the latest deployment pipelineName# deployment number N pipelineName the latest deployment\nkosli deployment get SNAPPISH [flags] Flags # Flag Description -h, --help help for get -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default \u0026quot;table\u0026quot;) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # get previous deployment in a pipeline kosli deployment get pipelineName~1 \\ --api-token yourAPIToken \\ --owner orgName # get the 10th deployment in a pipeline kosli deployment get pipelineName#10 \\ --api-token yourAPIToken \\ --owner orgName # get the latest deployment in a pipeline kosli deployment get pipelineName \\ --api-token yourAPIToken \\ --owner orgName "},{"id":33,"href":"/client_reference/kosli_deployment_ls/","title":"kosli deployment ls","section":"Reference","content":" kosli deployment ls # List deployments in a pipeline.\nSynopsis # List deployments in a pipeline. The results are paginated and ordered from latests to oldest. By default, the page limit is 15 deployments per page.\nkosli deployment ls PIPELINE-NAME [flags] Flags # Flag Description -h, --help help for ls -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default \u0026quot;table\u0026quot;) --page int [defaulted] The page number of a response. (default 1) -n, --page-limit int [defaulted] The number of elements per page. (default 15) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # list the last 15 deployments for a pipeline: kosli deployment list yourPipelineName \\ --api-token yourAPIToken \\ --owner yourOrgName # list the last 30 deployments for a pipeline: kosli deployment list yourPipelineName \\ --page-limit 30 \\ --api-token yourAPIToken \\ --owner yourOrgName # list the last 30 deployments for a pipeline (in JSON): kosli deployment list yourPipelineName \\ --page-limit 30 \\ --api-token yourAPIToken \\ --owner yourOrgName \\ --output json "},{"id":34,"href":"/client_reference/kosli_environment_allowedartifacts_add/","title":"kosli environment allowedartifacts add","section":"Reference","content":" kosli environment allowedartifacts add # Add an artifact to an environment's allowlist.\nSynopsis # Add an artifact to an environment's allowlist. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).\nkosli environment allowedartifacts add {IMAGE-NAME | FILE-PATH | DIR-PATH} [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify '--sha256' or '--fingerprint'. -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -e, --environment string The environment name for which the artifact is allowlisted. -h, --help help for add --reason string The reason why this artifact is allowlisted. --registry-password string [conditional] The docker registry password or access token. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-provider string [conditional] The docker registry provider or url. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-username string [conditional] The docker registry username. Only required if you want to read docker image SHA256 digest from a remote docker registry. -s, --sha256 string [conditional] The SHA256 fingerprint for the artifact. Only required if you don't specify '--artifact-type'. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. "},{"id":35,"href":"/client_reference/kosli_environment_declare/","title":"kosli environment declare","section":"Reference","content":" kosli environment declare # Declare a Kosli environment.\nSynopsis # Declare a Kosli environment.\nkosli environment declare [flags] Flags # Flag Description -d, --description string [optional] The environment description. -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -t, --environment-type string The type of environment. Valid types are: [K8S, ECS, server, S3, lambda, docker]. -h, --help help for declare -n, --name string The name of environment to be created. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # declare a Kosli environment: kosli environment declare --name yourEnvironmentName \\ --environment-type K8S \\ --description \u0026#34;my new env\u0026#34; \\ --api-token yourAPIToken \\ --owner yourOrgName "},{"id":36,"href":"/client_reference/kosli_environment_diff/","title":"kosli environment diff","section":"Reference","content":" kosli environment diff # Diff snapshots.\nSynopsis # Diff snapshots. Specify SNAPPISH_1 and SNAPPISH_2 by: environmentName~ N'th behind the latest snapshot environmentName# snapshot number N environmentName the latest snapshot\nkosli environment diff SNAPPISH_1 SNAPPISH_2 [flags] Flags # Flag Description -h, --help help for diff -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default \u0026quot;table\u0026quot;) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # compare the third latest snapshot in an environment to the latest kosli environment diff envName~3 envName \\ --api-token yourAPIToken \\ --owner orgName # compare two different environments of the same type kosli environment diff envName1 envName2 \\ --api-token yourAPIToken \\ --owner orgName "},{"id":37,"href":"/client_reference/kosli_environment_get/","title":"kosli environment get","section":"Reference","content":" kosli environment get # Get a specific environment snapshot.\nSynopsis # Get a specific environment snapshot. Specify SNAPPISH by: environmentName~ N'th behind the latest snapshot environmentName# snapshot number N environmentName the latest snapshot\nkosli environment get ENVIRONMENT-NAME-OR-EXPRESSION [flags] Flags # Flag Description -h, --help help for get -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default \u0026quot;table\u0026quot;) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # get the latest snapshot of an environment: kosli environment get yourEnvironmentName --api-token yourAPIToken \\ --owner yourOrgName # get the SECOND latest snapshot of an environment: kosli environment get yourEnvironmentName~1 --api-token yourAPIToken \\ --owner yourOrgName # get the snapshot number 23 of an environment: kosli environment get yourEnvironmentName#23 --api-token yourAPIToken \\ --owner yourOrgName "},{"id":38,"href":"/client_reference/kosli_environment_inspect/","title":"kosli environment inspect","section":"Reference","content":" kosli environment inspect # Inspect an environment metadata.\nSynopsis # Inspect an environment metadata.\nkosli environment inspect ENVIRONMENT-NAME [flags] Flags # Flag Description -h, --help help for inspect -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default \u0026quot;table\u0026quot;) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. "},{"id":39,"href":"/client_reference/kosli_environment_log/","title":"kosli environment log","section":"Reference","content":" kosli environment log # List environment events.\nSynopsis # List environment events. The results are paginated and ordered from latests to oldest. By default, the page limit is 15 events per page.\nYou can optionally specify an INTERVAL between two snapshot expressions with ... Expressions can be: ~N N'th behind the latest snapshot N snapshot number N NOW the latest snapshot Either expression can be omitted to default to NOW.\nkosli environment log ENV_NAME [INTERVAL] [flags] Flags # Flag Description -h, --help help for log -l, --long [optional] Print detailed output. -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default \u0026quot;table\u0026quot;) --page int [defaulted] The page number of a response. (default 1) -n, --page-limit int [defaulted] The number of elements per page. (default 15) --reverse [defaulted] Reverse the order of output list. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # list the last 15 events for an environment: kosli environment log yourEnvironmentName \\ --api-token yourAPIToken \\ --owner yourOrgName # list the last 30 events for an environment: kosli environment log yourEnvironmentName \\ --page-limit 30 \\ --api-token yourAPIToken \\ --owner yourOrgName # list the last 30 events for an environment (in JSON): kosli environment log yourEnvironmentName \\ --page-limit 30 \\ --api-token yourAPIToken \\ --owner yourOrgName \\ --output json "},{"id":40,"href":"/client_reference/kosli_environment_ls/","title":"kosli environment ls","section":"Reference","content":" kosli environment ls # List environments.\nSynopsis # List environments.\nkosli environment ls [flags] Flags # Flag Description -h, --help help for ls -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default \u0026quot;table\u0026quot;) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. "},{"id":41,"href":"/client_reference/kosli_environment_rename/","title":"kosli environment rename","section":"Reference","content":" kosli environment rename # Rename a Kosli environment.\nSynopsis # Rename a Kosli environment. The environment will remain available under its old name until that name is taken by another environment.\nkosli environment rename OLD_NAME NEW_NAME [flags] Flags # Flag Description -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -h, --help help for rename Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # rename a Kosli environment: kosli environment rename oldName newName \\ --api-token yourAPIToken \\ --owner yourOrgName "},{"id":42,"href":"/client_reference/kosli_environment_report_docker/","title":"kosli environment report docker","section":"Reference","content":" kosli environment report docker # Report running containers data from docker host to Kosli.\nSynopsis # Report running containers data from docker host to Kosli. The reported data includes container image digests and creation timestamps. Containers running images which have not been pushed to or pulled from a registry will be ignored.\nkosli environment report docker ENVIRONMENT-NAME [flags] Flags # Flag Description -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -h, --help help for docker Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # report what is running in a docker host: kosli environment report docker yourEnvironmentName \\ --api-token yourAPIToken \\ --owner yourOrgName "},{"id":43,"href":"/client_reference/kosli_environment_report_ecs/","title":"kosli environment report ecs","section":"Reference","content":" kosli environment report ecs # Report running containers data from AWS ECS cluster or service to Kosli.\nSynopsis # Report running containers data from AWS ECS cluster or service to Kosli. The reported data includes container image digests and creation timestamps. To authenticate to AWS, you can either: 1) provide the AWS static credentials via flags or by exporting the equivalent KOSLI env vars (e.g. KOSLI_AWS_KEY_ID) 2) export the AWS env vars (e.g. AWS_ACCESS_KEY_ID). 3) Use a shared config/credentials file under the $HOME/.aws Option 1 takes highest precedence, while option 3 is the lowest. More details can be found here: https://aws.github.io/aws-sdk-go-v2/docs/configuring-sdk/#specifying-credentials kosli environment report ecs ENVIRONMENT-NAME [flags] Flags # Flag Description --aws-key-id string The AWS access key ID. --aws-region string The AWS region. --aws-secret-key string The AWS secret access key. -C, --cluster string The name of the ECS cluster. -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -h, --help help for ecs -s, --service-name string The name of the ECS service. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # report what is running in an entire AWS ECS cluster: export AWS_REGION=yourAWSRegion export AWS_ACCESS_KEY_ID=yourAWSAccessKeyID export AWS_SECRET_ACCESS_KEY=yourAWSSecretAccessKey kosli environment report ecs yourEnvironmentName \\ --cluster yourECSClusterName \\ --api-token yourAPIToken \\ --owner yourOrgName # report what is running in a specific AWS ECS service: export AWS_REGION=yourAWSRegion export AWS_ACCESS_KEY_ID=yourAWSAccessKeyID export AWS_SECRET_ACCESS_KEY=yourAWSSecretAccessKey kosli environment report ecs yourEnvironmentName \\ --service-name yourECSServiceName \\ --api-token yourAPIToken \\ --owner yourOrgName # report what is running in in a specific AWS ECS service (AWS auth provided in flags): kosli environment report ecs yourEnvironmentName \\ --service-name yourECSServiceName \\ --aws-key-id yourAWSAccessKeyID \\ --aws-secret-key yourAWSSecretAccessKey \\ --aws-region yourAWSRegion \\ --api-token yourAPIToken \\ --owner yourOrgName "},{"id":44,"href":"/client_reference/kosli_environment_report_k8s/","title":"kosli environment report k8s","section":"Reference","content":" kosli environment report k8s # Report running pods data from K8S cluster or namespace(s) to Kosli.\nSynopsis # Report running pods data from K8S cluster or namespace(s) to Kosli. The reported data includes pod container images digests and creation timestamps. You can customize the scope of reporting to include or exclude namespaces.\nkosli environment report k8s ENVIRONMENT-NAME [flags] Flags # Flag Description -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -x, --exclude-namespace strings [conditional] The comma separated list of namespaces regex patterns NOT to report artifacts info from. Can't be used together with --namespace. -h, --help help for k8s -k, --kubeconfig string [defaulted] The kubeconfig path for the target cluster. (default \u0026quot;$HOME/.kube/config\u0026quot;) -n, --namespace strings [conditional] The comma separated list of namespaces regex patterns to report artifacts info from. Can't be used together with --exclude-namespace. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # report what is running in an entire cluster using kubeconfig at $HOME/.kube/config: kosli environment report k8s yourEnvironmentName \\ --api-token yourAPIToken \\ --owner yourOrgName # report what is running in an entire cluster using kubeconfig at $HOME/.kube/config (with global flags defined in environment or in a config file): export KOSLI_API_TOKEN=yourAPIToken export KOSLI_OWNER=yourOrgName kosli environment report k8s yourEnvironmentName # report what is running in an entire cluster excluding some namespaces using kubeconfig at $HOME/.kube/config: kosli environment report k8s yourEnvironmentName \\ --exclude-namespace kube-system,utilities \\ --api-token yourAPIToken \\ --owner yourOrgName # report what is running in a given namespace in the cluster using kubeconfig at $HOME/.kube/config: kosli environment report k8s yourEnvironmentName \\ --namespace your-namespace \\ --api-token yourAPIToken \\ --owner yourOrgName # report what is running in a cluster using kubeconfig at a custom path: kosli environment report k8s yourEnvironmentName \\ --kubeconfig /path/to/kube/config \\ --api-token yourAPIToken \\ --owner yourOrgName "},{"id":45,"href":"/client_reference/kosli_environment_report_lambda/","title":"kosli environment report lambda","section":"Reference","content":" kosli environment report lambda # Report the artifact deployed in an AWS Lambda and its digest to Kosli.\nSynopsis # Report the artifact deployed in an AWS Lambda and its digest to Kosli. To authenticate to AWS, you can either: 1) provide the AWS static credentials via flags or by exporting the equivalent KOSLI env vars (e.g. KOSLI_AWS_KEY_ID) 2) export the AWS env vars (e.g. AWS_ACCESS_KEY_ID). 3) Use a shared config/credentials file under the $HOME/.aws Option 1 takes highest precedence, while option 3 is the lowest. More details can be found here: https://aws.github.io/aws-sdk-go-v2/docs/configuring-sdk/#specifying-credentials kosli environment report lambda ENVIRONMENT-NAME [flags] Flags # Flag Description --aws-key-id string The AWS access key ID. --aws-region string The AWS region. --aws-secret-key string The AWS secret access key. -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. --function-name string The name of the AWS Lambda function. --function-version string [optional] The version of the AWS Lambda function. -h, --help help for lambda Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # report what is running in the latest version AWS Lambda function (AWS auth provided in env variables): export AWS_REGION=yourAWSRegion export AWS_ACCESS_KEY_ID=yourAWSAccessKeyID export AWS_SECRET_ACCESS_KEY=yourAWSSecretAccessKey kosli environment report lambda yourEnvironmentName \\ --function-name yourFunctionName \\ --api-token yourAPIToken \\ --owner yourOrgName # report what is running in a specific version of an AWS Lambda function (AWS auth provided in flags): kosli environment report lambda yourEnvironmentName \\ --function-name yourFunctionName \\ --function-version yourFunctionVersion \\ --aws-key-id yourAWSAccessKeyID \\ --aws-secret-key yourAWSSecretAccessKey \\ --aws-region yourAWSRegion \\ --api-token yourAPIToken \\ --owner yourOrgName "},{"id":46,"href":"/client_reference/kosli_environment_report_s3/","title":"kosli environment report s3","section":"Reference","content":" kosli environment report s3 # Report an artifact deployed in AWS S3 bucket to Kosli.\nSynopsis # Report an artifact deployed in AWS S3 bucket to Kosli. To authenticate to AWS, you can either: 1) provide the AWS static credentials via flags or by exporting the equivalent KOSLI env vars (e.g. KOSLI_AWS_KEY_ID) 2) export the AWS env vars (e.g. AWS_ACCESS_KEY_ID). 3) Use a shared config/credentials file under the $HOME/.aws Option 1 takes highest precedence, while option 3 is the lowest. More details can be found here: https://aws.github.io/aws-sdk-go-v2/docs/configuring-sdk/#specifying-credentials kosli environment report s3 ENVIRONMENT-NAME [flags] Flags # Flag Description --aws-key-id string The AWS access key ID. --aws-region string The AWS region. --aws-secret-key string The AWS secret access key. --bucket string The name of the S3 bucket. -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -h, --help help for s3 Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # report what is running in an AWS S3 bucket (AWS auth provided in env variables): export AWS_REGION=yourAWSRegion export AWS_ACCESS_KEY_ID=yourAWSAccessKeyID export AWS_SECRET_ACCESS_KEY=yourAWSSecretAccessKey kosli environment report s3 yourEnvironmentName \\ --bucket yourBucketName \\ --api-token yourAPIToken \\ --owner yourOrgName # report what is running in an AWS S3 bucket (AWS auth provided in flags): kosli environment report s3 yourEnvironmentName \\ --bucket yourBucketName \\ --aws-key-id yourAWSAccessKeyID \\ --aws-secret-key yourAWSSecretAccessKey \\ --aws-region yourAWSRegion \\ --api-token yourAPIToken \\ --owner yourOrgName\t"},{"id":47,"href":"/client_reference/kosli_environment_report_server/","title":"kosli environment report server","section":"Reference","content":" kosli environment report server # Report artifacts running in a server environment to Kosli.\nSynopsis # Report artifacts running in a server environment to Kosli. You can report directory or file artifacts in one or more server paths.\nkosli environment report server ENVIRONMENT-NAME [flags] Flags # Flag Description -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -h, --help help for server -p, --paths strings The comma separated list of artifact directories. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # report directory artifacts running in a server at a list of paths: kosli environment report server yourEnvironmentName \\ --paths a/b/c,e/f/g \\ --api-token yourAPIToken \\ --owner yourOrgName "},{"id":48,"href":"/client_reference/kosli_expect_deployment/","title":"kosli expect deployment","section":"Reference","content":" kosli expect deployment # Report a deployment of an artifact to an environment to Kosli.\nSynopsis # Report a deployment of an artifact to an environment to Kosli. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).\nkosli expect deployment [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify '--sha256' or '--fingerprint'. -b, --build-url string The url of CI pipeline that built the artifact. (defaulted in some CIs: https://docs.kosli.com/ci-defaults ). -d, --description string [optional] The artifact description. -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -e, --environment string The environment name. -h, --help help for deployment -p, --pipeline string The Kosli pipeline name. --registry-password string [conditional] The docker registry password or access token. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-provider string [conditional] The docker registry provider or url. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-username string [conditional] The docker registry username. Only required if you want to read docker image SHA256 digest from a remote docker registry. -s, --sha256 string [conditional] The SHA256 fingerprint for the artifact. Only required if you don't specify '--artifact-type'. -u, --user-data string [optional] The path to a JSON file containing additional data you would like to attach to this deployment. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. "},{"id":49,"href":"/client_reference/kosli_fingerprint/","title":"kosli fingerprint","section":"Reference","content":" kosli fingerprint # Calculate the SHA256 fingerprint of an artifact.\nSynopsis # Calculate the SHA256 fingerprint of an artifact. Requires artifact type flag to be set. Artifact type can be one of: \u0026quot;file\u0026quot; for files, \u0026quot;dir\u0026quot; for directories, \u0026quot;docker\u0026quot; for docker images.\nkosli fingerprint {IMAGE-NAME | FILE-PATH | DIR-PATH} [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify '--sha256' or '--fingerprint'. -h, --help help for fingerprint --registry-password string [conditional] The docker registry password or access token. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-provider string [conditional] The docker registry provider or url. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-username string [conditional] The docker registry username. Only required if you want to read docker image SHA256 digest from a remote docker registry. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. "},{"id":50,"href":"/client_reference/kosli_pipeline_approval_assert/","title":"kosli pipeline approval assert","section":"Reference","content":" kosli pipeline approval assert # Assert if an artifact in Kosli has been approved for deployment.\nSynopsis # Assert if an artifact in Kosli has been approved for deployment. Exits with non-zero code if artifact has not been approved. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).\nkosli pipeline approval assert [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify '--sha256' or '--fingerprint'. -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -h, --help help for assert -p, --pipeline string The Kosli pipeline name. --registry-password string [conditional] The docker registry password or access token. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-provider string [conditional] The docker registry provider or url. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-username string [conditional] The docker registry username. Only required if you want to read docker image SHA256 digest from a remote docker registry. -s, --sha256 string [conditional] The SHA256 fingerprint for the artifact. Only required if you don't specify '--artifact-type'. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # Assert that a file type artifact has been approved kosli pipeline approval assert FILE.tgz \\ --api-token yourAPIToken \\ --artifact-type file \\ --owner yourOrgName \\ --pipeline yourPipelineName # Assert that an artifact with a provided fingerprint (sha256) has been approved kosli pipeline approval assert \\ --api-token yourAPIToken \\ --owner yourOrgName \\ --pipeline yourPipelineName \\ --sha256 yourSha256 "},{"id":51,"href":"/client_reference/kosli_pipeline_approval_report/","title":"kosli pipeline approval report","section":"Reference","content":" kosli pipeline approval report # Report an approval of deploying an artifact to Kosli.\nSynopsis # Report an approval of deploying an artifact to Kosli. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).\nkosli pipeline approval report [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify '--sha256' or '--fingerprint'. -d, --description string [optional] The approval description. -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -h, --help help for report --newest-commit string [defaulted] The source commit sha for the newest change in the deployment. (default \u0026quot;HEAD\u0026quot;) --oldest-commit string The source commit sha for the oldest change in the deployment. -p, --pipeline string The Kosli pipeline name. --registry-password string [conditional] The docker registry password or access token. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-provider string [conditional] The docker registry provider or url. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-username string [conditional] The docker registry username. Only required if you want to read docker image SHA256 digest from a remote docker registry. --repo-root string [defaulted] The directory where the source git repository is volume-mounted. (default \u0026quot;.\u0026quot;) -s, --sha256 string [conditional] The SHA256 fingerprint for the artifact. Only required if you don't specify '--artifact-type'. -u, --user-data string [optional] The path to a JSON file containing additional data you would like to attach to this approval. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # Report that a file type artifact has been approved for deployment. # The approval is for the last 5 git commits kosli pipeline approval report FILE.tgz \\ --api-token yourAPIToken \\ --artifact-type file \\ --description \u0026#34;An optional description for the approval\u0026#34; \\ --newest-commit $(git rev-parse HEAD) \\ --oldest-commit $(git rev-parse HEAD~5) \\ --owner yourOrgName \\ --pipeline yourPipelineName # Report that an artifact with a provided fingerprint (sha256) has been approved for deployment. # The approval is for the last 5 git commits kosli pipeline approval report \\ --api-token yourAPIToken \\ --description \u0026#34;An optional description for the approval\u0026#34; \\ --newest-commit $(git rev-parse HEAD) \\ --oldest-commit $(git rev-parse HEAD~5) \\ --owner yourOrgName \\ --pipeline yourPipelineName \\ --sha256 yourSha256 "},{"id":52,"href":"/client_reference/kosli_pipeline_approval_request/","title":"kosli pipeline approval request","section":"Reference","content":" kosli pipeline approval request # Request an approval of a deployment of an artifact in Kosli.\nSynopsis # Request an approval of a deployment of an artifact in Kosli. The request should be reviewed in Kosli UI.The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).\nkosli pipeline approval request [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify '--sha256' or '--fingerprint'. -d, --description string [optional] The approval description. -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -h, --help help for request --newest-commit string [defaulted] The source commit sha for the newest change in the deployment. (default \u0026quot;HEAD\u0026quot;) --oldest-commit string The source commit sha for the oldest change in the deployment. -p, --pipeline string The Kosli pipeline name. --registry-password string [conditional] The docker registry password or access token. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-provider string [conditional] The docker registry provider or url. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-username string [conditional] The docker registry username. Only required if you want to read docker image SHA256 digest from a remote docker registry. --repo-root string [defaulted] The directory where the source git repository is volume-mounted. (default \u0026quot;.\u0026quot;) -s, --sha256 string [conditional] The SHA256 fingerprint for the artifact. Only required if you don't specify '--artifact-type'. -u, --user-data string [optional] The path to a JSON file containing additional data you would like to attach to this approval. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # Request that a file type artifact needs approval. # The approval is for the last 5 git commits kosli pipeline approval request FILE.tgz \\ --api-token yourAPIToken \\ --artifact-type file \\ --description \u0026#34;An optional description for the requested approval\u0026#34; \\ --newest-commit $(git rev-parse HEAD) \\ --oldest-commit $(git rev-parse HEAD~5) \\ --owner yourOrgName \\ --pipeline yourPipelineName # Request and approval for an artifact with a provided fingerprint (sha256). # The approval is for the last 5 git commits kosli pipeline approval request \\ --api-token yourAPIToken \\ --description \u0026#34;An optional description for the requested approval\u0026#34; \\ --newest-commit $(git rev-parse HEAD) \\ --oldest-commit $(git rev-parse HEAD~5)\t\\ --owner yourOrgName \\ --pipeline yourPipelineName \\ --sha256 yourSha256 "},{"id":53,"href":"/client_reference/kosli_pipeline_artifact_report_creation/","title":"kosli pipeline artifact report creation","section":"Reference","content":" kosli pipeline artifact report creation # Report an artifact creation to a Kosli pipeline.\nSynopsis # Report an artifact creation to a Kosli pipeline. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).\nkosli pipeline artifact report creation {IMAGE-NAME | FILE-PATH | DIR-PATH} [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify '--sha256' or '--fingerprint'. -b, --build-url string The url of CI pipeline that built the artifact. (defaulted in some CIs: https://docs.kosli.com/ci-defaults ). -u, --commit-url string The url for the git commit that created the artifact. (defaulted in some CIs: https://docs.kosli.com/ci-defaults ). -d, --description string [optional] The artifact description. -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -g, --git-commit string The git commit from which the artifact was created. (defaulted in some CIs: https://docs.kosli.com/ci-defaults ). -h, --help help for creation -p, --pipeline string The Kosli pipeline name. --registry-password string [conditional] The docker registry password or access token. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-provider string [conditional] The docker registry provider or url. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-username string [conditional] The docker registry username. Only required if you want to read docker image SHA256 digest from a remote docker registry. --repo-root string [defaulted] The directory where the source git repository is volume-mounted. (default \u0026quot;.\u0026quot;) -s, --sha256 string [conditional] The SHA256 fingerprint for the artifact. Only required if you don't specify '--artifact-type'. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # Report to a Kosli pipeline that a file type artifact has been created kosli pipeline artifact report creation FILE.tgz \\ --api-token yourApiToken \\ --artifact-type file \\ --build-url https://exampleci.com \\ --commit-url https://github.com/YourOrg/YourProject/commit/yourCommitShaThatThisArtifactWasBuiltFrom \\ --git-commit yourCommitShaThatThisArtifactWasBuiltFrom \\ --owner yourOrgName \\ --pipeline yourPipelineName # Report to a Kosli pipeline that an artifact with a provided fingerprint (sha256) has been created kosli pipeline artifact report creation ANOTHER_FILE.txt \\ --api-token yourApiToken \\ --build-url https://exampleci.com \\ --commit-url https://github.com/YourOrg/YourProject/commit/yourCommitShaThatThisArtifactWasBuiltFrom \\ --git-commit yourCommitShaThatThisArtifactWasBuiltFrom \\ --owner yourOrgName \\ --pipeline yourPipelineName \\ --sha256 yourSha256 "},{"id":54,"href":"/client_reference/kosli_pipeline_artifact_report_evidence_bitbucket-pullrequest/","title":"kosli pipeline artifact report evidence bitbucket-pullrequest","section":"Reference","content":" kosli pipeline artifact report evidence bitbucket-pullrequest # Report a Bitbucket pull request evidence for an artifact in a Kosli pipeline.\nSynopsis # Report a Bitbucket pull request evidence for an artifact in a Kosli pipeline. It checks if a pull request exists for the artifact (based on its git commit) and report the pull-request evidence to the artifact in Kosli. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).\nkosli pipeline artifact report evidence bitbucket-pullrequest [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify '--sha256' or '--fingerprint'. --assert [optional] Exit with non-zero code if no pull requests found for the given commit. --bitbucket-password string Bitbucket password. --bitbucket-username string Bitbucket user name. --bitbucket-workspace string Bitbucket workspace. -b, --build-url string The url of CI pipeline that generated the evidence. (defaulted in some CIs: https://docs.kosli.com/ci-defaults ). --commit string Git commit for which to find pull request evidence. (defaulted in some CIs: https://docs.kosli.com/ci-defaults ). -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -f, --fingerprint string [conditional] The SHA256 fingerprint for the artifact. Only required if you don't specify '--artifact-type'. -h, --help help for bitbucket-pullrequest -n, --name string The name of the evidence -p, --pipeline string The Kosli pipeline name. --registry-password string [conditional] The docker registry password or access token. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-provider string [conditional] The docker registry provider or url. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-username string [conditional] The docker registry username. Only required if you want to read docker image SHA256 digest from a remote docker registry. --repository string Git repository. (defaulted in some CIs: https://docs.kosli.com/ci-defaults ). -u, --user-data string [optional] The path to a JSON file containing additional data you would like to attach to this evidence. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # report a pull request evidence to kosli for a docker image kosli pipeline artifact report evidence bitbucket-pullrequest yourDockerImageName \\ --artifact-type docker \\ --build-url https://exampleci.com \\ --name yourEvidenceName \\ --pipeline yourPipelineName \\ --bitbucket-username yourBitbucketUsername \\ --bitbucket-password yourBitbucketPassword \\ --bitbucket-workspace yourBitbucketWorkspace \\ --commit yourArtifactGitCommit \\ --repository yourBitbucketGitRepository \\ --owner yourOrgName \\ --api-token yourAPIToken # fail if a pull request does not exist for your artifact kosli pipeline artifact report evidence bitbucket-pullrequest yourDockerImageName \\ --artifact-type docker \\ --build-url https://exampleci.com \\ --name yourEvidenceName \\ --pipeline yourPipelineName \\ --bitbucket-username yourBitbucketUsername \\ --bitbucket-password yourBitbucketPassword \\ --bitbucket-workspace yourBitbucketWorkspace \\ --commit yourArtifactGitCommit \\ --repository yourBitbucketGitRepository \\ --owner yourOrgName \\ --api-token yourAPIToken \\ --assert "},{"id":55,"href":"/client_reference/kosli_pipeline_artifact_report_evidence_generic/","title":"kosli pipeline artifact report evidence generic","section":"Reference","content":" kosli pipeline artifact report evidence generic # Report a generic evidence to an artifact in a Kosli pipeline.\nSynopsis # Report a generic evidence to an artifact in a Kosli pipeline. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).\nkosli pipeline artifact report evidence generic [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify '--sha256' or '--fingerprint'. -b, --build-url string The url of CI pipeline that generated the evidence. (defaulted in some CIs: https://docs.kosli.com/ci-defaults ). -C, --compliant [defaulted] Whether the evidence is compliant or not. (default true) -d, --description string [optional] The evidence description. -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -e, --evidence-type string The type of evidence being reported. -h, --help help for generic -p, --pipeline string The Kosli pipeline name. --registry-password string [conditional] The docker registry password or access token. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-provider string [conditional] The docker registry provider or url. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-username string [conditional] The docker registry username. Only required if you want to read docker image SHA256 digest from a remote docker registry. -s, --sha256 string [conditional] The SHA256 fingerprint for the artifact. Only required if you don't specify '--artifact-type'. -u, --user-data string [optional] The path to a JSON file containing additional data you would like to attach to this evidence. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # report a generic evidence about a pre-built docker image: kosli pipeline artifact report evidence generic yourDockerImageName \\ --api-token yourAPIToken \\ --artifact-type docker \\ --build-url https://exampleci.com \\ --evidence-type yourEvidenceType \\ --owner yourOrgName \\ --pipeline yourPipelineName # report a generic evidence about a directory type artifact: kosli pipeline artifact report evidence generic /path/to/your/dir \\ --api-token yourAPIToken \\ --artifact-type dir \\ --build-url https://exampleci.com \\ --evidence-type yourEvidenceType \\ --owner yourOrgName\t\\ --pipeline yourPipelineName # report a generic evidence about an artifact with a provided fingerprint (sha256) kosli pipeline artifact report evidence generic \\ --api-token yourAPIToken \\ --build-url https://exampleci.com \\\t--evidence-type yourEvidenceType \\ --owner yourOrgName \\ --pipeline yourPipelineName \\ --sha256 yourSha256 "},{"id":56,"href":"/client_reference/kosli_pipeline_artifact_report_evidence_github-pullrequest/","title":"kosli pipeline artifact report evidence github-pullrequest","section":"Reference","content":" kosli pipeline artifact report evidence github-pullrequest # Report a Github pull request evidence for an artifact in a Kosli pipeline.\nSynopsis # Report a Github pull request evidence for an artifact in a Kosli pipeline. It checks if a pull request exists for the artifact (based on its git commit) and report the pull-request evidence to the artifact in Kosli. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).\nkosli pipeline artifact report evidence github-pullrequest [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify '--sha256' or '--fingerprint'. --assert [optional] Exit with non-zero code if no pull requests found for the given commit. -b, --build-url string The url of CI pipeline that generated the evidence. (defaulted in some CIs: https://docs.kosli.com/ci-defaults ). --commit string Git commit for which to find pull request evidence. (defaulted in some CIs: https://docs.kosli.com/ci-defaults ). -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -f, --fingerprint string [conditional] The SHA256 fingerprint for the artifact. Only required if you don't specify '--artifact-type'. --github-org string Github organization. --github-token string Github token. -h, --help help for github-pullrequest -n, --name string The name of the evidence -p, --pipeline string The Kosli pipeline name. --registry-password string [conditional] The docker registry password or access token. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-provider string [conditional] The docker registry provider or url. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-username string [conditional] The docker registry username. Only required if you want to read docker image SHA256 digest from a remote docker registry. --repository string Git repository. (defaulted in some CIs: https://docs.kosli.com/ci-defaults ). -u, --user-data string [optional] The path to a JSON file containing additional data you would like to attach to this evidence. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # report a pull request evidence to kosli for a docker image kosli pipeline artifact report evidence github-pullrequest yourDockerImageName \\ --artifact-type docker \\ --build-url https://exampleci.com \\ --name yourEvidenceName \\ --pipeline yourPipelineName \\ --github-token yourGithubToken \\ --github-org yourGithubOrg \\ --commit yourArtifactGitCommit \\ --repository yourGithubGitRepository \\ --owner yourOrgName \\ --api-token yourAPIToken # fail if a pull request does not exist for your artifact kosli pipeline artifact report evidence github-pullrequest yourDockerImageName \\ --artifact-type docker \\ --build-url https://exampleci.com \\ --name yourEvidenceName \\ --pipeline yourPipelineName \\ --github-token yourGithubToken \\ --github-org yourGithubOrg \\ --commit yourArtifactGitCommit \\ --repository yourGithubGitRepository \\ --owner yourOrgName \\ --api-token yourAPIToken \\ --assert "},{"id":57,"href":"/client_reference/kosli_pipeline_artifact_report_evidence_junit/","title":"kosli pipeline artifact report evidence junit","section":"Reference","content":" kosli pipeline artifact report evidence junit # Report JUnit test evidence for an artifact in a Kosli pipeline.\nSynopsis # Report JUnit test evidence for an artifact in a Kosli pipeline. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --fingerprint flag).\nkosli pipeline artifact report evidence junit [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify '--sha256' or '--fingerprint'. -b, --build-url string The url of CI pipeline that generated the evidence. (defaulted in some CIs: https://docs.kosli.com/ci-defaults ). -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -f, --fingerprint string [conditional] The SHA256 fingerprint of the artifact. Only required if you don't specify '--artifact-type'. -h, --help help for junit -n, --name string The name of the evidence -p, --pipeline string The Kosli pipeline name. --registry-password string [conditional] The docker registry password or access token. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-provider string [conditional] The docker registry provider or url. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-username string [conditional] The docker registry username. Only required if you want to read docker image SHA256 digest from a remote docker registry. -R, --results-dir string [defaulted] The path to a folder with JUnit test results. (default \u0026quot;.\u0026quot;) -u, --user-data string [optional] The path to a JSON file containing additional data you would like to attach to this evidence. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # report JUnit test evidence about a file artifact: kosli pipeline artifact report evidence junit FILE.tgz \\ --artifact-type file \\ --name yourEvidenceName \\ --pipeline yourPipelineName \\ --build-url https://exampleci.com \\ --api-token yourAPIToken \\ --owner yourOrgName\t\\ --results-dir yourFolderWithJUnitResults # report JUnit test evidence about an artifact using an available Sha256 digest: kosli pipeline artifact report evidence junit \\ --fingerprint yourSha256 \\ --name yourEvidenceName \\ --pipeline yourPipelineName \\ --build-url https://exampleci.com \\ --api-token yourAPIToken \\ --owner yourOrgName\t\\ --results-dir yourFolderWithJUnitResults "},{"id":58,"href":"/client_reference/kosli_pipeline_artifact_report_evidence_snyk/","title":"kosli pipeline artifact report evidence snyk","section":"Reference","content":" kosli pipeline artifact report evidence snyk # Report Snyk vulnerability scan evidence for an artifact in a Kosli pipeline.\nSynopsis # Report Snyk vulnerability scan evidence for an artifact in a Kosli pipeline. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --fingerprint flag).\nkosli pipeline artifact report evidence snyk [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify '--sha256' or '--fingerprint'. -b, --build-url string The url of CI pipeline that generated the evidence. (defaulted in some CIs: https://docs.kosli.com/ci-defaults ). -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -f, --fingerprint string [conditional] The SHA256 fingerprint of the artifact. Only required if you don't specify '--artifact-type'. -h, --help help for snyk -n, --name string The name of the evidence -p, --pipeline string The Kosli pipeline name. --registry-password string [conditional] The docker registry password or access token. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-provider string [conditional] The docker registry provider or url. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-username string [conditional] The docker registry username. Only required if you want to read docker image SHA256 digest from a remote docker registry. -R, --scan-results string The path to Snyk scan results Json file. -u, --user-data string [optional] The path to a JSON file containing additional data you would like to attach to this evidence. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # report Snyk vulnerability scan evidence about a file artifact: kosli pipeline artifact report evidence snyk FILE.tgz \\ --artifact-type file \\ --name yourEvidenceName \\ --pipeline yourPipelineName \\ --build-url https://exampleci.com \\ --api-token yourAPIToken \\ --owner yourOrgName\t\\ --scan-results yourSnykJSONScanResults # report Snyk vulnerability scan evidence about an artifact using an available Sha256 digest: kosli pipeline artifact report evidence snyk \\ --fingerprint yourSha256 \\ --name yourEvidenceName \\ --pipeline yourPipelineName \\ --build-url https://exampleci.com \\ --api-token yourAPIToken \\ --owner yourOrgName\t\\ --scan-results yourSnykJSONScanResults "},{"id":59,"href":"/client_reference/kosli_pipeline_artifact_report_evidence_test/","title":"kosli pipeline artifact report evidence test","section":"Reference","content":" kosli pipeline artifact report evidence test # Report a JUnit test evidence to an artifact in a Kosli pipeline.\nSynopsis # Report a JUnit test evidence to an artifact in a Kosli pipeline. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).\nkosli pipeline artifact report evidence test [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify '--sha256' or '--fingerprint'. -b, --build-url string The url of CI pipeline that generated the evidence. (defaulted in some CIs: https://docs.kosli.com/ci-defaults ). -d, --description string [optional] The evidence description. -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -e, --evidence-type string The type of evidence being reported. -h, --help help for test -p, --pipeline string The Kosli pipeline name. --registry-password string [conditional] The docker registry password or access token. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-provider string [conditional] The docker registry provider or url. Only required if you want to read docker image SHA256 digest from a remote docker registry. --registry-username string [conditional] The docker registry username. Only required if you want to read docker image SHA256 digest from a remote docker registry. -R, --results-dir string [defaulted] The path to a folder with JUnit test results. (default \u0026quot;/data/junit/\u0026quot;) -s, --sha256 string [conditional] The SHA256 fingerprint for the artifact. Only required if you don't specify '--artifact-type'. -u, --user-data string [optional] The path to a JSON file containing additional data you would like to attach to this evidence. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # report a JUnit test evidence about a file artifact: kosli pipeline artifact report evidence test FILE.tgz \\ --artifact-type file \\ --evidence-type yourEvidenceType \\ --pipeline yourPipelineName \\ --build-url https://exampleci.com \\ --api-token yourAPIToken \\ --owner yourOrgName\t\\ --results-dir yourFolderWithJUnitResults # report a JUnit test evidence about an artifact using an available Sha256 digest: kosli pipeline artifact report evidence test \\ --sha256 yourSha256 \\ --evidence-type yourEvidenceType \\ --pipeline yourPipelineName \\ --build-url https://exampleci.com \\ --api-token yourAPIToken \\ --owner yourOrgName\t\\ --results-dir yourFolderWithJUnitResults "},{"id":60,"href":"/client_reference/kosli_pipeline_declare/","title":"kosli pipeline declare","section":"Reference","content":" kosli pipeline declare # Create or update a Kosli pipeline.\nSynopsis # Create or update a Kosli pipeline. You can provide a JSON pipefile or specify pipeline parameters in flags. The pipefile contains the pipeline metadata and compliance policy (template).\nkosli pipeline declare [flags] Flags # Flag Description --description string [optional] The Kosli pipeline description. -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -h, --help help for declare --pipefile string [deprecated] The path to the JSON pipefile. --pipeline string The name of the pipeline to be created or updated. -t, --template strings [defaulted] The comma-separated list of required compliance controls names. (default [artifact]) --visibility string [defaulted] The visibility of the Kosli pipeline. Valid visibilities are [public, private]. (default \u0026quot;private\u0026quot;) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # create/update a Kosli pipeline without a pipefile: kosli pipeline declare \\ --pipeline yourPipelineName \\ --description yourPipelineDescription \\ --visibility private OR public \\ --template artifact,evidence-type1,evidence-type2 \\ --api-token yourAPIToken \\ --owner yourOrgName # create/update a Kosli pipeline with a pipefile (this is a legacy way which will be removed in the future): kosli pipeline declare \\ --pipefile /path/to/pipefile.json \\ --api-token yourAPIToken \\ --owner yourOrgName The pipefile format is: { \u0026#34;name\u0026#34;: \u0026#34;yourPipelineName\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;yourPipelineDescription\u0026#34;, \u0026#34;visibility\u0026#34;: \u0026#34;public or private\u0026#34;, \u0026#34;template\u0026#34;: [ \u0026#34;artifact\u0026#34;, \u0026#34;evidence-type1\u0026#34;, \u0026#34;evidence-type2\u0026#34; ] } "},{"id":61,"href":"/client_reference/kosli_pipeline_inspect/","title":"kosli pipeline inspect","section":"Reference","content":" kosli pipeline inspect # Inspect the metadata of a specific pipeline.\nSynopsis # Inspect the metadata of a specific pipeline.\nkosli pipeline inspect PIPELINE-NAME [flags] Flags # Flag Description -h, --help help for inspect -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default \u0026quot;table\u0026quot;) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. "},{"id":62,"href":"/client_reference/kosli_pipeline_ls/","title":"kosli pipeline ls","section":"Reference","content":" kosli pipeline ls # List pipelines for an org.\nSynopsis # List pipelines for an org.\nkosli pipeline ls [flags] Flags # Flag Description -h, --help help for ls -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default \u0026quot;table\u0026quot;) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. "},{"id":63,"href":"/client_reference/kosli_search/","title":"kosli search","section":"Reference","content":" kosli search # Search for a git commit or an artifact fingerprint in Kosli.\nSynopsis # Search for a git commit or an artifact fingerprint in Kosli. You can use short git commit or artifact fingerprint shas, but you must provide at least 5 characters.\nkosli search GIT-COMMIT|FINGERPRINT [flags] Flags # Flag Description -h, --help help for search -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default \u0026quot;table\u0026quot;) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. Examples # # Search for a git commit in Kosli kosli search YOUR_GIT_COMMIT \\ --api-token yourApiToken \\ --owner yourOrgName # Search for an artifact fingerprint in Kosli kosli search YOUR_FINGERPRINT \\ --api-token yourApiToken \\ --owner yourOrgName "},{"id":64,"href":"/client_reference/kosli_status/","title":"kosli status","section":"Reference","content":" kosli status # Check the status of Kosli server.\nSynopsis # Check the status of Kosli server. The status is logged and the command always exits with 0 exit code. If you like to assert the Kosli server status, you can use the --assert flag or the \u0026quot;kosli assert status\u0026quot; command.\nkosli status [flags] Flags # Flag Description --assert [optional] Exit with non-zero code if Kosli server is not responding. -h, --help help for status Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. "},{"id":65,"href":"/client_reference/kosli_version/","title":"kosli version","section":"Reference","content":" kosli version # Print the version of Kosli CLI.\nSynopsis # Print the version of Kosli CLI. The output will look something like this: version.BuildInfo{Version:\u0026quot;v0.0.1\u0026quot;, GitCommit:\u0026quot;fe51cd1e31e6a202cba7dead9552a6d418ded79a\u0026quot;, GitTreeState:\u0026quot;clean\u0026quot;, GoVersion:\u0026quot;go1.16.3\u0026quot;}\nVersion is the semantic version of the release. GitCommit is the SHA for the commit that this version was built from. GitTreeState is \u0026quot;clean\u0026quot; if there are no local code changes when this binary was built, and \u0026quot;dirty\u0026quot; if the binary was built from locally modified code. GoVersion is the version of Go that was used to compile Kosli CLI. kosli version [flags] Flags # Flag Description -h, --help help for version -s, --short [optional] Print only the Kosli cli version number. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;kosli\u0026quot;) --debug [optional] Print debug logs to stdout. -H, --host string [defaulted] The Kosli endpoint. (default \u0026quot;https://app.kosli.com\u0026quot;) -r, --max-api-retries int [defaulted] How many times should API calls be retried when the API host is not reachable. (default 3) --owner string The Kosli user or organization. "},{"id":66,"href":"/helm/","title":"Kubernetes Reporter Helm Chart","section":"Welcome to Kosli Docs","content":" k8s-reporter # A Helm chart for installing the Kosli K8S reporter as a cronjob. The chart allows you to create a Kubernetes cronjob and all its necessary RBAC to report running images to Kosli at a given cron schedule.\nPrerequisites # A Kubernetes cluster Helm v3.0+ Installing the chart # Installing from source # You can install the Kosli reporter Helm chart from source code:\ngit clone https://github.com/kosli-dev/cli.git cd reporter/charts/k8s-reporter helm install [RELEASE-NAME] . -f [VALUES-FILE-PATH] Installing from the Helm Repository # To install this chart via the Helm chart repository:\nhelm repo add kosli https://charts.kosli.com/ helm repo update helm install [RELEASE-NAME] kosli/k8s-reporter -f [VALUES-FILE-PATH] Upgrading the chart # Upgrading from source # helm upgrade [RELEASE-NAME] . Upgrading from the Helm chart repository # helm upgrade [RELEASE-NAME] kosli/k8s-reporter Configurations # Key Type Default Description cronSchedule string \u0026quot;*/5 * * * *\u0026quot; the cron schedule at which the reporter is triggered to report to kosli fullnameOverride string \u0026quot;\u0026quot; overrides the fullname used for the created k8s resources. It has higher precedence than nameOverride image.pullPolicy string \u0026quot;IfNotPresent\u0026quot; the kosli reporter image pull policy image.repository string \u0026quot;ghcr.io/kosli-dev/cli\u0026quot; the kosli reporter image repository image.tag string \u0026quot;v0.1.32\u0026quot; the kosli reporter image tag, overrides the image tag whose default is the chart appVersion. kosliApiToken.secretKey string \u0026quot;\u0026quot; the name of the key in the secret data which contains the kosli API token kosliApiToken.secretName string \u0026quot;\u0026quot; the name of the secret containing the kosli API token nameOverride string \u0026quot;\u0026quot; overrides the name used for the created k8s resources. If fullnameOverride is provided, it has higher precedence than this one podAnnotations object {} reporterConfig.dryRun bool false whether the dry run mode is enabled or not. In dry run mode, the reporter logs the reports to stdout and does not send them to kosli. reporterConfig.kosliEnvironmentName string \u0026quot;\u0026quot; the name of kosli environment that the k8s cluster/namespace correlates to reporterConfig.kosliOwner string \u0026quot;\u0026quot; the name of the kosli owner (Org) reporterConfig.namespaces string \u0026quot;\u0026quot; the namespaces which represent the environment. It is a comma separated list of namespace name regex patterns. e.g. ^prod$,^dev-* reports for the prod namespace and any namespace that starts with dev- leave this unset if you want to report what is running in the entire cluster resources.limits.cpu string \u0026quot;100m\u0026quot; the cpu limit resources.limits.memory string \u0026quot;256Mi\u0026quot; the memory limit resources.requests.memory string \u0026quot;64Mi\u0026quot; the memory request serviceAccount.annotations object {} annotations to add to the service account serviceAccount.create bool true specifies whether a service account should be created serviceAccount.name string \u0026quot;\u0026quot; the name of the service account to use. If not set and create is true, a name is generated using the fullname template Autogenerated from chart metadata using helm-docs v1.5.0 "}]