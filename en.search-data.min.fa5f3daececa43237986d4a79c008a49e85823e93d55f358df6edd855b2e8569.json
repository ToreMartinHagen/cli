[{"id":0,"href":"/getting_started/","title":"Getting Started","section":"","content":" Getting Started # Here you will learn how to start using Kosli for one of our most common use cases: k8s as the environment where you deploy your application, GitHub as the repository, and GitHub Actions as the CI.\nFollow each section to get started!\n"},{"id":1,"href":"/getting_started/prerequisites/","title":"Prerequisites","section":"Getting Started","content":" Prerequisites # To follow the \u0026quot;Getting Started\u0026quot; guide you'll need to set up a few things:\nKosli account GitHub repository where you'll store your code (you can fork our demo repository) Your own k8s cluster where you'll deploy your application hub.docker.com account GitHub # If you want to use out workflow examples, there's a few things you need to configure in your GitHub repository - you can fork the github-k8s-demo repository, create your own from scratch, or use an already existing project.\nWorkflows in github-k8s-demo repository are complete version of workflows we're developing in this guide.\nIn our example we use Google Cloud to host k8s cluster and we rely on google-github-actions/get-gke-credentials action to authenticate to GKE cluster via a kubeconfig file. If you're hosting your k8s cluster somewhere you need to use a different action.\nSecrets # Create following Actions Secrets in your repository on GitHub:\nMERKELY_API_TOKEN - you can find the Kosli API Token under your profile at https://app.merkely.com/ (click on your avatar in the right top corner of the window and select 'Profile') GCP_K8S_CREDENTIALS - service account credentials (.json file), with k8s access permissions DOCKERHUB_TOKEN - your DockerHub Access Token (you can create one at hub.docker.com, under Account Settings \u0026gt; Security) Once these are in place you're ready to go!\n"},{"id":2,"href":"/concepts/","title":"Concepts","section":"","content":" Concepts # "},{"id":3,"href":"/concepts/environments/","title":"Environments","section":"Concepts","content":" Environments # Environments in Kosli provide a place to track how your systems change over time.\n"},{"id":4,"href":"/concepts/pipelines/","title":"Pipelines","section":"Concepts","content":" Pipeline # Environments in Kosli provide a place to track events in your CI pipelines.\n"},{"id":5,"href":"/client_reference/","title":"Kosli Commands","section":"","content":" Kosli Client Reference # "},{"id":6,"href":"/helm/","title":"Helm","section":"","content":" Helm # "},{"id":7,"href":"/getting_started/report_environment/","title":"Report Environment","section":"Getting Started","content":" Report Environment # Create an environment in Kosli # The first thing we need to configure is an environment in Kosli.\nKosli Environments is where you'll be reporting the state of your actual environments, like staging or production.\nWhen you log in to Kosli the Environments page is the first thing you see. If you clicked around before reading this guide you'll find a link to Environments on the left side of the window in Kosli.\nClick the \u0026quot;Add environment\u0026quot; button to create a new Kosli environment. On the next page you'll have to select the type - for the purpose of this guide we'll use 'Kubernetes cluster'.\nNext, you need to give your environment a name - it doesn't have to be the same name you use for the actual environment, but it certainly helps to identify it in the future. In this guide we'll use github-k8s-test as the name of the environment. You also need to provide the description of the environment. You'll find this helpful as the number of your environments increases.\nClick \u0026quot;Save Environment\u0026quot; and you're ready to move on to the next step.\nReport an environment # Time to implement an actual reporting of what's running in your k8s cluster - which means we need to reach out to the cluster and check which docker images were used to run the containers that are currently up in given namespace.\nCLI # You report the environment using Kosli CLI tool.\nYou need to download a correct package depending on the architecture of the machine you use to run the CLI.\nYou can run the command manually on any machine that can access your k8s cluster, but it is much better to automate the reporting from the start, and we'll use GitHub Actions for that.\nGitHub workflow # There is a few things you'll need to adjust in the workflow below, so it can work for you:\nK8S_CLUSTER_NAME and K8S_GCP_ZONE should refer to your cluster setup and NAMESPACE should refer to a namespace you will to deploy your application to MERKELY_OWNER is your Kosli username (which will be the same as the GitHub account you used to log into Kosli) With these ready you can try to run the following workflow:\nname: Report environment # You can choose to run the reporting on schedule but for # the purpose of setting it up you may also want to be able # to run it manually, so we added \u0026#39;workflow_dispatch\u0026#39; on: schedule: - cron: \u0026#39;*/5 * * * *\u0026#39; workflow_dispatch: env: K8S_CLUSTER_NAME: merkely-dev K8S_GCP_ZONE: europe-west1 NAMESPACE: github-k8s-demo MERKELY_OWNER: demo MERKELY_ENVIRONMENT: github-k8s-test MERKELY_CLI_VERSION: \u0026#34;1.5.0\u0026#34; jobs: report-env: runs-on: ubuntu-20.04 steps: - name: Download Kosli cli client id: download-merkely-cli run: | wget https://github.com/kosli-dev/cli/releases/download/v${{ env.MERKELY_CLI_VERSION }}/merkely_${{ env.MERKELY_CLI_VERSION }}_linux_amd64.tar.gz tar -xf merkely_${{ env.MERKELY_CLI_VERSION }}_linux_amd64.tar.gz kosli - name: auth uses: google-github-actions/auth@v0.4.0 with: credentials_json: ${{ secrets.GCP_K8S_CREDENTIALS }} - name: connect-to-k8s uses: google-github-actions/get-gke-credentials@main with: cluster_name: ${{ env.K8S_CLUSTER_NAME }} location: ${{ env.K8S_GCP_ZONE }} - name: report to Kosli env: MERKELY_API_TOKEN: ${{ secrets.MERKELY_API_TOKEN }} run: ./merkely environment report k8s --kubeconfig ${{ env.KUBECONFIG }} -n ${{ env.NAMESPACE }} ${{ env.MERKELY_ENVIRONMENT }} Once the workflow runs successfully, and there is already something running in your cluster, you will see the information about it in github-k8s-test environment in Kosli (You'll find it under Environments section).\nIf there is nothing running in your cluster we'll build and deploy an artifact in the next step.\nIf you had something running in the given namespace, here is what you should see in your github-k8s-test environment in Kosli if the pipeline succeeds (triggered either by cron or - if you don't want to wait - manually). The name of the artifact will likely be a different one:\nReporting an environment is an easy way to get the answer to a question like: \u0026quot;What is running in production?\u0026quot;. So, naturally, the next thing you may want to figure out is: \u0026quot;Is it verified?\u0026quot;.\nFor now, whatever is running there, will be incompliant since we don't know anything else about the artifact just yet, but reporting your artifacts to Kosli will take us one step further.\n"},{"id":8,"href":"/getting_started/report_artifact/","title":"Report Artifact","section":"Getting Started","content":" Report Artifact # Every time you build an artifact - in our case a Docker image - you can store (and easily access) all the information you have about it in Kosli. We call it reporting an artifact.\nArtifacts in Kosli are reported to Kosli Pipelines. You can find the Pipelines section just below Environments.\nCreate a pipeline # To report an artifact from your GitHub workflow you need to create a Kosli pipeline first. Every time your workflow builds a new version of Docker image it will be reported to the same Kosli pipeline. Kosli pipeline has to exist before you can start reporting artifacts to it, and you can make the creation of a pipeline a part of the build workflow. (It's safe - rerunning pipeline creation command won't erase existing entries.) In this guide we're creating a Kosli pipeline called github-k8s-demo and that's the name you'll see in the code.\nAs it was in the case of reporting environment, we need to download Kosli CLI in the workflow, to be able to run the commands.\nReport an artifact # Here is a complete workflow that takes care of CLI download, pipeline creation and docker image build and reports it to the Kosli pipeline.\nRemember:\nK8S_CLUSTER_NAME, K8S_GCP_ZONE and NAMESPACE should be the same you used in Report Environment step IMAGE should contain your dockerhub username (instead of our colleague's Ewelina username). You also need to use the correct username in Login to hub.docker.com step MERKELY_OWNER should be the same your Kosli username. In the workflow you'll find comments about specific parts of it.\nname: Build and Deploy on: push: env: # gke k8s cluster variables K8S_CLUSTER_NAME: merkely-dev K8S_GCP_ZONE: europe-west1 NAMESPACE: github-k8s-demo # name of the docker image to build, replace with the name # that will contain your dockerhub id IMAGE: ewelinawilkosz/github-k8s-demo # kosli variables - will be picked up by commands MERKELY_OWNER: demo MERKELY_PIPELINE: github-k8s-demo MERKELY_ENVIRONMENT: github-k8s-test MERKELY_CLI_VERSION: \u0026#34;1.5.0\u0026#34; jobs: build-report: runs-on: ubuntu-20.04 # outputs to be passed on to \u0026#39;deploy\u0026#39; job below outputs: tag: ${{ steps.prep.outputs.tag }} tagged-image: ${{ steps.prep.outputs.tagged-image }} image-digest: ${{ steps.digest-prep.outputs.image-digest }} steps: # checkout code - uses: actions/checkout@v2 with: fetch-depth: 1 - name: Prepare id: prep run: | TAG=$(echo $GITHUB_SHA | head -c7) TAGGED_IMAGE=${{ env.IMAGE }}:${TAG} echo \u0026#34;TAG=${TAG}\u0026#34; \u0026gt;\u0026gt; ${GITHUB_ENV} echo \u0026#34;TAGGED_IMAGE=${TAGGED_IMAGE}\u0026#34; \u0026gt;\u0026gt; ${GITHUB_ENV} echo ::set-output name=tag::${TAG} echo ::set-output name=tagged-image::${TAGGED_IMAGE} # This is the a separate action that sets up buildx (buildkit) runner - name: Set up Docker Buildx uses: docker/setup-buildx-action@v1 # use your own username and configured token to log into dockerhub - name: Login to hub.docker.com uses: docker/login-action@v1 with: username: ewelinawilkosz password: ${{ secrets.DOCKERHUB_TOKEN }} - name: Build and push Docker image id: docker_build uses: docker/build-push-action@v2 with: push: true tags: ${{ env.TAGGED_IMAGE }} no-cache: true # the digest will be passed to kosli commands using \u0026#39;sha256\u0026#39; flags - name: Make the image digest available for following steps id: digest-prep run: | ARTIFACT_SHA=$( echo ${{ steps.docker_build.outputs.digest }} | sed \u0026#39;s/.*://\u0026#39;) echo \u0026#34;DIGEST=$ARTIFACT_SHA\u0026#34; \u0026gt;\u0026gt; ${GITHUB_ENV} echo ::set-output name=image-digest::${ARTIFACT_SHA} - name: Download Kosli cli client id: download-kosli-cli run: | wget https://github.com/kosli-dev/cli/releases/download/v${{ env.MERKELY_CLI_VERSION }}/merkely_${{ env.MERKELY_CLI_VERSION }}_linux_amd64.tar.gz tar -xf merkely_${{ env.MERKELY_CLI_VERSION }}_linux_amd64.tar.gz kosli - name: Declare pipeline in Kosli env: MERKELY_API_TOKEN: ${{ secrets.MERKELY_API_TOKEN }} run: ./kosli pipeline declare --description \u0026#34;Kosli server\u0026#34; --pipeline ${{ env.MERKELY_PIPELINE }} --template \u0026#34;artifact\u0026#34; - name: Report Docker image in Kosli env: MERKELY_API_TOKEN: ${{ secrets.MERKELY_API_TOKEN }} run: ./kosli pipeline artifact report creation ${{ env.TAGGED_IMAGE }} --sha256 ${{ env.DIGEST }} # deploy review environment deploy: needs: [build-report] runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 with: fetch-depth: 1 - id: auth uses: google-github-actions/auth@v0.4.0 with: credentials_json: ${{ secrets.GCP_K8S_CREDENTIALS }} - id: connect-to-k8s uses: google-github-actions/get-gke-credentials@main with: cluster_name: ${{ env.K8S_CLUSTER_NAME }} location: ${{ env.K8S_GCP_ZONE }} - uses: azure/setup-kubectl@v1 id: install-kubectl # The KUBECONFIG env var is automatically exported and picked up by kubectl. - name: Ensure review env namespace run: | kubectl get namespace ${{ env.NAMESPACE }} || kubectl create namespace ${{ env.NAMESPACE }} - name: Deploy run: | sed -i \u0026#39;s/TAG/${{ needs.build-report.outputs.tag }}/g\u0026#39; k8s/deployment.yaml kubectl apply -f k8s/deployment.yaml -n ${{ env.NAMESPACE }} Once the workflow runs succesfully, you should see it reported in Kosli github-k8s-demo pipeline:\nWith more details once you click on it:\nYou will also notice a change in the state of your github-k8s-test environment (if the environment reporting workflow ran successfully): it is still incompliant, but now the artifact running there has provenance (you can see the name of Kosli pipeline: github-k8s-demo that the artifact was reported to, in a grey, pill shaped field) so we can check how it was built:\nNow that your aritfact reporting works the only thing missing is reporting the deployment.\n"},{"id":9,"href":"/getting_started/report_deployment/","title":"Report Deployment","section":"Getting Started","content":" Report Deployment # In previous sections we covered reporting environment - so you know what's running in your cluster, and reporting artifact - so you know what you're building (and - in the future, if you add more controls, you'll know if it's verified).\nThe missing piece is figuring out how your artifact ended up in the environment, and that's why, when our workflow deploys to an environment, we report the deployment to that environment to Kosli.\nWe'll extend the workflow from previos section with two steps, to add the reporting at the end the deploy job:\n- name: Download Kosli cli client id: download-merkely-cli run: | wget https://github.com/kosli-dev/cli/releases/download/v${{ env.MERKELY_CLI_VERSION }}/merkely_${{ env.MERKELY_CLI_VERSION }}_linux_amd64.tar.gz tar -xf merkely_${{ env.MERKELY_CLI_VERSION }}_linux_amd64.tar.gz kosli - name: Report deployment env: MERKELY_API_TOKEN: ${{ secrets.MERKELY_API_TOKEN }} run: ./kosli pipeline deployment report ${{ needs.build-report.outputs.tagged-image }} --sha256 ${{ needs.build-report.outputs.image-digest }} The main.yml workflow in the github-k8s-demo repository is a complete workflow for reporting an artifact and deployment to Kosli.\nOnce the pipeline runs succesfully you should see new entry in your github-k8s-demo pipeline in Kosli, this time with deployment linked in the last column:\nBefore we check the environment we need to - again - wait for the environment reporting workflow to kick in (or run it manually) and when it succeeds we can check the status of the environment.\nThis time it should be compliant - which means we know where the artifact is coming from and how it ended up in the environment:\nIn our example, deployment is part of the same workflow as build. In real life you may want to deploy in a seperate pipeline, especially if you're deploying to your production environment. Once you learn how to use Kosli with this example it should be easier to add required steps to your existing workflows, wherever you need them.\nVisit Kosli Commands section to learn more about available Merkeli CLI commands.\n"},{"id":10,"href":"/helm/helm_chart/","title":"Helm Chart","section":"Helm","content":" k8s-reporter # A Helm chart for installing the Kosli K8S reporter as a cronjob. The chart allows you to create a Kubernetes cronjob and all its necessary RBAC to report running images to Kosli at a given cron schedule.\nPrerequisites # A Kubernetes cluster Helm v3.0+ Installing the chart # Installing from source # You can install the Kosli reporter Helm chart from source code:\ngit clone https://github.com/kosli-dev/cli.git cd reporter/charts/k8s-reporter helm install [RELEASE-NAME] . -f [VALUES-FILE-PATH] Installing from the Helm Repository # To install this chart via the Helm chart repository:\nhelm repo add kosli https://charts.merkely.com/ helm repo update helm install [RELEASE-NAME] kosli/k8s-reporter -f [VALUES-FILE-PATH] Upgrading the chart # Upgrading from source # helm upgrade [RELEASE-NAME] . Upgrading from the Helm chart repository # helm upgrade [RELEASE-NAME] kosli/k8s-reporter Configurations # Key Type Default Description cronSchedule string \u0026quot;*/5 * * * *\u0026quot; the cron schedule at which the reporter is triggered to report to kosli fullnameOverride string \u0026quot;\u0026quot; overrides the fullname used for the created k8s resources. It has higher precedence than nameOverride image.pullPolicy string \u0026quot;IfNotPresent\u0026quot; the kosli reporter image pull policy image.repository string \u0026quot;ghcr.io/kosli-dev/merkely-cli\u0026quot; the kosli reporter image repository image.tag string \u0026quot;v1.1.0\u0026quot; the kosli reporter image tag, overrides the image tag whose default is the chart appVersion. kosliApiToken.secretKey string \u0026quot;\u0026quot; the name of the key in the secret data which containts the kosli API token kosliApiToken.secretName string \u0026quot;\u0026quot; the name of the secret containing the kosli API token nameOverride string \u0026quot;\u0026quot; overrides the name used for the created k8s resources. If fullnameOverride is provided, it has higher precedence than this one podAnnotations object {} reporterConfig.dryRun bool false whether the dry run mode is enabled or not. In dry run mode, the reporter logs the reports to stdout and does not send them to kosli. reporterConfig.kosliEnvironmentName string \u0026quot;\u0026quot; the name of kosli environment that the k8s cluster/namespace correlates to reporterConfig.kosliOwner string \u0026quot;\u0026quot; the name of the kosli owner (Org) reporterConfig.namespaces string \u0026quot;\u0026quot; the namespaces which represent the environment. It is a comma separated list of namespace name regex patterns. e.g. ^prod$,^dev-* reports for the prod namespace and any namespace that starts with dev- leave this unset if you want to report what is running in the entire cluster resources.limits.cpu string \u0026quot;100m\u0026quot; the cpu limit resources.limits.memory string \u0026quot;256Mi\u0026quot; the memory limit resources.requests.memory string \u0026quot;64Mi\u0026quot; the memory request serviceAccount.annotations object {} annotations to add to the service account serviceAccount.create bool true specifies whether a service account should be created serviceAccount.name string \u0026quot;\u0026quot; the name of the service account to use. If not set and create is true, a name is generated using the fullname template Autogenerated from chart metadata using helm-docs v1.5.0\n"},{"id":11,"href":"/ci-defaults/","title":"Defaulted command flags from CI","section":"","content":" Defaulted command flags from CI # The following flags are defaulted as follows in the CI list below:\nBitbucket Cloud Flag Description --build-url https://bitbucket.org/${BITBUCKET_WORKSPACE}/${BITBUCKET_REPO_SLUG}/addon/pipelines/home#!/results/${BITBUCKET_BUILD_NUMBER} --commit-url https://bitbucket.org/${BITBUCKET_WORKSPACE}/${BITBUCKET_REPO_SLUG}/commits/${BITBUCKET_COMMIT} --commit ${BITBUCKET_COMMIT} --git-commit ${BITBUCKET_COMMIT} --repository ${BITBUCKET_REPO_SLUG} --bitbucket-workspace ${BITBUCKET_WORKSPACE} Github Flag Description --build-url ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} --commit-url ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA} --commit ${GITHUB_SHA} --git-commit ${GITHUB_SHA} --repository ${GITHUB_REPOSITORY} --github-org ${GITHUB_REPOSITORY_OWNER} Teamcity Flag Description --git-commit ${BUILD_VCS_NUMBER} "},{"id":12,"href":"/client_reference/kosli/","title":"kosli","section":"Kosli Commands","content":" kosli # The Kosli CLI.\nSynopsis # The Kosli evidence reporting CLI.\nEnvironment variables:\nName Description $MERKELY_API_TOKEN set the Kosli API token. $MERKELY_OWNER set the Kosli Pipeline Owner. $MERKELY_HOST set the Kosli host. $MERKELY_DRY_RUN indicate whether or not Kosli CLI is running in Dry Run mode. $MERKELY_MAX_API_RETRIES set the maximum number of API calling retries when the API host is not reachable. $MERKELY_CONFIG_FILE set the path to Kosli config file where you can set your options. Flags # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -h, --help help for kosli -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. "},{"id":13,"href":"/client_reference/kosli_assert_bitbucket-pullrequest/","title":"kosli assert bitbucket-pullrequest","section":"Kosli Commands","content":" kosli assert bitbucket-pullrequest # Assert if a Bitbucket pull request for the commit which produces an artifact exists.\nSynopsis # Check if a pull request exists in Bitbucket for an artifact (based on the git commit that produced it) and fail if it does not.\nkosli assert bitbucket-pullrequest [flags] Flags # Flag Description --bitbucket-password string Bitbucket password. --bitbucket-username string Bitbucket user name. --bitbucket-workspace string Bitbucket workspace. --commit string Git commit for which to find pull request evidence. -h, --help help for bitbucket-pullrequest --repository string Git repository. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. "},{"id":14,"href":"/client_reference/kosli_assert_github-pullrequest/","title":"kosli assert github-pullrequest","section":"Kosli Commands","content":" kosli assert github-pullrequest # Assert if a Github pull request for the commit which produces an artifact exists.\nSynopsis # Check if a pull request exists in Github for an artifact (based on the git commit that produced it) and fail if it does not.\nkosli assert github-pullrequest [flags] Flags # Flag Description --commit string Git commit for which to find pull request evidence. --github-org string Github organization. --github-token string Github token. -h, --help help for github-pullrequest --repository string Git repository. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. "},{"id":15,"href":"/client_reference/kosli_assert_status/","title":"kosli assert status","section":"Kosli Commands","content":" kosli assert status # Assert the status of Kosli server. Exits with non-zero code if Kosli server down.\nSynopsis # Assert the status of Kosli server. Exits with non-zero code if Kosli server down.\nkosli assert status [flags] Flags # Flag Description -h, --help help for status Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. "},{"id":16,"href":"/client_reference/kosli_environment_allowedartifacts_add/","title":"kosli environment allowedartifacts add","section":"Kosli Commands","content":" kosli environment allowedartifacts add # Add an artifact to an environment's allowlist.\nSynopsis # Add an artifact to an environment's allowlist. The artifact SHA256 fingerprint is calculated and reported or, alternatively, can be provided directly.\nkosli environment allowedartifacts add ARTIFACT-NAME-OR-PATH [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify 'sha256' -e, --environment string The environment name for which the artifact is allowlisted. -h, --help help for add --reason string The reason why this artifact is allowlisted. --registry-password string The docker registry password or access token. --registry-provider string The docker registry provider or url. --registry-username string The docker registry username. -s, --sha256 string The SHA256 fingerprint for the artifact. Only required if you don't specify 'artifact-type'. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. "},{"id":17,"href":"/client_reference/kosli_environment_declare/","title":"kosli environment declare","section":"Kosli Commands","content":" kosli environment declare # Declare or update a Kosli environment\nSynopsis # Declare or update a Kosli environment.\nkosli environment declare [flags] Flags # Flag Description -d, --description string [optional] The environment description. -t, --environment-type string The type of environment. Valid options are: [K8S, ECS, server, S3] -h, --help help for declare -n, --name string The name of environment to be created. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. Examples # # declare (or update) a Kosli environment: kosli environment declare --name yourEnvironmentName \\ --environment-type K8S \\ --description \u0026#34;my new env\u0026#34; \\ --api-token yourAPIToken \\ --owner yourOrgName "},{"id":18,"href":"/client_reference/kosli_environment_diff/","title":"kosli environment diff","section":"Kosli Commands","content":" kosli environment diff # Diff snapshots.\nSynopsis # Diff snapshots.\nkosli environment diff [SNAPPISH_1] [SNAPPISH_2] [flags] Flags # Flag Description -h, --help help for diff -j, --json Print environment info as json. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. "},{"id":19,"href":"/client_reference/kosli_environment_log/","title":"kosli environment log","section":"Kosli Commands","content":" kosli environment log # Show log of snapshots.\nSynopsis # Show log of snapshots.\nkosli environment log [ENVIRONMENT-NAME] [flags] Flags # Flag Description -h, --help help for log -j, --json Print environment info as json. -n, --number int Print environment info as json. (default 5) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. "},{"id":20,"href":"/client_reference/kosli_environment_ls/","title":"kosli environment ls","section":"Kosli Commands","content":" kosli environment ls # List environments.\nSynopsis # List environments.\nkosli environment ls [ENVIRONMENT-NAME] [flags] Flags # Flag Description -h, --help help for ls -j, --json Print environment info as json. -l, --long Print long environment info. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. "},{"id":21,"href":"/client_reference/kosli_environment_report_ecs/","title":"kosli environment report ecs","section":"Kosli Commands","content":" kosli environment report ecs # Report images data from AWS ECS cluster to Kosli.\nSynopsis # List the artifacts deployed in an AWS ECS cluster and their digests and report them to Kosli.\nkosli environment report ecs env-name [flags] Flags # Flag Description -C, --cluster string The name of the ECS cluster. -h, --help help for ecs -s, --service-name string The name of the ECS service. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. Examples # # report what is running in an entire AWS ECS cluster: export AWS_REGION=yourAWSRegion export AWS_ACCESS_KEY_ID=yourAWSAccessKeyID export AWS_SECRET_ACCESS_KEY=yourAWSSecretAccessKey kosli environment report ecs yourEnvironmentName \\ --api-token yourAPIToken \\ --owner yourOrgName "},{"id":22,"href":"/client_reference/kosli_environment_report_k8s/","title":"kosli environment report k8s","section":"Kosli Commands","content":" kosli environment report k8s # Report images data from specific namespace(s) or entire cluster to Kosli.\nSynopsis # List the artifacts deployed in the k8s environment and their digests and report them to Kosli.\nkosli environment report k8s [-n namespace | -x namespace]... [-k /path/to/kube/config] [-i infrastructure-identifier] env-name [flags] Flags # Flag Description -x, --exclude-namespace strings The comma separated list of namespaces regex patterns NOT to report artifacts info from. Can't be used together with --namespace. -h, --help help for k8s -k, --kubeconfig string The kubeconfig path for the target cluster. (default \u0026quot;$HOME/.kube/config\u0026quot;) -n, --namespace strings The comma separated list of namespaces regex patterns to report artifacts info from. Can't be used together with --exclude-namespace. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. Examples # # report what is running in an entire cluster using kubeconfig at $HOME/.kube/config: kosli environment report k8s yourEnvironmentName \\ --api-token yourAPIToken \\ --owner yourOrgName # report what is running in an entire cluster using kubeconfig at $HOME/.kube/config (with global flags defined in environment or in a config file): export MERKELY_API_TOKEN=yourAPIToken export MERKELY_OWNER=yourOrgName kosli environment report k8s yourEnvironmentName # report what is running in an entire cluster excluding some namespaces using kubeconfig at $HOME/.kube/config: kosli environment report k8s yourEnvironmentName \\ --exclude-namespace kube-system,utilities \\ --api-token yourAPIToken \\ --owner yourOrgName # report what is running in a given namespace in the cluster using kubeconfig at $HOME/.kube/config: kosli environment report k8s yourEnvironmentName \\ --namespace your-namespace \\ --api-token yourAPIToken \\ --owner yourOrgName # report what is running in a cluster using kubeconfig at a custom path: kosli environment report k8s yourEnvironmentName \\ --kubeconfig /path/to/kube/config \\ --api-token yourAPIToken \\ --owner yourOrgName "},{"id":23,"href":"/client_reference/kosli_environment_report_lambda/","title":"kosli environment report lambda","section":"Kosli Commands","content":" kosli environment report lambda # Report artifact from AWS Lambda to Kosli.\nSynopsis # Report the artifact deployed in an AWS Lambda and its digest to Kosli.\nkosli environment report lambda env-name [flags] Flags # Flag Description --aws-key-id string The AWS access key ID --aws-region string The AWS region --aws-secret-key string The AWS secret key --function-name string The name of the AWS Lambda function. --function-version string [optional] The version of the AWS Lambda function. -h, --help help for lambda Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. Examples # # report what is running in the latest version AWS Lambda function (AWS auth provided in env variables): export AWS_REGION=yourAWSRegion export AWS_ACCESS_KEY_ID=yourAWSAccessKeyID export AWS_SECRET_ACCESS_KEY=yourAWSSecretAccessKey kosli environment report lambda myEnvironment \\ --function-name yourFunctionName \\ --api-token yourAPIToken \\ --owner yourOrgName # report what is running in a specific version of an AWS Lambda function (AWS auth provided in flags): kosli environment report lambda myEnvironment \\ --function-name yourFunctionName \\ --function-version yourFunctionVersion \\ --aws-key-id yourAWSAccessKeyID \\ --aws-secret-key yourAWSSecretAccessKey \\ --aws-region yourAWSRegion \\ --api-token yourAPIToken \\ --owner yourOrgName "},{"id":24,"href":"/client_reference/kosli_environment_report_s3/","title":"kosli environment report s3","section":"Kosli Commands","content":" kosli environment report s3 # Report artifact from AWS S3 bucket to Kosli.\nSynopsis # Report the artifact deployed in an AWS S3 bucket and its digest to Kosli.\nkosli environment report s3 env-name [flags] Flags # Flag Description --aws-key-id string The AWS access key ID --aws-region string The AWS region --aws-secret-key string The AWS secret key --bucket string The name of the S3 bucket. -h, --help help for s3 Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. Examples # # report what is running in an AWS S3 bucket (AWS auth provided in env variables): export AWS_REGION=yourAWSRegion export AWS_ACCESS_KEY_ID=yourAWSAccessKeyID export AWS_SECRET_ACCESS_KEY=yourAWSSecretAccessKey kosli environment report s3 yourEnvironmentName \\ --bucket yourBucketName \\ --api-token yourAPIToken \\ --owner yourOrgName # report what is running in an AWS S3 bucket (AWS auth provided in flags): kosli environment report s3 yourEnvironmentName \\ --bucket yourBucketName \\ --aws-key-id yourAWSAccessKeyID \\ --aws-secret-key yourAWSSecretAccessKey \\ --aws-region yourAWSRegion \\ --api-token yourAPIToken \\ --owner yourOrgName\t"},{"id":25,"href":"/client_reference/kosli_environment_report_server/","title":"kosli environment report server","section":"Kosli Commands","content":" kosli environment report server # Report directory or file artifacts data in the given list of paths to Kosli.\nSynopsis # List the artifacts deployed in a server environment and their digests and report them to Kosli.\nkosli environment report server [-p /path/of/artifacts/directory] [-i infrastructure-identifier] env-name [flags] Flags # Flag Description -h, --help help for server -p, --paths strings The comma separated list of artifact directories. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. Examples # # report directory artifacts running in a server at a list of paths: kosli environment report server yourEnvironmentName \\ --paths a/b/c, e/f/g \\ --api-token yourAPIToken \\ --owner yourOrgName "},{"id":26,"href":"/client_reference/kosli_fingerprint/","title":"kosli fingerprint","section":"Kosli Commands","content":" kosli fingerprint # Print the SHA256 fingerprint of an artifact.\nSynopsis # Print the SHA256 fingerprint of an artifact. Requires artifact type flag to be set. Artifact type can be one of: \u0026quot;file\u0026quot; for files, \u0026quot;dir\u0026quot; for directories, \u0026quot;docker\u0026quot; for docker images.\nkosli fingerprint [ARTIFACT-NAME-OR-PATH] [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify 'sha256' -h, --help help for fingerprint --registry-password string The docker registry password or access token. --registry-provider string The docker registry provider or url. --registry-username string The docker registry username. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. "},{"id":27,"href":"/client_reference/kosli_pipeline_approval_assert/","title":"kosli pipeline approval assert","section":"Kosli Commands","content":" kosli pipeline approval assert # Assert if an artifact in Kosli has been approved for deployment.\nSynopsis # Assert if an artifact in Kosli has been approved for deployment. Exits with non-zero code if artifact has not been approved. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).\nkosli pipeline approval assert [ARTIFACT-NAME-OR-PATH] [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify 'sha256' -h, --help help for assert -p, --pipeline string The Kosli pipeline name. --registry-password string The docker registry password or access token. --registry-provider string The docker registry provider or url. --registry-username string The docker registry username. -s, --sha256 string The SHA256 fingerprint for the artifact. Only required if you don't specify 'artifact-type'. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. Examples # # Assert that a file tyoe artifact has been approved kosli pipeline approval assert FILE.tgz \\ --api-token yourAPIToken \\ --artifact-type file \\ --owner yourOrgName \\ --pipeline yourPipelineName # Assert that an artifact with a provided fingerprint (sha256) has been approved kosli pipeline approval assert \\ --api-token yourAPIToken \\ --owner yourOrgName \\ --pipeline yourPipelineName \\ --sha256 yourSha256 "},{"id":28,"href":"/client_reference/kosli_pipeline_approval_report/","title":"kosli pipeline approval report","section":"Kosli Commands","content":" kosli pipeline approval report # Report to Kosli an approval of deploying an artifact.\nSynopsis # Report to Kosli an approval of deploying an artifact. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).\nkosli pipeline approval report [ARTIFACT-NAME-OR-PATH] [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify 'sha256' -d, --description string [optional] The approval description. -h, --help help for report --newest-commit string The source commit sha for the newest change in the deployment. (default \u0026quot;HEAD\u0026quot;) --oldest-commit string The source commit sha for the oldest change in the deployment. -p, --pipeline string The Kosli pipeline name. --registry-password string The docker registry password or access token. --registry-provider string The docker registry provider or url. --registry-username string The docker registry username. --repo-root string The directory where the source git repository is volume-mounted. (default \u0026quot;.\u0026quot;) -s, --sha256 string The SHA256 fingerprint for the artifact. Only required if you don't specify 'artifact-type'. -u, --user-data string [optional] The path to a JSON file containing additional data you would like to attach to this approval. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. Examples # # Report that a file type artifact has been approved for deployment. # The approval is for the last 5 git commits kosli pipeline approval report FILE.tgz \\ --api-token yourAPIToken \\ --artifact-type file \\ --description \u0026#34;An optional description for the approval\u0026#34; \\ --newest-commit $(git rev-parse HEAD) \\ --oldest-commit $(git rev-parse HEAD~5) \\ --owner yourOrgName \\ --pipeline yourPipelineName # Report that an artifact with a provided fingerprint (sha256) has been approved for deployment. # The approval is for the last 5 git commits kosli pipeline approval report \\ --api-token yourAPIToken \\ --description \u0026#34;An optional description for the approval\u0026#34; \\ --newest-commit $(git rev-parse HEAD) \\ --oldest-commit $(git rev-parse HEAD~5) \\ --owner yourOrgName \\ --pipeline yourPipelineName \\ --sha256 yourSha256 "},{"id":29,"href":"/client_reference/kosli_pipeline_approval_request/","title":"kosli pipeline approval request","section":"Kosli Commands","content":" kosli pipeline approval request # Request in Kosli an approval of a deployment of an artifact.\nSynopsis # Request in Kosli an approval of a deployment of an artifact. The request should be reviewed in Kosli UI. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).\nkosli pipeline approval request [ARTIFACT-NAME-OR-PATH] [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify 'sha256' -d, --description string [optional] The approval description. -h, --help help for request --newest-commit string The source commit sha for the newest change in the deployment. (default \u0026quot;HEAD\u0026quot;) --oldest-commit string The source commit sha for the oldest change in the deployment. -p, --pipeline string The Kosli pipeline name. --registry-password string The docker registry password or access token. --registry-provider string The docker registry provider or url. --registry-username string The docker registry username. --repo-root string The directory where the source git repository is volume-mounted. (default \u0026quot;.\u0026quot;) -s, --sha256 string The SHA256 fingerprint for the artifact. Only required if you don't specify 'artifact-type'. -u, --user-data string [optional] The path to a JSON file containing additional data you would like to attach to this approval. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. Examples # # Request that a file type artifact needs approval. # The approval is for the last 5 git commits kosli pipeline approval request FILE.tgz \\ --api-token yourAPIToken \\ --artifact-type file \\ --description \u0026#34;An optional description for the requested approval\u0026#34; \\ --newest-commit $(git rev-parse HEAD) \\ --oldest-commit $(git rev-parse HEAD~5) \\ --owner yourOrgName \\ --pipeline yourPipelineName # Request and approval for an artifact with a provided fingerprint (sha256). # The approval is for the last 5 git commits kosli pipeline approval request \\ --api-token yourAPIToken \\ --description \u0026#34;An optional description for the requested approval\u0026#34; \\ --newest-commit $(git rev-parse HEAD) \\ --oldest-commit $(git rev-parse HEAD~5)\t\\ --owner yourOrgName \\ --pipeline yourPipelineName \\ --sha256 yourSha256 "},{"id":30,"href":"/client_reference/kosli_pipeline_artifact_report_creation/","title":"kosli pipeline artifact report creation","section":"Kosli Commands","content":" kosli pipeline artifact report creation # Report an artifact creation to a Kosli pipeline.\nSynopsis # Report an artifact creation to a Kosli pipeline. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).\nkosli pipeline artifact report creation ARTIFACT-NAME-OR-PATH [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify 'sha256' -b, --build-url string The url of CI pipeline that built the artifact. (defaulted in some CIs: https://docs.merkely.com/ci-defaults) -u, --commit-url string The url for the git commit that created the artifact. -C, --compliant Whether the artifact is compliant or not. (default true) -d, --description string [optional] The artifact description. -g, --git-commit string The git commit from which the artifact was created. -h, --help help for creation -p, --pipeline string The Kosli pipeline name. --registry-password string The docker registry password or access token. --registry-provider string The docker registry provider or url. --registry-username string The docker registry username. -s, --sha256 string The SHA256 fingerprint for the artifact. Only required if you don't specify 'artifact-type'. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. Examples # # Report to a Kosli pipeline that a file type artifact has been created kosli pipeline artifact report creation FILE.tgz \\ --api-token yourApiToken \\ --artifact-type file \\ --build-url https://exampleci.com \\ --commit-url https://github.com/YourOrg/YourProject/commit/yourCommitShaThatThisArtifactWasBuiltFrom \\ --git-commit yourCommitShaThatThisArtifactWasBuiltFrom \\ --owner yourOrgName \\ --pipeline yourPipelineName # Report to a Kosli pipeline that an artifact with a provided fingerprint (sha256) has been created kosli pipeline artifact report creation \\ --api-token yourApiToken \\ --build-url https://exampleci.com \\ --commit-url https://github.com/YourOrg/YourProject/commit/yourCommitShaThatThisArtifactWasBuiltFrom \\ --git-commit yourCommitShaThatThisArtifactWasBuiltFrom \\ --owner yourOrgName \\ --pipeline yourPipelineName \\ --sha256 yourSha256 "},{"id":31,"href":"/client_reference/kosli_pipeline_artifact_report_evidence_bitbucket-pullrequest/","title":"kosli pipeline artifact report evidence bitbucket-pullrequest","section":"Kosli Commands","content":" kosli pipeline artifact report evidence bitbucket-pullrequest # Report a Bitbucket pull request evidence for an artifact in a Kosli pipeline.\nSynopsis # Check if a pull request exists for an artifact and report the pull-request evidence to the artifact in Kosli. The artifact SHA256 fingerprint is calculated or alternatively it can be provided directly.\nkosli pipeline artifact report evidence bitbucket-pullrequest [ARTIFACT-NAME-OR-PATH] [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify 'sha256' --assert Exit with non-zero code if no pull requests found for the given commit. --bitbucket-password string Bitbucket password. --bitbucket-username string Bitbucket user name. --bitbucket-workspace string Bitbucket workspace. -b, --build-url string The url of CI pipeline that generated the evidence. --commit string Git commit for which to find pull request evidence. -d, --description string [optional] The evidence description. -e, --evidence-type string The type of evidence being reported. -h, --help help for bitbucket-pullrequest -p, --pipeline string The Kosli pipeline name. --registry-password string The docker registry password or access token. --registry-provider string The docker registry provider or url. --registry-username string The docker registry username. --repository string Git repository. -s, --sha256 string The SHA256 fingerprint for the artifact. Only required if you don't specify 'artifact-type'. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. "},{"id":32,"href":"/client_reference/kosli_pipeline_artifact_report_evidence_generic/","title":"kosli pipeline artifact report evidence generic","section":"Kosli Commands","content":" kosli pipeline artifact report evidence generic # Report a generic evidence to an artifact in a Kosli pipeline.\nSynopsis # Report a generic evidence to an artifact to a Kosli pipeline. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).\nkosli pipeline artifact report evidence generic [ARTIFACT-NAME-OR-PATH] [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify 'sha256' -b, --build-url string The url of CI pipeline that generated the evidence. -C, --compliant Whether the evidence is compliant or not. (default true) -d, --description string [optional] The evidence description. -e, --evidence-type string The type of evidence being reported. -h, --help help for generic -p, --pipeline string The Kosli pipeline name. --registry-password string The docker registry password or access token. --registry-provider string The docker registry provider or url. --registry-username string The docker registry username. -s, --sha256 string The SHA256 fingerprint for the artifact. Only required if you don't specify 'artifact-type'. -u, --user-data string [optional] The path to a JSON file containing additional data you would like to attach to this evidence. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. Examples # # report a generic evidence about a pre-built docker image: kosli pipeline artifact report evidence generic yourDockerImageName \\ --api-token yourAPIToken \\ --artifact-type docker \\ --build-url https://exampleci.com \\ --evidence-type yourEvidenceType \\ --owner yourOrgName \\ --pipeline yourPipelineName # report a generic evidence about a directory type artifact: kosli pipeline artifact report evidence generic /path/to/your/dir \\ --api-token yourAPIToken \\ --artifact-type dir \\ --build-url https://exampleci.com \\ --evidence-type yourEvidenceType \\ --owner yourOrgName\t\\ --pipeline yourPipelineName # report a generic evidence about an artifact with a provided fingerprint (sha256) kosli pipeline artifact report evidence generic \\ --api-token yourAPIToken \\ --build-url https://exampleci.com \\\t--evidence-type yourEvidenceType \\ --owner yourOrgName \\ --pipeline yourPipelineName \\ --sha256 yourSha256 "},{"id":33,"href":"/client_reference/kosli_pipeline_artifact_report_evidence_github-pullrequest/","title":"kosli pipeline artifact report evidence github-pullrequest","section":"Kosli Commands","content":" kosli pipeline artifact report evidence github-pullrequest # Report a Github pull request evidence for an artifact in a Kosli pipeline.\nSynopsis # Check if a pull request exists for an artifact and report the pull-request evidence to the artifact in Kosli. The artifact SHA256 fingerprint is calculated or alternatively it can be provided directly.\nkosli pipeline artifact report evidence github-pullrequest [ARTIFACT-NAME-OR-PATH] [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify 'sha256' --assert Exit with non-zero code if no pull requests found for the given commit. -b, --build-url string The url of CI pipeline that generated the evidence. --commit string Git commit for which to find pull request evidence. -d, --description string [optional] The evidence description. -e, --evidence-type string The type of evidence being reported. --github-org string Github organization. --github-token string Github token. -h, --help help for github-pullrequest -p, --pipeline string The Kosli pipeline name. --registry-password string The docker registry password or access token. --registry-provider string The docker registry provider or url. --registry-username string The docker registry username. --repository string Git repository. -s, --sha256 string The SHA256 fingerprint for the artifact. Only required if you don't specify 'artifact-type'. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. "},{"id":34,"href":"/client_reference/kosli_pipeline_artifact_report_evidence_test/","title":"kosli pipeline artifact report evidence test","section":"Kosli Commands","content":" kosli pipeline artifact report evidence test # Report a JUnit test evidence to an artifact in a Kosli pipeline.\nSynopsis # Report a JUnit test evidence to an artifact in a Kosli pipeline. The artifact SHA256 fingerprint is calculated or alternatively it can be provided directly.\nkosli pipeline artifact report evidence test [ARTIFACT-NAME-OR-PATH] [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify 'sha256' -b, --build-url string The url of CI pipeline that generated the evidence. -d, --description string [optional] The evidence description. -e, --evidence-type string The type of evidence being reported. -h, --help help for test -p, --pipeline string The Kosli pipeline name. --registry-password string The docker registry password or access token. --registry-provider string The docker registry provider or url. --registry-username string The docker registry username. -R, --results-dir string The path to a folder with JUnit test results. (default \u0026quot;/data/junit/\u0026quot;) -s, --sha256 string The SHA256 fingerprint for the artifact. Only required if you don't specify 'artifact-type'. -u, --user-data string [optional] The path to a JSON file containing additional data you would like to attach to this evidence. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. Examples # # report a JUnit test evidence about a file artifact: kosli pipeline artifact report evidence test FILE.tgz \\ --artifact-type file \\ --evidence-type yourEvidenceType \\ --pipeline yourPipelineName \\ --build-url https://exampleci.com \\ --api-token yourAPIToken \\ --owner yourOrgName\t\\ --results-dir yourFolderWithJUnitResults # report a JUnit test evidence about an artifact using an available Sha256 digest: kosli pipeline artifact report evidence test \\ --sha256 yourSha256 \\ --evidence-type yourEvidenceType \\ --pipeline yourPipelineName \\ --build-url https://exampleci.com \\ --api-token yourAPIToken \\ --owner yourOrgName\t\\ --results-dir yourFolderWithJUnitResults "},{"id":35,"href":"/client_reference/kosli_pipeline_declare/","title":"kosli pipeline declare","section":"Kosli Commands","content":" kosli pipeline declare # Declare or update a Kosli pipeline\nSynopsis # Declare or update a Kosli pipeline by providing a JSON pipefile or by providing pipeline parameters in flags. The pipefile contains the pipeline metadata and compliance policy.\nkosli pipeline declare [flags] Flags # Flag Description --description string [optional] The Kosli pipeline description. -h, --help help for declare --pipefile string [deprecated] The path to the JSON pipefile. --pipeline string The name of the pipeline to be created or updated. -t, --template strings The comma-separated list of required compliance controls names. (default [artifact]) --visibility string The visibility of the Kosli pipeline. Options are [public, private]. (default \u0026quot;private\u0026quot;) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. Examples # # create/update a Kosli pipeline without a pipefile: kosli pipeline declare \\ --pipeline yourPipelineName \\ --description yourPipelineDescription \\ --visibility private OR public \\ --template artifact,evidence-type1,evidence-type2 \\ --api-token yourAPIToken \\ --owner yourOrgName # create/update a Kosli pipeline with a pipefile (this is a legacy way which will be removed in the future): kosli pipeline declare \\ --pipefile /path/to/pipefile.json \\ --api-token yourAPIToken \\ --owner yourOrgName The pipefile format is: { \u0026#34;name\u0026#34;: \u0026#34;yourPipelineName\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;yourPipelinedescription\u0026#34;, \u0026#34;visibility\u0026#34;: \u0026#34;public or private\u0026#34;, \u0026#34;template\u0026#34;: [ \u0026#34;artifact\u0026#34;, \u0026#34;evidence-type1\u0026#34;, \u0026#34;evidence-type2\u0026#34; ] } "},{"id":36,"href":"/client_reference/kosli_pipeline_deployment_report/","title":"kosli pipeline deployment report","section":"Kosli Commands","content":" kosli pipeline deployment report # Report a deployment to Kosli.\nSynopsis # Report a deployment of an artifact to an environment in Kosli. The artifact SHA256 fingerprint is calculated and reported or,alternatively, can be provided directly.\nkosli pipeline deployment report [ARTIFACT-NAME-OR-PATH] [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify 'sha256' -b, --build-url string The url of CI pipeline that built the artifact. (defaulted in some CIs: https://docs.merkely.com/ci-defaults) -d, --description string [optional] The artifact description. -e, --environment string The environment name. -h, --help help for report -p, --pipeline string The Kosli pipeline name. --registry-password string The docker registry password or access token. --registry-provider string The docker registry provider or url. --registry-username string The docker registry username. -s, --sha256 string The SHA256 fingerprint for the artifact. Only required if you don't specify 'artifact-type'. -u, --user-data string [optional] The path to a JSON file containing additional data you would like to attach to this deployment. Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. "},{"id":37,"href":"/client_reference/kosli_status/","title":"kosli status","section":"Kosli Commands","content":" kosli status # Check the status of Kosli server.\nSynopsis # Check the status of Kosli server.\nkosli status [flags] Flags # Flag Description --assert Exit with non-zero code if Kosli server is not responding. -h, --help help for status Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. "},{"id":38,"href":"/client_reference/kosli_version/","title":"kosli version","section":"Kosli Commands","content":" kosli version # Print the client version information\nSynopsis # Print the version for Kosli CLI.\nThe output will look something like this: version.BuildInfo{Version:\u0026quot;v0.0.1\u0026quot;, GitCommit:\u0026quot;fe51cd1e31e6a202cba7dead9552a6d418ded79a\u0026quot;, GitTreeState:\u0026quot;clean\u0026quot;, GoVersion:\u0026quot;go1.16.3\u0026quot;}\nVersion is the semantic version of the release. GitCommit is the SHA for the commit that this version was built from. GitTreeState is \u0026quot;clean\u0026quot; if there are no local code changes when this binary was built, and \u0026quot;dirty\u0026quot; if the binary was built from locally modified code. GoVersion is the version of Go that was used to compile Kosli CLI. kosli version [flags] Flags # Flag Description -h, --help help for version -s, --short only print the version number Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default \u0026quot;merkely\u0026quot;) -D, --dry-run Whether to run in dry-run mode. When enabled, data is not sent to Kosli and the CLI exits with 0 exit code regardless of errors. -H, --host string The Kosli endpoint. (default \u0026quot;https://app.merkely.com\u0026quot;) -r, --max-api-retries int How many times should API calls be retried when the API host is not reachable. (default 3) -o, --owner string The Kosli user or organization. -v, --verbose Print verbose logs to stdout. "}]