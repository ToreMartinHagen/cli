<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting started on Kosli developer documentation</title><link>https://docs.kosli.com/getting_started/</link><description>Recent content in Getting started on Kosli developer documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://docs.kosli.com/getting_started/index.xml" rel="self" type="application/rss+xml"/><item><title>Part 1: Overview</title><link>https://docs.kosli.com/getting_started/part_1_overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/getting_started/part_1_overview/</guid><description>Part 1: Overview # Kosli is a very flexible tool - you can use it to drive a big transformation but you can also implement it without changing your existing process.
To start using Kosli you need a kosli account.
If you're eager to start using Kosli right away, check our &amp;quot;Get familiar with Kosli&amp;quot; tutorials that allows you to quickly try out Kosli features without the need to spin up a separate environment.</description></item><item><title>Part 2: Environments</title><link>https://docs.kosli.com/getting_started/part_2_environments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/getting_started/part_2_environments/</guid><description>Part 2: Environments # Recording the status of runtime environments is one of the fundamental features of Kosli. Kosli records the status of runtime environments by detecting artifacts running in any given environment and reporting the information.
If the list of running artifacts is different than what was reported previously a new snapshot is created. Snapshots are immutable and can't be tampered with.
There is range of kosli environment report [.</description></item><item><title>Part 3: Pipelines</title><link>https://docs.kosli.com/getting_started/part_3_pipelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/getting_started/part_3_pipelines/</guid><description>Part 3: Pipelines # Kosli allows you to connect the development world (commits, builds, tests, approvals, deployments) with whatâ€™s happening in operations. There is a variety of commands that let you report all the necessary information to Kosli and - relying on automatically calculated fingerprints of your artifacts - match it with the environments.
In all the commands below we skip required --api-token and --owner flags - these can be easily configured via config file or environment variables so you don't have type them over and over again.</description></item><item><title>Part 4: Artifacts</title><link>https://docs.kosli.com/getting_started/part_4_artifacts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/getting_started/part_4_artifacts/</guid><description>Part 4: Artifacts # Report artifacts # To report an artifact to Kosli, you need its SHA256 fingerprint. You can either provide the fingerprint yourself, or let Kosli CLI calculate it for you - we'll need the artifact available while running reporting command to do that. You also need to provide the name of the Kosli pipeline you want to report the artifact to.
You also should have long enough git history in your local git repo clone to let Kosli calculate the artifact's changelog (the list of commits from the new artifact back to the previous artifact in the same Kosli pipeline).</description></item><item><title>Part 5: Evidence</title><link>https://docs.kosli.com/getting_started/part_5_evidence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/getting_started/part_5_evidence/</guid><description>Part 5: Evidence # Whenever an event related to one of your evidences happens you should report it to Kosli.
Currently we support following types of evidences:
Pull request evidence # If you use GitHub or Bitbucket you can use Kosli to verify if the merge commit you used to build your artifact comes from a pull request. Remember to add the pull request evidence to your pipeline template and use the same label for --evidence-type you provided in a template</description></item><item><title>Part 6: Approvals</title><link>https://docs.kosli.com/getting_started/part_6_approvals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/getting_started/part_6_approvals/</guid><description>Part 6: Approvals # Report approvals # Whenever a given artifact is ready to be deployed you may need an additional manual approval from an authorized person. This is something that can't alway be automated, but you can use Kosli to request such an approval, and later record it, so the information about decisions made outside of your CI system won't be lost. The list of commits between current and previous approval will be generated (based on provided values for --newest-commit and --oldest-commit), which allows you to track a set of changes that are being approved.</description></item><item><title>Part 7: Deployments</title><link>https://docs.kosli.com/getting_started/part_7_deployments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/getting_started/part_7_deployments/</guid><description>Part 7: Deployments # The last important piece of information, when it comes to artifacts are deployments. Whenever you (likely with the use of your CI system) deploy an artifact to an environment you should record that information to Kosli. So when you check the status of your environments you know not only what is running there, but also how did it get there. It's an easy way of detecting a manual change was introduced.</description></item><item><title>Part 8: Querying</title><link>https://docs.kosli.com/getting_started/part_8_querying/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/getting_started/part_8_querying/</guid><description>Part 8: Querying # All the information stored in Kosli may be helpful both for operations and development. A set of get, ls, log and inspect commands allows you to quickly access the information about your environments, artifacts and deployments, without leaving your development environment.
Visit Reference to learn more about how to run each command.
The same CLI you use to record and connect your changes can be used to search for and browse information in Kosli.</description></item></channel></rss>