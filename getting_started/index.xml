<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on Kosli developer documentation</title><link>https://docs.merkely.com/getting_started/</link><description>Recent content in Getting Started on Kosli developer documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://docs.merkely.com/getting_started/index.xml" rel="self" type="application/rss+xml"/><item><title>Prerequisites</title><link>https://docs.merkely.com/getting_started/prerequisites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/getting_started/prerequisites/</guid><description>Prerequisites # To follow the &amp;quot;Getting Started&amp;quot; guide you'll need to set up a few things:
Kosli account GitHub repository where you'll store your code (you can fork our demo repository) Your own k8s cluster where you'll deploy your application hub.docker.com account GitHub # If you want to use out workflow examples, there's a few things you need to configure in your GitHub repository - you can fork the github-k8s-demo repository, create your own from scratch, or use an already existing project.</description></item><item><title>Report Environment</title><link>https://docs.merkely.com/getting_started/report_environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/getting_started/report_environment/</guid><description>Report Environment # Create an environment in Kosli # The first thing we need to configure is an environment in Kosli.
Kosli Environments is where you'll be reporting the state of your actual environments, like staging or production.
When you log in to Kosli the Environments page is the first thing you see. If you clicked around before reading this guide you'll find a link to Environments on the left side of the window in Kosli.</description></item><item><title>Report Artifact</title><link>https://docs.merkely.com/getting_started/report_artifact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/getting_started/report_artifact/</guid><description>Report Artifact # Every time you build an artifact - in our case a Docker image - you can store (and easily access) all the information you have about it in Kosli. We call it reporting an artifact.
Artifacts in Kosli are reported to Kosli Pipelines. You can find the Pipelines section just below Environments.
Create a pipeline # To report an artifact from your GitHub workflow you need to create a Kosli pipeline first.</description></item><item><title>Report Deployment</title><link>https://docs.merkely.com/getting_started/report_deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/getting_started/report_deployment/</guid><description>Report Deployment # In previous sections we covered reporting environment - so you know what's running in your cluster, and reporting artifact - so you know what you're building (and - in the future, if you add more controls, you'll know if it's verified).
The missing piece is figuring out how your artifact ended up in the environment, and that's why, when our workflow deploys to an environment, we report the deployment to that environment to Kosli.</description></item></channel></rss>