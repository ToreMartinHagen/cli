<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Merkely developer documentation</title><link>https://docs.merkely.com/</link><description>Recent content on Merkely developer documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://docs.merkely.com/index.xml" rel="self" type="application/rss+xml"/><item><title>DevOps: Change is the New Normal</title><link>https://docs.merkely.com/concepts/devops_change_is_the_new_normal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/concepts/devops_change_is_the_new_normal/</guid><description>DevOps: Change is the New Normal # The software industry is moving away from large, monolithic, centrally managed IT systems, towards a future with small, loosely coupled and rapidly updated micro-systems.
And the rate of change is growing exponentially. Whereas in the past we would have quarterly releases orchestrated by IT departments, we now have a continuous stream of changes to production, delivered by cross functional teams operating in a you-build-it-you-run-it ownership structure.</description></item><item><title>DevOps and Change Management</title><link>https://docs.merkely.com/concepts/devops_and_change_management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/concepts/devops_and_change_management/</guid><description>DevOps and Change Management # If you work in regulated industries such as finance, medical, and retail, or even just need to follow certain industry standards such as ISO - the way you make software has compliance needs.
At a high level, all software processes have three components:
Process: You must have a defined (documented) way of working Implementation: You must follow this process Proof: You must be able to prove that you have followed this process So how are these needs typically met in traditional IT change management vs DevOps Change management?</description></item><item><title>Mapping your value stream</title><link>https://docs.merkely.com/concepts/mapping_your_value_stream/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/concepts/mapping_your_value_stream/</guid><description>Mapping your value stream # When implementing DevOps Change Management, the first step is to uncover your process as a team. The way we most often do this is to run a value stream mapping exercise with the team. This can be as simple as spending 30 minutes around a whiteboard, or as involved as you like.
Many aspects of the process will be implemented in your devops automation and tooling such as:</description></item><item><title>Understanding Binary Provenance</title><link>https://docs.merkely.com/concepts/understanding_binary_provenance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/concepts/understanding_binary_provenance/</guid><description>Understanding Binary Provenance # From a security and change management perspective, the strongest form of trust in your production environment is to identify what is running and know where it came from.
This is important because all the controls, audit trails and tools are worth nothing if you can simply switch the binaries at any stage in your delivery process.
To implement binary provenance, there are two problems to solve:</description></item><item><title/><link>https://docs.merkely.com/helm/helm_chart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/helm/helm_chart/</guid><description>k8s-reporter # A Helm chart for installing the Merkely K8S reporter as a cronjob. The chart allows you to create a Kubernetes cronjob and all its necessary RBAC to report running images to Merkely at a given cron schedule.
Prerequisites # A Kubernetes cluster Helm v3.0+ Installing the chart # Installing from source # You can install the Merkely reporter Helm chart from source code:</description></item><item><title>merkely</title><link>https://docs.merkely.com/client_reference/merkely/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely/</guid><description>merkely # The Merkely evidence reporting CLI.
Synopsis # The Merkely evidence reporting CLI.
Environment variables:
Name Description $MERKELY_API_TOKEN set the Merkely API token. $MERKELY_OWNER set the Merkely Pipeline Owner. $MERKELY_HOST set the Merkely host. $MERKELY_DRY_RUN indicate whether or not Merkely CLI is running in Dry Run mode. $MERKELY_MAX_API_RETRIES set the maximum number of API calling retries when the API host is not reachable.</description></item><item><title>merkely control</title><link>https://docs.merkely.com/client_reference/merkely_control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_control/</guid><description>merkely control # Check if artifact is allowed to be deployed.
Synopsis # Check if artifact is allowed to be deployed.
Options # -h, --help help for control Options inherited from parent commands # -a, --api-token string The merkely API token. -c, --config-file string [optional] The merkely config file path. (default &amp;quot;merkely&amp;quot;) -D, --dry-run Whether to send the request to the endpoint or just log it in stdout.</description></item><item><title>merkely control deployment</title><link>https://docs.merkely.com/client_reference/merkely_control_deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_control_deployment/</guid><description>merkely control deployment # Check if an artifact in Merkely has been approved for deployment.
Synopsis # Check if an artifact in Merkely has been approved for deployment. The artifact SHA256 fingerprint is calculated or alternatively it can be provided directly.
merkely control deployment ARTIFACT-NAME-OR-PATH [flags] Options # -t, --artifact-type string The type of the artifact to be approved. Options are [dir, file, docker]. Only required if you don't specify --sha256.</description></item><item><title>merkely create</title><link>https://docs.merkely.com/client_reference/merkely_create/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_create/</guid><description>merkely create # Create objects in Merkely.
Synopsis # Create objects in Merkely.
Options # -h, --help help for create Options inherited from parent commands # -a, --api-token string The merkely API token. -c, --config-file string [optional] The merkely config file path. (default &amp;quot;merkely&amp;quot;) -D, --dry-run Whether to send the request to the endpoint or just log it in stdout. -H, --host string The merkely endpoint.</description></item><item><title>merkely create environment</title><link>https://docs.merkely.com/client_reference/merkely_create_environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_create_environment/</guid><description>merkely create environment # Create a Merkely environment
Synopsis # Create a Merkely environment.
merkely create environment [flags] Examples # * create a Merkely environment: merkely create environment --api-token 1234 --owner test --name newEnv --type K8S --description &amp;quot;my new env&amp;quot; Options # -d, --description string [optional] The environment description. -h, --help help for environment -n, --name string The name of environment. -t, --type string The type of environment.</description></item><item><title>merkely create pipeline</title><link>https://docs.merkely.com/client_reference/merkely_create_pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_create_pipeline/</guid><description>merkely create pipeline # Create a Merkely pipeline
Synopsis # Create a Merkely pipeline by providing a JSON pipefile. The pipefile contains the pipeline metadata and compliance template.
merkely create pipeline [flags] Examples # * create a Merkely pipeline with a pipefile: merkely create pipeline --api-token 1234 /path/to/pipefile.json * The pipefile format is: { &amp;quot;owner&amp;quot;: &amp;quot;organization-name&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;pipeline-name&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;pipeline short description&amp;quot;, &amp;quot;visibility&amp;quot;: &amp;quot;public or private&amp;quot;, &amp;quot;template&amp;quot;: [ &amp;quot;artifact&amp;quot;, &amp;quot;evidence-type1&amp;quot;, &amp;quot;evidence-type2&amp;quot; ] } Options # -h, --help help for pipeline Options inherited from parent commands # -a, --api-token string The merkely API token.</description></item><item><title>merkely fingerprint</title><link>https://docs.merkely.com/client_reference/merkely_fingerprint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_fingerprint/</guid><description>merkely fingerprint # Print the SHA256 fingerprint of an artifact.
Synopsis # Print the SHA256 fingerprint of an artifact. Requires artifact type flag to be set. Artifact type can be one of: &amp;ldquo;file&amp;rdquo; for files, &amp;ldquo;dir&amp;rdquo; for directories, &amp;ldquo;docker&amp;rdquo; for docker images.
merkely fingerprint [flags] Options # -h, --help help for fingerprint -t, --type string The type of the artifact to calculate its SHA256 fingerprint. Options inherited from parent commands # -a, --api-token string The merkely API token.</description></item><item><title>merkely report</title><link>https://docs.merkely.com/client_reference/merkely_report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_report/</guid><description>merkely report # Report compliance events to Merkely.
Synopsis # Report compliance events back to Merkely.
Options # -h, --help help for report Options inherited from parent commands # -a, --api-token string The merkely API token. -c, --config-file string [optional] The merkely config file path. (default &amp;quot;merkely&amp;quot;) -D, --dry-run Whether to send the request to the endpoint or just log it in stdout. -H, --host string The merkely endpoint.</description></item><item><title>merkely report approval</title><link>https://docs.merkely.com/client_reference/merkely_report_approval/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_report_approval/</guid><description>merkely report approval # Approve deploying an artifact in Merkely.
Synopsis # Approve a deployment of an artifact in Merkely. The artifact SHA256 fingerprint is calculated or alternatively it can be provided directly.
merkely report approval ARTIFACT-NAME-OR-PATH [flags] Options # -t, --artifact-type string The type of the artifact to be approved. Options are [dir, file, docker]. Only required if you don't specify --sha256. -d, --description string [optional] The approval description.</description></item><item><title>merkely report artifact</title><link>https://docs.merkely.com/client_reference/merkely_report_artifact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_report_artifact/</guid><description>merkely report artifact # Report/Log an artifact to Merkely.
Synopsis # Report an artifact to a pipeline in Merkely. The artifact SHA256 fingerprint is calculated and reported or,alternatively, can be provided directly. The following flags are defaulted as follows in the CI list below:
| Bitbucket |--------------------------------------------------------------------------- | git-commit : ${BITBUCKET_COMMIT} | build-url : https://bitbucket.org/${BITBUCKET_WORKSPACE}/${BITBUCKET_REPO_SLUG}/addon/pipelines/home#!/results/${BITBUCKET_BUILD_NUMBER} | commit-url : https://bitbucket.org/${BITBUCKET_WORKSPACE}/${BITBUCKET_REPO_SLUG}/commits/${BITBUCKET_COMMIT} |--------------------------------------------------------------------------- | Github |--------------------------------------------------------------------------- | git-commit : ${GITHUB_SHA} | build-url : ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} | commit-url : ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA} |--------------------------------------------------------------------------- | Teamcity |--------------------------------------------------------------------------- | git-commit : ${BUILD_VCS_NUMBER} |--------------------------------------------------------------------------- merkely report artifact ARTIFACT-NAME-OR-PATH [flags] Options # -b, --build-url string The url of CI pipeline that built the artifact.</description></item><item><title>merkely report deployment</title><link>https://docs.merkely.com/client_reference/merkely_report_deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_report_deployment/</guid><description>merkely report deployment # Report/Log a deployment to Merkely.
Synopsis # Report a deployment of an artifact to an environment in Merkely. The artifact SHA256 fingerprint is calculated and reported or,alternatively, can be provided directly. The following flags are defaulted as follows in the CI list below:
| Bitbucket |--------------------------------------------------------------------------- | build-url : https://bitbucket.org/${BITBUCKET_WORKSPACE}/${BITBUCKET_REPO_SLUG}/addon/pipelines/home#!/results/${BITBUCKET_BUILD_NUMBER} |--------------------------------------------------------------------------- | Github |--------------------------------------------------------------------------- | build-url : ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} |--------------------------------------------------------------------------- | Teamcity |--------------------------------------------------------------------------- |--------------------------------------------------------------------------- merkely report deployment ARTIFACT-NAME-OR-PATH [flags] Options # -b, --build-url string The url of CI pipeline that built the artifact.</description></item><item><title>merkely report env</title><link>https://docs.merkely.com/client_reference/merkely_report_env/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_report_env/</guid><description>merkely report env # Report running artifacts in an environment to Merkely.
Synopsis # Report actual deployments in an environment back to Merkely. This allows Merkely to determine Runtime compliance status of the environment.
Options # -h, --help help for env Options inherited from parent commands # -a, --api-token string The merkely API token. -c, --config-file string [optional] The merkely config file path. (default &amp;quot;merkely&amp;quot;) -D, --dry-run Whether to send the request to the endpoint or just log it in stdout.</description></item><item><title>merkely report env ecs</title><link>https://docs.merkely.com/client_reference/merkely_report_env_ecs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_report_env_ecs/</guid><description>merkely report env ecs # Report images data from AWS ECS cluster to Merkely.
Synopsis # List the artifacts deployed in an AWS ECS cluster and their digests and report them to Merkely.
merkely report env ecs env-name [flags] Examples # * report what's running in an entire AWS ECS cluster: merkely report env ecs prod --api-token 1234 --owner exampleOrg Options # -C, --cluster string The name of the ECS cluster.</description></item><item><title>merkely report env k8s</title><link>https://docs.merkely.com/client_reference/merkely_report_env_k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_report_env_k8s/</guid><description>merkely report env k8s # Report images data from specific namespace(s) or entire cluster to Merkely.
Synopsis # List the artifacts deployed in the k8s environment and their digests and report them to Merkely.
merkely report env k8s [-n namespace | -x namespace]... [-k /path/to/kube/config] [-i infrastructure-identifier] env-name [flags] Examples # * report what's running in an entire cluster using kubeconfig at $HOME/.kube/config: merkely report env k8s prod --api-token 1234 --owner exampleOrg --id prod-cluster * report what's running in an entire cluster using kubeconfig at $HOME/.</description></item><item><title>merkely report env server</title><link>https://docs.merkely.com/client_reference/merkely_report_env_server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_report_env_server/</guid><description>merkely report env server # Report directory artifacts data in the given list of paths to Merkely.
Synopsis # List the artifacts deployed in a server environment and their digests and report them to Merkely.
merkely report env server [-p /path/of/artifacts/directory] [-i infrastructure-identifier] env-name [flags] Examples # * report directory artifacts running in a server at a list of paths: merkely report env server prod --api-token 1234 --owner exampleOrg --id prod-server --paths a/b/c, e/f/g Options # -h, --help help for server -i, --id string The unique identifier of the source infrastructure of the report (e.</description></item><item><title>merkely report evidence</title><link>https://docs.merkely.com/client_reference/merkely_report_evidence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_report_evidence/</guid><description>merkely report evidence # Report/Log an evidence to an artifact in Merkely.
Synopsis # Report an evidence to an artifact in Merkely. The artifact SHA256 fingerprint is calculated or alternatively it can be provided directly. The following flags are defaulted as follows in the CI list below:
| Bitbucket |--------------------------------------------------------------------------- | build-url : https://bitbucket.org/${BITBUCKET_WORKSPACE}/${BITBUCKET_REPO_SLUG}/addon/pipelines/home#!/results/${BITBUCKET_BUILD_NUMBER} |--------------------------------------------------------------------------- | Github |--------------------------------------------------------------------------- | build-url : ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} |--------------------------------------------------------------------------- | Teamcity |--------------------------------------------------------------------------- |--------------------------------------------------------------------------- merkely report evidence ARTIFACT-NAME-OR-PATH [flags] Options # -t, --artifact-type string The type of the artifact related to the evidence.</description></item><item><title>merkely report request</title><link>https://docs.merkely.com/client_reference/merkely_report_request/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_report_request/</guid><description>merkely report request # Request an approval for deploying an artifact in Merkely.
Synopsis # Request an approval of a deployment of an artifact in Merkely. The request should be reviewed in Merkely UI. The artifact SHA256 fingerprint is calculated or alternatively it can be provided directly.
merkely report request ARTIFACT-NAME-OR-PATH [flags] Options # -t, --artifact-type string The type of the artifact to be approved. Options are [dir, file, docker].</description></item><item><title>merkely report test</title><link>https://docs.merkely.com/client_reference/merkely_report_test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_report_test/</guid><description>merkely report test # Report/Log a JUnit test evidence to an artifact in Merkely.
Synopsis # Report a JUnit test evidence to an artifact in Merkely. The artifact SHA256 fingerprint is calculated or alternatively it can be provided directly. The following flags are defaulted as follows in the CI list below:
| Bitbucket |--------------------------------------------------------------------------- | build-url : https://bitbucket.org/${BITBUCKET_WORKSPACE}/${BITBUCKET_REPO_SLUG}/addon/pipelines/home#!/results/${BITBUCKET_BUILD_NUMBER} |--------------------------------------------------------------------------- | Github |--------------------------------------------------------------------------- | build-url : ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} |--------------------------------------------------------------------------- | Teamcity |--------------------------------------------------------------------------- |--------------------------------------------------------------------------- merkely report test ARTIFACT-NAME-OR-PATH [flags] Options # -t, --artifact-type string The type of the artifact related to the evidence.</description></item><item><title>merkely version</title><link>https://docs.merkely.com/client_reference/merkely_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_version/</guid><description>merkely version # Print the client version information
Synopsis # Show the version for Merkely CLI. This will print a representation the version of Merkely CLI. The output will look something like this: version.BuildInfo{Version:&amp;ldquo;v0.0.1&amp;rdquo;, GitCommit:&amp;ldquo;fe51cd1e31e6a202cba7dead9552a6d418ded79a&amp;rdquo;, GitTreeState:&amp;ldquo;clean&amp;rdquo;, GoVersion:&amp;ldquo;go1.16.3&amp;rdquo;}
Version is the semantic version of the release. GitCommit is the SHA for the commit that this version was built from. GitTreeState is &amp;ldquo;clean&amp;rdquo; if there are no local code changes when this binary was built, and &amp;ldquo;dirty&amp;rdquo; if the binary was built from locally modified code.</description></item></channel></rss>