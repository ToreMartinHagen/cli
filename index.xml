<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Merkely developer documentation</title><link>https://docs.merkely.com/</link><description>Recent content on Merkely developer documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://docs.merkely.com/index.xml" rel="self" type="application/rss+xml"/><item><title>DevOps: Change is the New Normal</title><link>https://docs.merkely.com/concepts/devops_change_is_the_new_normal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/concepts/devops_change_is_the_new_normal/</guid><description>DevOps: Change is the New Normal # The software industry is moving away from large, monolithic, centrally managed IT systems, towards a future with small, loosely coupled and rapidly updated micro-systems.
And the rate of change is growing exponentially. Whereas in the past we would have quarterly releases orchestrated by IT departments, we now have a continuous stream of changes to production, delivered by cross functional teams operating in a you-build-it-you-run-it ownership structure.</description></item><item><title>Prerequisites</title><link>https://docs.merkely.com/getting_started/prerequisites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/getting_started/prerequisites/</guid><description>Prerequisites # To follow the &amp;quot;Getting Started&amp;quot; guide you'll need to set up a few things:
Merkely account GitHub repository where you'll store your code (you can fork our demo repository) Your own k8s cluster where you'll deploy your application hub.docker.com account GitHub # If you want to use out workflow examples, there's a few things you need to configure in your GitHub repository - you can fork the github-k8s-demo repository, create your own from scratch, or use an already existing project.</description></item><item><title>DevOps and Change Management</title><link>https://docs.merkely.com/concepts/devops_and_change_management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/concepts/devops_and_change_management/</guid><description>DevOps and Change Management # If you work in regulated industries such as finance, medical, and retail, or even just need to follow certain industry standards such as ISO - the way you make software has compliance needs.
At a high level, all software processes have three components:
Process: You must have a defined (documented) way of working Implementation: You must follow this process Proof: You must be able to prove that you have followed this process So how are these needs typically met in traditional IT change management vs DevOps Change management?</description></item><item><title>Mapping your value stream</title><link>https://docs.merkely.com/concepts/mapping_your_value_stream/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/concepts/mapping_your_value_stream/</guid><description>Mapping your value stream # When implementing DevOps Change Management, the first step is to uncover your process as a team. The way we most often do this is to run a value stream mapping exercise with the team. This can be as simple as spending 30 minutes around a whiteboard, or as involved as you like.
Many aspects of the process will be implemented in your devops automation and tooling such as:</description></item><item><title>Understanding Binary Provenance</title><link>https://docs.merkely.com/concepts/understanding_binary_provenance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/concepts/understanding_binary_provenance/</guid><description>Understanding Binary Provenance # From a security and change management perspective, the strongest form of trust in your production environment is to identify what is running and know where it came from.
This is important because all the controls, audit trails and tools are worth nothing if you can simply switch the binaries at any stage in your delivery process.
To implement binary provenance, there are two problems to solve:</description></item><item><title>Report Environment</title><link>https://docs.merkely.com/getting_started/report_environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/getting_started/report_environment/</guid><description>Report Environment # Create an environment in Merkely # The first thing we need to configure is an environment in Merkely.
Merkely Environment is where you'll be reporting the state of your actual environments, like staging or production.
When you log in to Merkely the Environments page is the first thing you see. If you clicked around before reading this guide you'll find a link to Environments on the left side of the window in Merkely.</description></item><item><title>Report Artifact</title><link>https://docs.merkely.com/getting_started/report_artifact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/getting_started/report_artifact/</guid><description>Report Artifact # Every time you build an artifact - in our case a Docker image - you can store (and easily access) all the information you have about it in Merkely. We call it reporting an artifact.
Artifacts in Merkely are reported to Merkely Pipelines. You can find the Pipelines section just below Environments.
Create a pipeline # To report an artifact from your GitHub workflow you need to create a Merkely pipeline first.</description></item><item><title>Report Deployment</title><link>https://docs.merkely.com/getting_started/report_deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/getting_started/report_deployment/</guid><description>Report Deployment # In previous sections we covered reporting environment - so you know what's running in your cluster, and reporting artifact - so you know what you're building (and - in the future, if you add more controls, you'll know if it's verified).
The missing piece is figuring out how your artifact ended up in the environment, and that's why, when our workflow deploys to an environment, we report the deployment to that environment to Merkely.</description></item><item><title/><link>https://docs.merkely.com/helm/helm_chart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/helm/helm_chart/</guid><description>k8s-reporter # A Helm chart for installing the Merkely K8S reporter as a cronjob. The chart allows you to create a Kubernetes cronjob and all its necessary RBAC to report running images to Merkely at a given cron schedule.
Prerequisites # A Kubernetes cluster Helm v3.0+ Installing the chart # Installing from source # You can install the Merkely reporter Helm chart from source code:</description></item><item><title>Defaulted command flags from CI</title><link>https://docs.merkely.com/ci-defaults/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/ci-defaults/</guid><description>Defaulted command flags from CI # The following flags are defaulted as follows in the CI list below:
Bitbucket Cloud Flag Description --build-url https://bitbucket.org/${BITBUCKET_WORKSPACE}/${BITBUCKET_REPO_SLUG}/addon/pipelines/home#!/results/${BITBUCKET_BUILD_NUMBER} --commit-url https://bitbucket.org/${BITBUCKET_WORKSPACE}/${BITBUCKET_REPO_SLUG}/commits/${BITBUCKET_COMMIT} --commit ${BITBUCKET_COMMIT} --git-commit ${BITBUCKET_COMMIT} --repository ${BITBUCKET_REPO_SLUG} --bitbucket-workspace ${BITBUCKET_WORKSPACE} Github Flag Description --build-url ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} --commit-url ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA} --commit ${GITHUB_SHA} --git-commit ${GITHUB_SHA} --repository ${GITHUB_REPOSITORY} --github-org ${GITHUB_REPOSITORY_OWNER} Teamcity Flag Description --git-commit ${BUILD_VCS_NUMBER}</description></item><item><title>merkely</title><link>https://docs.merkely.com/client_reference/merkely/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely/</guid><description>merkely # The Merkely evidence reporting CLI.
Synopsis # The Merkely evidence reporting CLI.
Environment variables:
Name Description $MERKELY_API_TOKEN set the Merkely API token. $MERKELY_OWNER set the Merkely Pipeline Owner. $MERKELY_HOST set the Merkely host. $MERKELY_DRY_RUN indicate whether or not Merkely CLI is running in Dry Run mode. $MERKELY_MAX_API_RETRIES set the maximum number of API calling retries when the API host is not reachable.</description></item><item><title>merkely assert bitbucket-pullrequest</title><link>https://docs.merkely.com/client_reference/merkely_assert_bitbucket-pullrequest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_assert_bitbucket-pullrequest/</guid><description>merkely assert bitbucket-pullrequest # Assert if a Bitbucket pull request for the commit which produces an artifact exists.
Synopsis # Check if a pull request exists in Bitbucket for an artifact (based on the git commit that produced it) and fail if it does not.
merkely assert bitbucket-pullrequest [flags] Flags # Flag Description --bitbucket-password string Bitbucket password. --bitbucket-username string Bitbucket user name.</description></item><item><title>merkely assert github-pullrequest</title><link>https://docs.merkely.com/client_reference/merkely_assert_github-pullrequest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_assert_github-pullrequest/</guid><description>merkely assert github-pullrequest # Assert if a Github pull request for the commit which produces an artifact exists.
Synopsis # Check if a pull request exists in Github for an artifact (based on the git commit that produced it) and fail if it does not.
merkely assert github-pullrequest [flags] Flags # Flag Description --commit string Git commit for which to find pull request evidence.</description></item><item><title>merkely assert status</title><link>https://docs.merkely.com/client_reference/merkely_assert_status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_assert_status/</guid><description>merkely assert status # Assert the status of Merkely server. Exits with non-zero code if Merkely server down.
Synopsis # Assert the status of Merkely server. Exits with non-zero code if Merkely server down.
merkely assert status [flags] Flags # Flag Description -h, --help help for status Options inherited from parent commands # Flag Description -a, --api-token string The merkely API token.</description></item><item><title>merkely environment allowedartifacts add</title><link>https://docs.merkely.com/client_reference/merkely_environment_allowedartifacts_add/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_environment_allowedartifacts_add/</guid><description>merkely environment allowedartifacts add # Add an artifact to an environment's allowlist.
Synopsis # Add an artifact to an environment's allowlist. The artifact SHA256 fingerprint is calculated and reported or, alternatively, can be provided directly.
merkely environment allowedartifacts add ARTIFACT-NAME-OR-PATH [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir].</description></item><item><title>merkely environment declare</title><link>https://docs.merkely.com/client_reference/merkely_environment_declare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_environment_declare/</guid><description>merkely environment declare # Declare or update a Merkely environment
Synopsis # Declare or update a Merkely environment.
merkely environment declare [flags] Flags # Flag Description -d, --description string [optional] The environment description. -t, --environment-type string The type of environment. Valid options are: [K8S, ECS, server, S3] -h, --help help for declare -n, --name string The name of environment to be created.</description></item><item><title>merkely environment report ecs</title><link>https://docs.merkely.com/client_reference/merkely_environment_report_ecs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_environment_report_ecs/</guid><description>merkely environment report ecs # Report images data from AWS ECS cluster to Merkely.
Synopsis # List the artifacts deployed in an AWS ECS cluster and their digests and report them to Merkely.
merkely environment report ecs env-name [flags] Flags # Flag Description -C, --cluster string The name of the ECS cluster. -h, --help help for ecs -s, --service-name string The name of the ECS service.</description></item><item><title>merkely environment report k8s</title><link>https://docs.merkely.com/client_reference/merkely_environment_report_k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_environment_report_k8s/</guid><description>merkely environment report k8s # Report images data from specific namespace(s) or entire cluster to Merkely.
Synopsis # List the artifacts deployed in the k8s environment and their digests and report them to Merkely.
merkely environment report k8s [-n namespace | -x namespace]... [-k /path/to/kube/config] [-i infrastructure-identifier] env-name [flags] Flags # Flag Description -x, --exclude-namespace strings The comma separated list of namespaces regex patterns NOT to report artifacts info from.</description></item><item><title>merkely environment report lambda</title><link>https://docs.merkely.com/client_reference/merkely_environment_report_lambda/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_environment_report_lambda/</guid><description>merkely environment report lambda # Report artifact from AWS Lambda to Merkely.
Synopsis # Report the artifact deployed in an AWS Lambda and its digest to Merkely.
merkely environment report lambda env-name [flags] Flags # Flag Description --aws-key-id string The AWS access key ID --aws-region string The AWS region --aws-secret-key string The AWS secret key --function-name string The name of the AWS Lambda function.</description></item><item><title>merkely environment report s3</title><link>https://docs.merkely.com/client_reference/merkely_environment_report_s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_environment_report_s3/</guid><description>merkely environment report s3 # Report artifact from AWS S3 bucket to Merkely.
Synopsis # Report the artifact deployed in an AWS S3 bucket and its digest to Merkely.
merkely environment report s3 env-name [flags] Flags # Flag Description --aws-key-id string The AWS access key ID --aws-region string The AWS region --aws-secret-key string The AWS secret key --bucket string The name of the S3 bucket.</description></item><item><title>merkely environment report server</title><link>https://docs.merkely.com/client_reference/merkely_environment_report_server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_environment_report_server/</guid><description>merkely environment report server # Report directory or file artifacts data in the given list of paths to Merkely.
Synopsis # List the artifacts deployed in a server environment and their digests and report them to Merkely.
merkely environment report server [-p /path/of/artifacts/directory] [-i infrastructure-identifier] env-name [flags] Flags # Flag Description -h, --help help for server -p, --paths strings The comma separated list of artifact directories.</description></item><item><title>merkely fingerprint</title><link>https://docs.merkely.com/client_reference/merkely_fingerprint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_fingerprint/</guid><description>merkely fingerprint # Print the SHA256 fingerprint of an artifact.
Synopsis # Print the SHA256 fingerprint of an artifact. Requires artifact type flag to be set. Artifact type can be one of: &amp;quot;file&amp;quot; for files, &amp;quot;dir&amp;quot; for directories, &amp;quot;docker&amp;quot; for docker images.
merkely fingerprint [ARTIFACT-NAME-OR-PATH] [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint.</description></item><item><title>merkely pipeline approval assert</title><link>https://docs.merkely.com/client_reference/merkely_pipeline_approval_assert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_pipeline_approval_assert/</guid><description>merkely pipeline approval assert # Assert if an artifact in Merkely has been approved for deployment.
Synopsis # Assert if an artifact in Merkely has been approved for deployment. Exits with non-zero code if artifact has not been approved. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).
merkely pipeline approval assert [ARTIFACT-NAME-OR-PATH] [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint.</description></item><item><title>merkely pipeline approval report</title><link>https://docs.merkely.com/client_reference/merkely_pipeline_approval_report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_pipeline_approval_report/</guid><description>merkely pipeline approval report # Report to Merkely an approval of deploying an artifact.
Synopsis # Report to Merkely an approval of deploying an artifact. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).
merkely pipeline approval report [ARTIFACT-NAME-OR-PATH] [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint.</description></item><item><title>merkely pipeline approval request</title><link>https://docs.merkely.com/client_reference/merkely_pipeline_approval_request/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_pipeline_approval_request/</guid><description>merkely pipeline approval request # Request in Merkely an approval of a deployment of an artifact.
Synopsis # Request in Merkely an approval of a deployment of an artifact. The request should be reviewed in Merkely UI. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).
merkely pipeline approval request [ARTIFACT-NAME-OR-PATH] [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint.</description></item><item><title>merkely pipeline artifact report creation</title><link>https://docs.merkely.com/client_reference/merkely_pipeline_artifact_report_creation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_pipeline_artifact_report_creation/</guid><description>merkely pipeline artifact report creation # Report an artifact creation to a Merkely pipeline.
Synopsis # Report an artifact creation to a Merkely pipeline. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).
merkely pipeline artifact report creation ARTIFACT-NAME-OR-PATH [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint.</description></item><item><title>merkely pipeline artifact report evidence bitbucket-pullrequest</title><link>https://docs.merkely.com/client_reference/merkely_pipeline_artifact_report_evidence_bitbucket-pullrequest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_pipeline_artifact_report_evidence_bitbucket-pullrequest/</guid><description>merkely pipeline artifact report evidence bitbucket-pullrequest # Report a Bitbucket pull request evidence for an artifact in a Merkely pipeline.
Synopsis # Check if a pull request exists for an artifact and report the pull-request evidence to the artifact in Merkely. The artifact SHA256 fingerprint is calculated or alternatively it can be provided directly.
merkely pipeline artifact report evidence bitbucket-pullrequest [ARTIFACT-NAME-OR-PATH] [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint.</description></item><item><title>merkely pipeline artifact report evidence generic</title><link>https://docs.merkely.com/client_reference/merkely_pipeline_artifact_report_evidence_generic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_pipeline_artifact_report_evidence_generic/</guid><description>merkely pipeline artifact report evidence generic # Report a generic evidence to an artifact in a Merkely pipeline.
Synopsis # Report a generic evidence to an artifact to a Merkely pipeline. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).
merkely pipeline artifact report evidence generic [ARTIFACT-NAME-OR-PATH] [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint.</description></item><item><title>merkely pipeline artifact report evidence github-pullrequest</title><link>https://docs.merkely.com/client_reference/merkely_pipeline_artifact_report_evidence_github-pullrequest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_pipeline_artifact_report_evidence_github-pullrequest/</guid><description>merkely pipeline artifact report evidence github-pullrequest # Report a Github pull request evidence for an artifact in a Merkely pipeline.
Synopsis # Check if a pull request exists for an artifact and report the pull-request evidence to the artifact in Merkely. The artifact SHA256 fingerprint is calculated or alternatively it can be provided directly.
merkely pipeline artifact report evidence github-pullrequest [ARTIFACT-NAME-OR-PATH] [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint.</description></item><item><title>merkely pipeline artifact report evidence test</title><link>https://docs.merkely.com/client_reference/merkely_pipeline_artifact_report_evidence_test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_pipeline_artifact_report_evidence_test/</guid><description>merkely pipeline artifact report evidence test # Report a JUnit test evidence to an artifact in a Merkely pipeline.
Synopsis # Report a JUnit test evidence to an artifact in a Merkely pipeline. The artifact SHA256 fingerprint is calculated or alternatively it can be provided directly.
merkely pipeline artifact report evidence test [ARTIFACT-NAME-OR-PATH] [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint.</description></item><item><title>merkely pipeline declare</title><link>https://docs.merkely.com/client_reference/merkely_pipeline_declare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_pipeline_declare/</guid><description>merkely pipeline declare # Declare or update a Merkely pipeline
Synopsis # Declare or update a Merkely pipeline by providing a JSON pipefile or by providing pipeline parameters in flags. The pipefile contains the pipeline metadata and compliance policy.
merkely pipeline declare [flags] Flags # Flag Description --description string [optional] The Merkely pipeline description. -h, --help help for declare --pipefile string [deprecated] The path to the JSON pipefile.</description></item><item><title>merkely pipeline deployment report</title><link>https://docs.merkely.com/client_reference/merkely_pipeline_deployment_report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_pipeline_deployment_report/</guid><description>merkely pipeline deployment report # Report a deployment to Merkely.
Synopsis # Report a deployment of an artifact to an environment in Merkely. The artifact SHA256 fingerprint is calculated and reported or,alternatively, can be provided directly.
merkely pipeline deployment report [ARTIFACT-NAME-OR-PATH] [flags] Flags # Flag Description -t, --artifact-type string The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir].</description></item><item><title>merkely status</title><link>https://docs.merkely.com/client_reference/merkely_status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_status/</guid><description>merkely status # Check the status of Merkely server.
Synopsis # Check the status of Merkely server.
merkely status [flags] Flags # Flag Description --assert Exit with non-zero code if Merkely server is not responding. -h, --help help for status Options inherited from parent commands # Flag Description -a, --api-token string The merkely API token.</description></item><item><title>merkely version</title><link>https://docs.merkely.com/client_reference/merkely_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/client_reference/merkely_version/</guid><description>merkely version # Print the client version information
Synopsis # Print the version for Merkely CLI.
The output will look something like this: version.BuildInfo{Version:&amp;quot;v0.0.1&amp;quot;, GitCommit:&amp;quot;fe51cd1e31e6a202cba7dead9552a6d418ded79a&amp;quot;, GitTreeState:&amp;quot;clean&amp;quot;, GoVersion:&amp;quot;go1.16.3&amp;quot;}
Version is the semantic version of the release. GitCommit is the SHA for the commit that this version was built from. GitTreeState is &amp;quot;clean&amp;quot; if there are no local code changes when this binary was built, and &amp;quot;dirty&amp;quot; if the binary was built from locally modified code.</description></item></channel></rss>