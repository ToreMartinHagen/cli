<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Welcome to Kosli Docs on Kosli developer documentation</title><link>https://docs.kosli.com/</link><description>Recent content in Welcome to Kosli Docs on Kosli developer documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://docs.kosli.com/index.xml" rel="self" type="application/rss+xml"/><item><title>What is Kosli?</title><link>https://docs.kosli.com/kosli_overview/what_is_kosli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/kosli_overview/what_is_kosli/</guid><description>What is Kosli? # Kosli records data from your CI pipelines and runtime environments, allowing you to query life after git from the command line.
Below you can read about what elements Kosli consists of.
Organization # An Organization in Kosli &amp;quot;owns&amp;quot; Kosli pipelines and environments - which means only members of each organization can get access to environments and pipelines that belong to the organization. By default, when you sign up to Kosli, a personal organization is created for you and the name of the organization matches your user name.</description></item><item><title>How to use Kosli?</title><link>https://docs.kosli.com/kosli_overview/kosli_tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/kosli_overview/kosli_tools/</guid><description>How to use Kosli? # CLI # In order to record environments, artifacts and evidence to Kosli you need to use the Kosli CLI. The CLI can be used to search Kosli and find out all you need to know about your runtime environments and artifacts.
Our CLI is an open source tool written in go and it's available for a number of different platforms.
Installing the Kosli CLI # Kosli CLI can be installed from package managers, by Curling pre-built binaries, or by running inside a Docker container.</description></item><item><title>Kosli integrations</title><link>https://docs.kosli.com/kosli_overview/kosli_integrations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/kosli_overview/kosli_integrations/</guid><description> Kosli integrations # CI/CD - run Kosli reporting commands easier with support for popular CI/CD tools Slack - receive slack notifications about changes in your environments status</description></item><item><title>Part 1: Overview</title><link>https://docs.kosli.com/getting_started/part_1_overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/getting_started/part_1_overview/</guid><description>Part 1: Overview # Kosli is a very flexible tool - you can use it to drive a big transformation but you can also implement it without changing your existing process.
To start using Kosli you need a kosli account.
If you're eager to start using Kosli right away, check our &amp;quot;Get familiar with Kosli&amp;quot; tutorials that allows you to quickly try out Kosli features without the need to spin up a separate environment.</description></item><item><title>Part 2: Environments</title><link>https://docs.kosli.com/getting_started/part_2_environments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/getting_started/part_2_environments/</guid><description>Part 2: Environments # Recording the status of runtime environments is one of the fundamental features of Kosli. Kosli records the status of runtime environments by detecting artifacts running in any given environment and reporting the information.
If the list of running artifacts is different than what was reported previously a new snapshot is created. Snapshots are immutable and can't be tampered with.
There is range of kosli environment report [.</description></item><item><title>Part 3: Pipelines</title><link>https://docs.kosli.com/getting_started/part_3_pipelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/getting_started/part_3_pipelines/</guid><description>Part 3: Pipelines # Kosli allows you to connect the development world (commits, builds, tests, approvals, deployments) with whatâ€™s happening in operations. There is a variety of commands that let you report all the necessary information to Kosli and - relying on automatically calculated fingerprints of your artifacts - match it with the environments.
In all the commands below we skip required --api-token and --owner flags - these can be easily configured via config file or environment variables so you don't have type them over and over again.</description></item><item><title>Part 4: Artifacts</title><link>https://docs.kosli.com/getting_started/part_4_artifacts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/getting_started/part_4_artifacts/</guid><description>Part 4: Artifacts # Report artifacts # To report an artifact to Kosli, you need its SHA256 fingerprint. You can either provide the fingerprint yourself, or let Kosli CLI calculate it for you - we'll need the artifact available while running reporting command to do that. You also need to provide the name of the Kosli pipeline you want to report the artifact to.
You also should have long enough git history in your local git repo clone to let Kosli calculate the artifact's changelog (the list of commits from the new artifact back to the previous artifact in the same Kosli pipeline).</description></item><item><title>Part 5: Evidence</title><link>https://docs.kosli.com/getting_started/part_5_evidence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/getting_started/part_5_evidence/</guid><description>Part 5: Evidence # Whenever an event related to a required evidence happens you should report it to Kosli.
Currently we support following types of evidence:
Pull request evidence # If you use GitHub or Bitbucket you can use Kosli to verify if the merge commit you used to build your artifact comes from a pull request. Remember to add the pull request evidence to your pipeline template and use the same label for --evidence-type you provided in a template</description></item><item><title>Part 6: Approvals</title><link>https://docs.kosli.com/getting_started/part_6_approvals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/getting_started/part_6_approvals/</guid><description>Part 6: Approvals # Report approvals # Whenever a given artifact is ready to be deployed you may need an additional manual approval from an authorized person. This is something that can't alway be automated, but you can use Kosli to request such an approval, and later record it, so the information about decisions made outside of your CI system won't be lost. The list of commits between current and previous approval will be generated (based on provided values for --newest-commit and --oldest-commit), which allows you to track a set of changes that are being approved.</description></item><item><title>Part 7: Deployments</title><link>https://docs.kosli.com/getting_started/part_7_deployments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/getting_started/part_7_deployments/</guid><description>Part 7: Deployments # The last important piece of information, when it comes to artifacts are deployments. Whenever you (likely with the use of your CI system) deploy an artifact to an environment you should record that information to Kosli. So when you check the status of your environments you know not only what is running there, but also how did it get there. It's an easy way of detecting a manual change was introduced.</description></item><item><title>Part 8: Querying</title><link>https://docs.kosli.com/getting_started/part_8_querying/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/getting_started/part_8_querying/</guid><description>Part 8: Querying # All the information stored in Kosli may be helpful both for operations and development. A set of get, ls, log and inspect commands allows you to quickly access the information about your environments, artifacts and deployments, without leaving your development environment.
Visit Reference to learn more about how to run each command.
The same CLI you use to record and connect your changes can be used to search for and browse information in Kosli.</description></item><item><title>CI/CD</title><link>https://docs.kosli.com/integrations/ci_cd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/integrations/ci_cd/</guid><description>Use Kosli in CI Systems # This section provides how-to guides showing you how to use Kosli to report changes from different CI systems.
Defaulted Kosli command flags from CI variables # The following flags are defaulted as follows in the CI list below:
Bitbucket Cloud Flag Default --build-url https://bitbucket.org/${BITBUCKET_WORKSPACE}/${BITBUCKET_REPO_SLUG}/addon/pipelines/home#!/results/${BITBUCKET_BUILD_NUMBER} --commit-url https://bitbucket.org/${BITBUCKET_WORKSPACE}/${BITBUCKET_REPO_SLUG}/commits/${BITBUCKET_COMMIT} --commit ${BITBUCKET_COMMIT} --git-commit ${BITBUCKET_COMMIT} --repository ${BITBUCKET_REPO_SLUG} --bitbucket-workspace ${BITBUCKET_WORKSPACE} Github Flag Default --build-url ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} --commit-url ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA} --commit ${GITHUB_SHA} --git-commit ${GITHUB_SHA} --repository ${GITHUB_REPOSITORY} --github-org ${GITHUB_REPOSITORY_OWNER} Gitlab Flag Default --build-url ${CI_JOB_URL} --commit-url ${CI_PROJECT_URL}/-/commit/${CI_COMMIT_SHA} --commit ${CI_COMMIT_SHA} --git-commit ${CI_COMMIT_SHA} --repository ${CI_PROJECT_NAME} --gitlab-org ${CI_PROJECT_NAMESPACE} Teamcity Flag Default --git-commit ${BUILD_VCS_NUMBER} Github Actions # To use Kosli in Github Actions workflows, you can use the kosli CLI setup action to install the CLI on your Github Actions Runner.</description></item><item><title>Slack integration</title><link>https://docs.kosli.com/integrations/slack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/integrations/slack/</guid><description>Slack integration # You can use slack webhook to receive notifications about changes in the status of your environments.
When one (or more) of your environments become non-compliant you'll get a notification in configured channel:
You'll also get a notification if the status changes from non-compliant to compliant:
Slack integration setup # In order to receive the notifications you need to create a slack app: https://api.slack.com/authentication/basics#creating
When your app is created add Incoming Webhooks feature.</description></item><item><title>Get familiar with Kosli</title><link>https://docs.kosli.com/tutorials/get_familiar_with_kosli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/tutorials/get_familiar_with_kosli/</guid><description>Get familiar with Kosli # The following guide is the easiest and quickest way to try Kosli out and understand it's features. But is not a real life use case for Kosli - usually you'd run Kosli in your CI and remote environments.
So you can try it out using just your local machine and docker. In our Guides and Kosli integrations sections you'll find all the information needed to run it in actual projects.</description></item><item><title>Following a git commit to runtime environments</title><link>https://docs.kosli.com/tutorials/following_a_git_commit_to_runtime_environments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/tutorials/following_a_git_commit_to_runtime_environments/</guid><description>Following a git commit to runtime environments # Overview # In this 5 minute tutorial you'll learn how Kosli tracks &amp;quot;life after git&amp;quot; and shows you events from:
CI-pipelines (eg, building the docker image, running the unit tests, deploying, etc) runtime environments (eg, the blue-green rollover, instance scaling, etc) You'll follow an actual git commit to an open-source project called cyber-dojo. In our example cyber-dojoâ€™s runner service should run with three replicas.</description></item><item><title>Tracing a production incident back to git commits</title><link>https://docs.kosli.com/tutorials/tracing_a_production_incident_back_to_git_commits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/tutorials/tracing_a_production_incident_back_to_git_commits/</guid><description>Tracing a production incident back to git commits # In this 5 minute tutorial you'll learn how Kosli can track a production incident in Cyber-dojo back to git commits.
Something has gone wrong and https://cyber-dojo.org is displaying a 500 error!
It was working an hour ago. What has happened in the last hour?
Start with the environment # https://cyber-dojo.org is running in an AWS environment that reports to Kosli as aws-prod.</description></item><item><title>Simulating a DevOps system</title><link>https://docs.kosli.com/tutorials/simulating_a_devops_system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/tutorials/simulating_a_devops_system/</guid><description>Preparing the tutorial # To follow the tutorial you need to:
Install the kosli CLI. Get your Kosli API token. Set the KOSLI_API_TOKEN environment variable: export KOSLI_API_TOKEN=&amp;lt;paste-your-kosli-API-token-here&amp;gt; Set the KOSLI_OWNER environment variable to your Kosli organization name: export KOSLI_OWNER=&amp;lt;paste-your-kosli-organization-name&amp;gt; For this tutorial you will simulate a system with source code, a build system, and a running server. There is a script to help you run these simulations, so you won't need to type too many commands.</description></item><item><title>kosli</title><link>https://docs.kosli.com/client_reference/kosli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli/</guid><description>kosli # The Kosli CLI.
Synopsis # The Kosli evidence reporting CLI.
Environment variables: You can set any flag from an environment variable by capitalizing it in snake case and adding the KOSLI_ prefix. For example, to set --api-token from an environment variable, you can export KOSLI_API_TOKEN=YOUR_API_TOKEN.
Setting the API token to DRY_RUN sets the --dry-run flag.
Flags # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path.</description></item><item><title>kosli approval get</title><link>https://docs.kosli.com/client_reference/kosli_approval_get/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_approval_get/</guid><description>kosli approval get # Get an approval from a specified pipeline.
Synopsis # Get an approval from a specified pipeline. The expected argument is an expression to specify the approval to get. It has the format &amp;lt;PIPELINE_NAME&amp;gt;[SEPARATOR][INTEGER_REFERENCE]
Specify SNAPPISH by: pipelineName~ N'th behind the latest approval pipelineName# approval number N pipelineName the latest approval
Examples of valid expressions are: pipe (latest approval), pipe#10 (approval number 10), pipe~2 (the third latest approval)</description></item><item><title>kosli approval ls</title><link>https://docs.kosli.com/client_reference/kosli_approval_ls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_approval_ls/</guid><description>kosli approval ls # List approvals in a pipeline.
Synopsis # List approvals in a pipeline. The results are paginated and ordered from latests to oldest. By default, the page limit is 15 approvals per page.
kosli approval ls PIPELINE-NAME [flags] Flags # Flag Description -h, --help help for ls -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default &amp;quot;table&amp;quot;) --page int [defaulted] The page number of a response.</description></item><item><title>kosli artifact get</title><link>https://docs.kosli.com/client_reference/kosli_artifact_get/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_artifact_get/</guid><description>kosli artifact get # Get artifact from a specified pipeline
Synopsis # Get artifact from a specified pipeline You can get an artifact by its fingerprint or by its git commit sha. In case of using the git commit, it is possible to get multiple artifacts matching the git commit.
The expected argument is an expression to specify the artifact to get. It has the format &amp;lt;PIPELINE_NAME&amp;gt;&amp;lt;COMMIT_SHA1|ARTIFACT_SHA256&amp;gt;
Specify SNAPPISH by: pipelineName@ artifact with a given fingerprint.</description></item><item><title>kosli artifact ls</title><link>https://docs.kosli.com/client_reference/kosli_artifact_ls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_artifact_ls/</guid><description>kosli artifact ls # List artifacts in a pipeline.
Synopsis # List artifacts in a pipeline. The results are paginated and ordered from latests to oldest. By default, the page limit is 15 artifacts per page.
kosli artifact ls PIPELINE-NAME [flags] Flags # Flag Description -h, --help help for ls -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default &amp;quot;table&amp;quot;) --page int [defaulted] The page number of a response.</description></item><item><title>kosli assert artifact</title><link>https://docs.kosli.com/client_reference/kosli_assert_artifact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_assert_artifact/</guid><description>kosli assert artifact # Assert the compliance status of an artifact in Kosli.
Synopsis # Assert the compliance status of an artifact in Kosli. Exits with non-zero code if the artifact has a non-compliant status.
kosli assert artifact [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir]. Only required if you don't specify '--sha256' or '--fingerprint'.</description></item><item><title>kosli assert bitbucket-pullrequest</title><link>https://docs.kosli.com/client_reference/kosli_assert_bitbucket-pullrequest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_assert_bitbucket-pullrequest/</guid><description>kosli assert bitbucket-pullrequest # Assert if a Bitbucket pull request for a git commit exists.
Synopsis # Assert if a Bitbucket pull request for a git commit exists. The command exits with non-zero exit code if no pull requests were found for the commit.
kosli assert bitbucket-pullrequest [flags] Flags # Flag Description --bitbucket-password string Bitbucket password. --bitbucket-username string Bitbucket user name. --bitbucket-workspace string Bitbucket workspace. --commit string Git commit for which to find pull request evidence.</description></item><item><title>kosli assert environment</title><link>https://docs.kosli.com/client_reference/kosli_assert_environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_assert_environment/</guid><description>kosli assert environment # Assert the compliance status of an environment in Kosli.
Synopsis # Assert the compliance status of an environment in Kosli. Exits with non-zero code if the environment has a non-compliant status. The expected argument is an expression to specify the specific environment snapshot to assert. It has the format &amp;lt;ENVIRONMENT_NAME&amp;gt;[SEPARATOR][SNAPSHOT_REFERENCE]
Separators can be:
'#' to specify a specific snapshot number for the environment that is being asserted.</description></item><item><title>kosli assert github-pullrequest</title><link>https://docs.kosli.com/client_reference/kosli_assert_github-pullrequest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_assert_github-pullrequest/</guid><description>kosli assert github-pullrequest # Assert if a Github pull request for a git commit exists.
Synopsis # Assert if a Github pull request for a git commit exists. The command exits with non-zero exit code if no pull requests were found for the commit.
kosli assert github-pullrequest [flags] Flags # Flag Description --commit string Git commit for which to find pull request evidence. (defaulted in some CIs: https://docs.kosli.com/ci-defaults ). -D, --dry-run [optional] Run in dry-run mode.</description></item><item><title>kosli assert status</title><link>https://docs.kosli.com/client_reference/kosli_assert_status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_assert_status/</guid><description>kosli assert status # Assert the status of Kosli server.
Synopsis # Assert the status of Kosli server. Exits with non-zero code if Kosli server down.
kosli assert status [flags] Flags # Flag Description -h, --help help for status Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default &amp;quot;kosli&amp;quot;) --debug [optional] Print debug logs to stdout.</description></item><item><title>kosli completion</title><link>https://docs.kosli.com/client_reference/kosli_completion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_completion/</guid><description>kosli completion # Generate completion script
Synopsis # To load completions:
Bash # $ source &amp;lt;(kosli completion bash) To load completions for each session, execute once:
On Linux:
$ kosli completion bash &amp;gt; /etc/bash_completion.d/kosli On macOS:
$ kosli completion bash &amp;gt; $(brew --prefix)/etc/bash_completion.d/kosli Zsh # If shell completion is not already enabled in your environment,
you will need to enable it. You can execute the following once:
$ echo &amp;#34;autoload -U compinit; compinit&amp;#34; &amp;gt;&amp;gt; ~/.</description></item><item><title>kosli deployment get</title><link>https://docs.kosli.com/client_reference/kosli_deployment_get/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_deployment_get/</guid><description>kosli deployment get # Get a deployment from a specified pipeline.
Synopsis # Get a deployment from a specified pipeline. Specify SNAPPISH by: pipelineName~ N'th behind the latest deployment pipelineName# deployment number N pipelineName the latest deployment
kosli deployment get SNAPPISH [flags] Flags # Flag Description -h, --help help for get -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default &amp;quot;table&amp;quot;) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token.</description></item><item><title>kosli deployment ls</title><link>https://docs.kosli.com/client_reference/kosli_deployment_ls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_deployment_ls/</guid><description>kosli deployment ls # List deployments in a pipeline.
Synopsis # List deployments in a pipeline. The results are paginated and ordered from latests to oldest. By default, the page limit is 15 deployments per page.
kosli deployment ls PIPELINE-NAME [flags] Flags # Flag Description -h, --help help for ls -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default &amp;quot;table&amp;quot;) --page int [defaulted] The page number of a response.</description></item><item><title>kosli environment allowedartifacts add</title><link>https://docs.kosli.com/client_reference/kosli_environment_allowedartifacts_add/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_environment_allowedartifacts_add/</guid><description>kosli environment allowedartifacts add # Add an artifact to an environment's allowlist.
Synopsis # Add an artifact to an environment's allowlist. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).
kosli environment allowedartifacts add {IMAGE-NAME | FILE-PATH | DIR-PATH} [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir].</description></item><item><title>kosli environment declare</title><link>https://docs.kosli.com/client_reference/kosli_environment_declare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_environment_declare/</guid><description>kosli environment declare # Declare a Kosli environment.
Synopsis # Declare a Kosli environment.
kosli environment declare [flags] Flags # Flag Description -d, --description string [optional] The environment description. -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -t, --environment-type string The type of environment. Valid types are: [K8S, ECS, server, S3, lambda, docker].</description></item><item><title>kosli environment diff</title><link>https://docs.kosli.com/client_reference/kosli_environment_diff/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_environment_diff/</guid><description>kosli environment diff # Diff snapshots.
Synopsis # Diff snapshots. Specify SNAPPISH_1 and SNAPPISH_2 by: environmentName~ N'th behind the latest snapshot environmentName# snapshot number N environmentName the latest snapshot
kosli environment diff SNAPPISH_1 SNAPPISH_2 [flags] Flags # Flag Description -h, --help help for diff -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default &amp;quot;table&amp;quot;) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token.</description></item><item><title>kosli environment get</title><link>https://docs.kosli.com/client_reference/kosli_environment_get/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_environment_get/</guid><description>kosli environment get # Get a specific environment snapshot.
Synopsis # Get a specific environment snapshot. Specify SNAPPISH by: environmentName~ N'th behind the latest snapshot environmentName# snapshot number N environmentName the latest snapshot
kosli environment get ENVIRONMENT-NAME-OR-EXPRESSION [flags] Flags # Flag Description -h, --help help for get -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default &amp;quot;table&amp;quot;) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token.</description></item><item><title>kosli environment inspect</title><link>https://docs.kosli.com/client_reference/kosli_environment_inspect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_environment_inspect/</guid><description>kosli environment inspect # Inspect an environment metadata.
Synopsis # Inspect an environment metadata.
kosli environment inspect ENVIRONMENT-NAME [flags] Flags # Flag Description -h, --help help for inspect -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default &amp;quot;table&amp;quot;) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default &amp;quot;kosli&amp;quot;) --debug [optional] Print debug logs to stdout.</description></item><item><title>kosli environment log</title><link>https://docs.kosli.com/client_reference/kosli_environment_log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_environment_log/</guid><description>kosli environment log # List environment events.
Synopsis # List environment events. The results are paginated and ordered from latests to oldest. By default, the page limit is 15 events per page.
You can optionally specify an INTERVAL between two snapshot expressions with ... Expressions can be: ~N N'th behind the latest snapshot N snapshot number N NOW the latest snapshot Either expression can be omitted to default to NOW.</description></item><item><title>kosli environment ls</title><link>https://docs.kosli.com/client_reference/kosli_environment_ls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_environment_ls/</guid><description>kosli environment ls # List environments.
Synopsis # List environments.
kosli environment ls [flags] Flags # Flag Description -h, --help help for ls -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default &amp;quot;table&amp;quot;) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default &amp;quot;kosli&amp;quot;) --debug [optional] Print debug logs to stdout.</description></item><item><title>kosli environment rename</title><link>https://docs.kosli.com/client_reference/kosli_environment_rename/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_environment_rename/</guid><description>kosli environment rename # Rename a Kosli environment.
Synopsis # Rename a Kosli environment. The environment will remain available under its old name until that name is taken by another environment.
kosli environment rename OLD_NAME NEW_NAME [flags] Flags # Flag Description -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors. -h, --help help for rename Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token.</description></item><item><title>kosli environment report docker</title><link>https://docs.kosli.com/client_reference/kosli_environment_report_docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_environment_report_docker/</guid><description>kosli environment report docker # Report running containers data from docker host to Kosli.
Synopsis # Report running containers data from docker host to Kosli. The reported data includes container image digests and creation timestamps. Containers running images which have not been pushed to or pulled from a registry will be ignored.
kosli environment report docker ENVIRONMENT-NAME [flags] Flags # Flag Description -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors.</description></item><item><title>kosli environment report ecs</title><link>https://docs.kosli.com/client_reference/kosli_environment_report_ecs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_environment_report_ecs/</guid><description>kosli environment report ecs # Report running containers data from AWS ECS cluster or service to Kosli.
Synopsis # Report running containers data from AWS ECS cluster or service to Kosli. The reported data includes container image digests and creation timestamps. To authenticate to AWS, you can either: 1) provide the AWS static credentials via flags or by exporting the equivalent KOSLI env vars (e.g. KOSLI_AWS_KEY_ID) 2) export the AWS env vars (e.</description></item><item><title>kosli environment report k8s</title><link>https://docs.kosli.com/client_reference/kosli_environment_report_k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_environment_report_k8s/</guid><description>kosli environment report k8s # Report running pods data from K8S cluster or namespace(s) to Kosli.
Synopsis # Report running pods data from K8S cluster or namespace(s) to Kosli. The reported data includes pod container images digests and creation timestamps. You can customize the scope of reporting to include or exclude namespaces.
kosli environment report k8s ENVIRONMENT-NAME [flags] Flags # Flag Description -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors.</description></item><item><title>kosli environment report lambda</title><link>https://docs.kosli.com/client_reference/kosli_environment_report_lambda/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_environment_report_lambda/</guid><description>kosli environment report lambda # Report the artifact deployed in an AWS Lambda and its digest to Kosli.
Synopsis # Report the artifact deployed in an AWS Lambda and its digest to Kosli. To authenticate to AWS, you can either: 1) provide the AWS static credentials via flags or by exporting the equivalent KOSLI env vars (e.g. KOSLI_AWS_KEY_ID) 2) export the AWS env vars (e.g. AWS_ACCESS_KEY_ID). 3) Use a shared config/credentials file under the $HOME/.</description></item><item><title>kosli environment report s3</title><link>https://docs.kosli.com/client_reference/kosli_environment_report_s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_environment_report_s3/</guid><description>kosli environment report s3 # Report an artifact deployed in AWS S3 bucket to Kosli.
Synopsis # Report an artifact deployed in AWS S3 bucket to Kosli. To authenticate to AWS, you can either: 1) provide the AWS static credentials via flags or by exporting the equivalent KOSLI env vars (e.g. KOSLI_AWS_KEY_ID) 2) export the AWS env vars (e.g. AWS_ACCESS_KEY_ID). 3) Use a shared config/credentials file under the $HOME/.aws Option 1 takes highest precedence, while option 3 is the lowest.</description></item><item><title>kosli environment report server</title><link>https://docs.kosli.com/client_reference/kosli_environment_report_server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_environment_report_server/</guid><description>kosli environment report server # Report artifacts running in a server environment to Kosli.
Synopsis # Report artifacts running in a server environment to Kosli. You can report directory or file artifacts in one or more server paths.
kosli environment report server ENVIRONMENT-NAME [flags] Flags # Flag Description -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors.</description></item><item><title>kosli expect deployment</title><link>https://docs.kosli.com/client_reference/kosli_expect_deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_expect_deployment/</guid><description>kosli expect deployment # Report a deployment of an artifact to an environment to Kosli.
Synopsis # Report a deployment of an artifact to an environment to Kosli. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).
kosli expect deployment [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint.</description></item><item><title>kosli fingerprint</title><link>https://docs.kosli.com/client_reference/kosli_fingerprint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_fingerprint/</guid><description>kosli fingerprint # Calculate the SHA256 fingerprint of an artifact.
Synopsis # Calculate the SHA256 fingerprint of an artifact. Requires artifact type flag to be set. Artifact type can be one of: &amp;quot;file&amp;quot; for files, &amp;quot;dir&amp;quot; for directories, &amp;quot;docker&amp;quot; for docker images.
kosli fingerprint {IMAGE-NAME | FILE-PATH | DIR-PATH} [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint. One of: [docker, file, dir].</description></item><item><title>kosli pipeline approval assert</title><link>https://docs.kosli.com/client_reference/kosli_pipeline_approval_assert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_pipeline_approval_assert/</guid><description>kosli pipeline approval assert # Assert if an artifact in Kosli has been approved for deployment.
Synopsis # Assert if an artifact in Kosli has been approved for deployment. Exits with non-zero code if artifact has not been approved. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).
kosli pipeline approval assert [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint.</description></item><item><title>kosli pipeline approval report</title><link>https://docs.kosli.com/client_reference/kosli_pipeline_approval_report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_pipeline_approval_report/</guid><description>kosli pipeline approval report # Report an approval of deploying an artifact to Kosli.
Synopsis # Report an approval of deploying an artifact to Kosli. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).
kosli pipeline approval report [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint.</description></item><item><title>kosli pipeline approval request</title><link>https://docs.kosli.com/client_reference/kosli_pipeline_approval_request/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_pipeline_approval_request/</guid><description>kosli pipeline approval request # Request an approval of a deployment of an artifact in Kosli.
Synopsis # Request an approval of a deployment of an artifact in Kosli. The request should be reviewed in Kosli UI.The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).
kosli pipeline approval request [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint.</description></item><item><title>kosli pipeline artifact report creation</title><link>https://docs.kosli.com/client_reference/kosli_pipeline_artifact_report_creation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_pipeline_artifact_report_creation/</guid><description>kosli pipeline artifact report creation # Report an artifact creation to a Kosli pipeline.
Synopsis # Report an artifact creation to a Kosli pipeline. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).
kosli pipeline artifact report creation {IMAGE-NAME | FILE-PATH | DIR-PATH} [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint.</description></item><item><title>kosli pipeline artifact report evidence bitbucket-pullrequest</title><link>https://docs.kosli.com/client_reference/kosli_pipeline_artifact_report_evidence_bitbucket-pullrequest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_pipeline_artifact_report_evidence_bitbucket-pullrequest/</guid><description>kosli pipeline artifact report evidence bitbucket-pullrequest # Report a Bitbucket pull request evidence for an artifact in a Kosli pipeline.
Synopsis # Report a Bitbucket pull request evidence for an artifact in a Kosli pipeline. It checks if a pull request exists for the artifact (based on its git commit) and report the pull-request evidence to the artifact in Kosli. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).</description></item><item><title>kosli pipeline artifact report evidence generic</title><link>https://docs.kosli.com/client_reference/kosli_pipeline_artifact_report_evidence_generic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_pipeline_artifact_report_evidence_generic/</guid><description>kosli pipeline artifact report evidence generic # Report a generic evidence to an artifact in a Kosli pipeline.
Synopsis # Report a generic evidence to an artifact in a Kosli pipeline. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).
kosli pipeline artifact report evidence generic [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint.</description></item><item><title>kosli pipeline artifact report evidence github-pullrequest</title><link>https://docs.kosli.com/client_reference/kosli_pipeline_artifact_report_evidence_github-pullrequest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_pipeline_artifact_report_evidence_github-pullrequest/</guid><description>kosli pipeline artifact report evidence github-pullrequest # Report a Github pull request evidence for an artifact in a Kosli pipeline.
Synopsis # Report a Github pull request evidence for an artifact in a Kosli pipeline. It checks if a pull request exists for the artifact (based on its git commit) and report the pull-request evidence to the artifact in Kosli. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).</description></item><item><title>kosli pipeline artifact report evidence junit</title><link>https://docs.kosli.com/client_reference/kosli_pipeline_artifact_report_evidence_junit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_pipeline_artifact_report_evidence_junit/</guid><description>kosli pipeline artifact report evidence junit # Report JUnit test evidence for an artifact in a Kosli pipeline.
Synopsis # Report JUnit test evidence for an artifact in a Kosli pipeline. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --fingerprint flag).
kosli pipeline artifact report evidence junit [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint.</description></item><item><title>kosli pipeline artifact report evidence snyk</title><link>https://docs.kosli.com/client_reference/kosli_pipeline_artifact_report_evidence_snyk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_pipeline_artifact_report_evidence_snyk/</guid><description>kosli pipeline artifact report evidence snyk # Report Snyk vulnerability scan evidence for an artifact in a Kosli pipeline.
Synopsis # Report Snyk vulnerability scan evidence for an artifact in a Kosli pipeline. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --fingerprint flag).
kosli pipeline artifact report evidence snyk [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint.</description></item><item><title>kosli pipeline artifact report evidence test</title><link>https://docs.kosli.com/client_reference/kosli_pipeline_artifact_report_evidence_test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_pipeline_artifact_report_evidence_test/</guid><description>kosli pipeline artifact report evidence test # Report a JUnit test evidence to an artifact in a Kosli pipeline.
Synopsis # Report a JUnit test evidence to an artifact in a Kosli pipeline. The artifact SHA256 fingerprint is calculated (based on --artifact-type flag) or alternatively it can be provided directly (with --sha256 flag).
kosli pipeline artifact report evidence test [IMAGE-NAME | FILE-PATH | DIR-PATH] [flags] Flags # Flag Description -t, --artifact-type string [conditional] The type of the artifact to calculate its SHA256 fingerprint.</description></item><item><title>kosli pipeline declare</title><link>https://docs.kosli.com/client_reference/kosli_pipeline_declare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_pipeline_declare/</guid><description>kosli pipeline declare # Create or update a Kosli pipeline.
Synopsis # Create or update a Kosli pipeline. You can provide a JSON pipefile or specify pipeline parameters in flags. The pipefile contains the pipeline metadata and compliance policy (template).
kosli pipeline declare [flags] Flags # Flag Description --description string [optional] The Kosli pipeline description. -D, --dry-run [optional] Run in dry-run mode. When enabled, no data is sent to Kosli and the CLI exits with 0 exit code regardless of any errors.</description></item><item><title>kosli pipeline inspect</title><link>https://docs.kosli.com/client_reference/kosli_pipeline_inspect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_pipeline_inspect/</guid><description>kosli pipeline inspect # Inspect the metadata of a specific pipeline.
Synopsis # Inspect the metadata of a specific pipeline.
kosli pipeline inspect PIPELINE-NAME [flags] Flags # Flag Description -h, --help help for inspect -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default &amp;quot;table&amp;quot;) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path.</description></item><item><title>kosli pipeline ls</title><link>https://docs.kosli.com/client_reference/kosli_pipeline_ls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_pipeline_ls/</guid><description>kosli pipeline ls # List pipelines for an org.
Synopsis # List pipelines for an org.
kosli pipeline ls [flags] Flags # Flag Description -h, --help help for ls -o, --output string [defaulted] The format of the output. Valid formats are: [table, json]. (default &amp;quot;table&amp;quot;) Options inherited from parent commands # Flag Description -a, --api-token string The Kosli API token. -c, --config-file string [optional] The Kosli config file path. (default &amp;quot;kosli&amp;quot;) --debug [optional] Print debug logs to stdout.</description></item><item><title>kosli search</title><link>https://docs.kosli.com/client_reference/kosli_search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_search/</guid><description>kosli search # Search for a git commit or an artifact fingerprint in Kosli.
Synopsis # Search for a git commit or an artifact fingerprint in Kosli. You can use short git commit or artifact fingerprint shas, but you must provide at least 5 characters.
kosli search GIT-COMMIT|FINGERPRINT [flags] Flags # Flag Description -h, --help help for search -o, --output string [defaulted] The format of the output. Valid formats are: [table, json].</description></item><item><title>kosli status</title><link>https://docs.kosli.com/client_reference/kosli_status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_status/</guid><description>kosli status # Check the status of Kosli server.
Synopsis # Check the status of Kosli server. The status is logged and the command always exits with 0 exit code. If you like to assert the Kosli server status, you can use the --assert flag or the &amp;quot;kosli assert status&amp;quot; command.
kosli status [flags] Flags # Flag Description --assert [optional] Exit with non-zero code if Kosli server is not responding.</description></item><item><title>kosli version</title><link>https://docs.kosli.com/client_reference/kosli_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kosli.com/client_reference/kosli_version/</guid><description>kosli version # Print the version of Kosli CLI.
Synopsis # Print the version of Kosli CLI. The output will look something like this: version.BuildInfo{Version:&amp;quot;v0.0.1&amp;quot;, GitCommit:&amp;quot;fe51cd1e31e6a202cba7dead9552a6d418ded79a&amp;quot;, GitTreeState:&amp;quot;clean&amp;quot;, GoVersion:&amp;quot;go1.16.3&amp;quot;}
Version is the semantic version of the release. GitCommit is the SHA for the commit that this version was built from. GitTreeState is &amp;quot;clean&amp;quot; if there are no local code changes when this binary was built, and &amp;quot;dirty&amp;quot; if the binary was built from locally modified code.</description></item></channel></rss>