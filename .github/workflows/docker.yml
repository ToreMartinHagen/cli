name: Docker

on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
      platforms:
        required: true
        type: string
      AWS_ACCOUNT_ID:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string
    secrets:
      slack_channel:
        required: true
      slack_webhook:
        required: true
      ghcr_user:
        required: true
      ghcr_token: 
        required: true         
      kosli_api_token:
        required: true
      snyk_token:
        required: true         


env:
  IMAGE: ghcr.io/kosli-dev/cli
  KOSLI_CLI_VERSION: "0.1.31"
  # KOSLI_DRY_RUN: "True"
  # Ordinarily we declare KOSLI_OWNER and KOSLI_PIPELINE here but
  # this interferes with the CLI integration tests


jobs:  
  docker:
    name: Docker Build
    runs-on: ubuntu-20.04
    permissions:
      id-token: write
      contents: write
    steps:

    - uses: actions/checkout@v3
      with:
        fetch-depth: 3

    - uses: actions/setup-go@v3
      with:
        go-version: '1.17.11'

    # Set up QEMU emulator to allow building multi-arch images
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    # This is the a separate action that sets up buildx (buildkit) runner
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2 

    # Push docker image to public ECR 
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        role-to-assume: arn:aws:iam::${{ inputs.AWS_ACCOUNT_ID }}:role/GithubActionsRole
        aws-region: ${{ inputs.AWS_REGION }}
        role-duration-seconds: 2400
        role-session-name: ${{ github.event.repository.name }}

    - name: Login to Amazon ECR private
      id: login-ecr-private
      uses: aws-actions/amazon-ecr-login@v1

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.ghcr_user }}
        password: ${{ secrets.ghcr_token }}   

    # Push image to the GHCR 
    - name: Build and push Docker image
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: ${{ env.IMAGE }}:${{ inputs.tag }}
        platforms: ${{ inputs.platforms }}
        cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max    


    - name: Make the image fingerprint available for following steps
      run: |
        ARTIFACT_SHA=$( echo ${{ steps.docker_build.outputs.digest }} | sed 's/.*://')
        echo "FINGERPRINT=$ARTIFACT_SHA" >> ${GITHUB_ENV}


    - name: setup-kosli-cli
      uses: kosli-dev/setup-cli-action@v1
      with:
        version:
          ${{ env.KOSLI_CLI_VERSION }}

    
    - name: setup Snyk
      uses: snyk/actions/setup@master


    - name: Declare Kosli pipeline
      env:
        KOSLI_API_TOKEN: ${{ secrets.kosli_api_token }}
        KOSLI_OWNER: compliancedb
        KOSLI_PIPELINE: cli
      run: 
        kosli pipeline declare 
          --description "Kosli CLI" 
          --template "artifact,snyk-code-scan,snyk-docker-scan"


    - name: Report Docker image to Kosli
      env:
        KOSLI_API_TOKEN: ${{ secrets.kosli_api_token }}
        KOSLI_OWNER: compliancedb
        KOSLI_PIPELINE: cli
      run: 
        kosli pipeline artifact report creation
           ${{ env.IMAGE }}:${{ inputs.tag }}
           --sha256=${{ env.FINGERPRINT }}


    - name: Run Snyk to check source code for vulnerabilities
      continue-on-error: true
      env:
        # In order to use the Snyk Action you will need to have a Snyk API token.
        # More details in https://github.com/snyk/actions#getting-your-snyk-token
        # or you can signup for free at https://snyk.io/login
        SNYK_TOKEN: ${{ secrets.snyk_token }}
      run: 
          snyk test --json-file-output=snyk-code.json


    - name: Report Snyk CODE scan results evidence to Kosli
      env:
        KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
        KOSLI_OWNER: compliancedb
        KOSLI_PIPELINE: cli
      run: 
        kosli pipeline artifact report evidence snyk 
          ${{ env.IMAGE }}:${{ inputs.tag }}
            --fingerprint ${{ env.FINGERPRINT }}
            --name snyk-code-scan
            --scan-results snyk-code.json
