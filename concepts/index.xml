<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Concepts on Merkely developer documentation</title><link>https://docs.merkely.com/concepts/</link><description>Recent content in Concepts on Merkely developer documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://docs.merkely.com/concepts/index.xml" rel="self" type="application/rss+xml"/><item><title>DevOps: Change is the New Normal</title><link>https://docs.merkely.com/concepts/devops_change_is_the_new_normal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/concepts/devops_change_is_the_new_normal/</guid><description>DevOps: Change is the New Normal # The software industry is moving away from large, monolithic, centrally managed IT systems, towards a future with small, loosely coupled and rapidly updated micro-systems.
And the rate of change is growing exponentially. Whereas in the past we would have quarterly releases orchestrated by IT departments, we now have a continuous stream of changes to production, delivered by cross functional teams operating in a you-build-it-you-run-it ownership structure.</description></item><item><title>DevOps and Change Management</title><link>https://docs.merkely.com/concepts/devops_and_change_management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/concepts/devops_and_change_management/</guid><description>DevOps and Change Management # If you work in regulated industries such as finance, medical, and retail, or even just need to follow certain industry standards such as ISO - the way you make software has compliance needs.
At a high level, all software processes have three components:
Process: You must have a defined (documented) way of working Implementation: You must follow this process Proof: You must be able to prove that you have followed this process So how are these needs typically met in traditional IT change management vs DevOps Change management?</description></item><item><title>Mapping your value stream</title><link>https://docs.merkely.com/concepts/mapping_your_value_stream/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/concepts/mapping_your_value_stream/</guid><description>Mapping your value stream # When implementing DevOps Change Management, the first step is to uncover your process as a team. The way we most often do this is to run a value stream mapping exercise with the team. This can be as simple as spending 30 minutes around a whiteboard, or as involved as you like.
Many aspects of the process will be implemented in your devops automation and tooling such as:</description></item><item><title>Understanding Binary Provenance</title><link>https://docs.merkely.com/concepts/understanding_binary_provenance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.merkely.com/concepts/understanding_binary_provenance/</guid><description>Understanding Binary Provenance # From a security and change management perspective, the strongest form of trust in your production environment is to identify what is running and know where it came from.
This is important because all the controls, audit trails and tools are worth nothing if you can simply switch the binaries at any stage in your delivery process.
To implement binary provenance, there are two problems to solve:</description></item></channel></rss>